<?php
namespace EES;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ElemeEmailServiceIf {
  public function ping();
  public function clear_cache($api_name, $params);
  public function send($sender, $receiver, $title, $content);
  public function msend($sender, $receivers, $title, $content);
  public function send_notification($receiver, $title, $content);
  public function msend_notification($receivers, $title, $content);
  public function send_alert($title, $content);
  public function process_send($email_id);
  public function process_push_android_message($msg_id);
  public function process_push_ios_message($msg_id);
  public function add_android_notify_message($trans_type, $content, $msg_type, $attached_content, $device_id);
  public function add_android_trans_message($msg_type, $attached_content, $device_id);
  public function add_ios_push_message($device_id, $attached_content);
  public function add_app_push_message($user_id, $order_id, $content, $device_id, $device_type);
  public function add_mobile_push_message($push_type, $content, $msg_type, $attached_content, $device_id, $device_type);
  public function add_napos_order_notify_message($device_id);
  public function get($email_id);
}

class ElemeEmailServiceClient implements \EES\ElemeEmailServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    return $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \EES\ElemeEmailService_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function clear_cache($api_name, $params)
  {
    $this->send_clear_cache($api_name, $params);
    $this->recv_clear_cache();
  }

  public function send_clear_cache($api_name, $params)
  {
    $args = new \EES\ElemeEmailService_clear_cache_args();
    $args->api_name = $api_name;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clear_cache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clear_cache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clear_cache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_clear_cache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_clear_cache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send($sender, $receiver, $title, $content)
  {
    $this->send_send($sender, $receiver, $title, $content);
    $this->recv_send();
  }

  public function send_send($sender, $receiver, $title, $content)
  {
    $args = new \EES\ElemeEmailService_send_args();
    $args->sender = $sender;
    $args->receiver = $receiver;
    $args->title = $title;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function msend($sender, $receivers, $title, $content)
  {
    $this->send_msend($sender, $receivers, $title, $content);
    $this->recv_msend();
  }

  public function send_msend($sender, $receivers, $title, $content)
  {
    $args = new \EES\ElemeEmailService_msend_args();
    $args->sender = $sender;
    $args->receivers = $receivers;
    $args->title = $title;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'msend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('msend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_msend()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_msend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_msend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function send_notification($receiver, $title, $content)
  {
    $this->send_send_notification($receiver, $title, $content);
    $this->recv_send_notification();
  }

  public function send_send_notification($receiver, $title, $content)
  {
    $args = new \EES\ElemeEmailService_send_notification_args();
    $args->receiver = $receiver;
    $args->title = $title;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_notification', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_notification', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_notification()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_send_notification_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_send_notification_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function msend_notification($receivers, $title, $content)
  {
    $this->send_msend_notification($receivers, $title, $content);
    $this->recv_msend_notification();
  }

  public function send_msend_notification($receivers, $title, $content)
  {
    $args = new \EES\ElemeEmailService_msend_notification_args();
    $args->receivers = $receivers;
    $args->title = $title;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'msend_notification', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('msend_notification', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_msend_notification()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_msend_notification_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_msend_notification_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function send_alert($title, $content)
  {
    $this->send_send_alert($title, $content);
    $this->recv_send_alert();
  }

  public function send_send_alert($title, $content)
  {
    $args = new \EES\ElemeEmailService_send_alert_args();
    $args->title = $title;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_alert', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_alert', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_alert()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_send_alert_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_send_alert_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_send($email_id)
  {
    $this->send_process_send($email_id);
    $this->recv_process_send();
  }

  public function send_process_send($email_id)
  {
    $args = new \EES\ElemeEmailService_process_send_args();
    $args->email_id = $email_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_process_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_process_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_push_android_message($msg_id)
  {
    $this->send_process_push_android_message($msg_id);
    $this->recv_process_push_android_message();
  }

  public function send_process_push_android_message($msg_id)
  {
    $args = new \EES\ElemeEmailService_process_push_android_message_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_push_android_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_push_android_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_push_android_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_process_push_android_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_process_push_android_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_push_ios_message($msg_id)
  {
    $this->send_process_push_ios_message($msg_id);
    $this->recv_process_push_ios_message();
  }

  public function send_process_push_ios_message($msg_id)
  {
    $args = new \EES\ElemeEmailService_process_push_ios_message_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_push_ios_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_push_ios_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_push_ios_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_process_push_ios_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_process_push_ios_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_android_notify_message($trans_type, $content, $msg_type, $attached_content, $device_id)
  {
    $this->send_add_android_notify_message($trans_type, $content, $msg_type, $attached_content, $device_id);
    $this->recv_add_android_notify_message();
  }

  public function send_add_android_notify_message($trans_type, $content, $msg_type, $attached_content, $device_id)
  {
    $args = new \EES\ElemeEmailService_add_android_notify_message_args();
    $args->trans_type = $trans_type;
    $args->content = $content;
    $args->msg_type = $msg_type;
    $args->attached_content = $attached_content;
    $args->device_id = $device_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_android_notify_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_android_notify_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_android_notify_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_add_android_notify_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_add_android_notify_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_android_trans_message($msg_type, $attached_content, $device_id)
  {
    $this->send_add_android_trans_message($msg_type, $attached_content, $device_id);
    $this->recv_add_android_trans_message();
  }

  public function send_add_android_trans_message($msg_type, $attached_content, $device_id)
  {
    $args = new \EES\ElemeEmailService_add_android_trans_message_args();
    $args->msg_type = $msg_type;
    $args->attached_content = $attached_content;
    $args->device_id = $device_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_android_trans_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_android_trans_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_android_trans_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_add_android_trans_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_add_android_trans_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_ios_push_message($device_id, $attached_content)
  {
    $this->send_add_ios_push_message($device_id, $attached_content);
    $this->recv_add_ios_push_message();
  }

  public function send_add_ios_push_message($device_id, $attached_content)
  {
    $args = new \EES\ElemeEmailService_add_ios_push_message_args();
    $args->device_id = $device_id;
    $args->attached_content = $attached_content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_ios_push_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_ios_push_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_ios_push_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_add_ios_push_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_add_ios_push_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_app_push_message($user_id, $order_id, $content, $device_id, $device_type)
  {
    $this->send_add_app_push_message($user_id, $order_id, $content, $device_id, $device_type);
    $this->recv_add_app_push_message();
  }

  public function send_add_app_push_message($user_id, $order_id, $content, $device_id, $device_type)
  {
    $args = new \EES\ElemeEmailService_add_app_push_message_args();
    $args->user_id = $user_id;
    $args->order_id = $order_id;
    $args->content = $content;
    $args->device_id = $device_id;
    $args->device_type = $device_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_app_push_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_app_push_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_app_push_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_add_app_push_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_add_app_push_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_mobile_push_message($push_type, $content, $msg_type, $attached_content, $device_id, $device_type)
  {
    $this->send_add_mobile_push_message($push_type, $content, $msg_type, $attached_content, $device_id, $device_type);
    $this->recv_add_mobile_push_message();
  }

  public function send_add_mobile_push_message($push_type, $content, $msg_type, $attached_content, $device_id, $device_type)
  {
    $args = new \EES\ElemeEmailService_add_mobile_push_message_args();
    $args->push_type = $push_type;
    $args->content = $content;
    $args->msg_type = $msg_type;
    $args->attached_content = $attached_content;
    $args->device_id = $device_id;
    $args->device_type = $device_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_mobile_push_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_mobile_push_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_mobile_push_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_add_mobile_push_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_add_mobile_push_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_napos_order_notify_message($device_id)
  {
    $this->send_add_napos_order_notify_message($device_id);
    $this->recv_add_napos_order_notify_message();
  }

  public function send_add_napos_order_notify_message($device_id)
  {
    $args = new \EES\ElemeEmailService_add_napos_order_notify_message_args();
    $args->device_id = $device_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_napos_order_notify_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_napos_order_notify_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_napos_order_notify_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_add_napos_order_notify_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_add_napos_order_notify_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get($email_id)
  {
    $this->send_get($email_id);
    return $this->recv_get();
  }

  public function send_get($email_id)
  {
    $args = new \EES\ElemeEmailService_get_args();
    $args->email_id = $email_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EES\ElemeEmailService_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EES\ElemeEmailService_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ElemeEmailService_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeEmailService_ping_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_ping_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_ping_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_ping_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_ping_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_clear_cache_args extends TBase {
  static $_TSPEC;

  public $api_name = null;
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_clear_cache_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_clear_cache_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_clear_cache_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_clear_cache_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_clear_cache_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_clear_cache_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_clear_cache_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_send_args extends TBase {
  static $_TSPEC;

  public $sender = null;
  public $receiver = null;
  public $title = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'receiver',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_send_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_send_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_send_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_send_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_msend_args extends TBase {
  static $_TSPEC;

  public $sender = null;
  public $receivers = null;
  public $title = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sender',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'receivers',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_msend_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_msend_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_msend_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_msend_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_msend_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_msend_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_msend_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_send_notification_args extends TBase {
  static $_TSPEC;

  public $receiver = null;
  public $title = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiver',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_send_notification_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_send_notification_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_send_notification_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_send_notification_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_send_notification_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_send_notification_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_send_notification_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_msend_notification_args extends TBase {
  static $_TSPEC;

  public $receivers = null;
  public $title = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receivers',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_msend_notification_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_msend_notification_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_msend_notification_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_msend_notification_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_msend_notification_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_msend_notification_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_msend_notification_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_send_alert_args extends TBase {
  static $_TSPEC;

  public $title = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_send_alert_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_send_alert_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_send_alert_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_send_alert_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_send_alert_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_send_alert_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_send_alert_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_process_send_args extends TBase {
  static $_TSPEC;

  public $email_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_process_send_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_process_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_process_send_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_process_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_process_send_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_process_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_process_send_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_process_push_android_message_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_process_push_android_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_process_push_android_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_process_push_android_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_process_push_android_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_process_push_android_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_process_push_android_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_process_push_android_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_process_push_ios_message_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_process_push_ios_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_process_push_ios_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_process_push_ios_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_process_push_ios_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_process_push_ios_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_process_push_ios_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_process_push_ios_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_android_notify_message_args extends TBase {
  static $_TSPEC;

  public $trans_type = null;
  public $content = null;
  public $msg_type = null;
  public $attached_content = null;
  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'trans_type',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg_type',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'attached_content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_android_notify_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_android_notify_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_android_notify_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_android_notify_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_android_notify_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_android_notify_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_android_notify_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_android_trans_message_args extends TBase {
  static $_TSPEC;

  public $msg_type = null;
  public $attached_content = null;
  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_type',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'attached_content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_android_trans_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_android_trans_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_android_trans_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_android_trans_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_android_trans_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_android_trans_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_android_trans_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_ios_push_message_args extends TBase {
  static $_TSPEC;

  public $device_id = null;
  public $attached_content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'attached_content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_ios_push_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_ios_push_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_ios_push_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_ios_push_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_ios_push_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_ios_push_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_ios_push_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_app_push_message_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $order_id = null;
  public $content = null;
  public $device_id = null;
  public $device_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'device_type',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_app_push_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_app_push_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_app_push_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_app_push_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_app_push_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_app_push_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_app_push_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_mobile_push_message_args extends TBase {
  static $_TSPEC;

  public $push_type = null;
  public $content = null;
  public $msg_type = null;
  public $attached_content = null;
  public $device_id = null;
  public $device_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'push_type',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'msg_type',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'attached_content',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'device_type',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_mobile_push_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_mobile_push_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_mobile_push_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_mobile_push_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_mobile_push_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_mobile_push_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_mobile_push_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_napos_order_notify_message_args extends TBase {
  static $_TSPEC;

  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_napos_order_notify_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_napos_order_notify_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_napos_order_notify_message_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_add_napos_order_notify_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_add_napos_order_notify_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_add_napos_order_notify_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_add_napos_order_notify_message_result', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_get_args extends TBase {
  static $_TSPEC;

  public $email_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_get_args', self::$_TSPEC, $output);
  }
}

class ElemeEmailService_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EES\TEmail',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EES\EESUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeEmailService_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeEmailService_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeEmailService_get_result', self::$_TSPEC, $output);
  }
}


