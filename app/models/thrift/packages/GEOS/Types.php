<?php
namespace GEOS;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class GEOSErrorCode {
  const UNKNOWN_ERROR = 0;
  const INVALID_RESTAURANT_AREA = 1;
  const INVALID_REGION_AREA = 2;
  const INVALID_RRC_REGION_AREA = 3;
  const REGION_AREA_TOO_LARGE = 4;
  const RESTAURANT_AREA_TOO_LARGE = 5;
  const RRC_REGION_AREA_TOO_LARGE = 6;
  const CL_RRC_REGION_NOT_FOUND = 7;
  const RRC_REGION_NOT_FOUND = 8;
  const REGION_NOT_FOUND = 9;
  const GEOHASH_NAME_NOT_FOUND = 10;
  const GEOHASH_RESTAURANT_NOT_FOUND = 11;
  const RRC_REGION_OUT_OF_PARENT_REGION = 12;
  const CANT_REMOVE_RRC_REGION_HAS_FIXED_RANKING = 13;
  const CONFLICT_WITH_OTHER_RRC_REGION = 14;
  const CANT_MODIFY_REGION_ID = 15;
  const POI_NOT_FOUND = 16;
  const QUERY_AREA_TOO_LARGE = 17;
  const POI_NAME_EMPTY = 18;
  const POI_ADDRESS_EMPTY = 19;
  const POI_CITY_EMPTY = 20;
  const POI_LOC_EMPTY = 21;
  const POI_PGUID_AUTOMATICALLY = 22;
  const POI_PSN_AUTOMATICALLY = 23;
  const PSN_AND_PGUID_READ_ONLY = 24;
  const GEOHASH_NOT_VALID = 25;
  const NO_PGUID_IN_POI = 26;
  const INVALID_LAT_LON = 27;
  const INVALID_FIELD_VALUE = 28;
  const DATABASE_ERROR = 29;
  const ERS_CLIENT_ERROR = 30;
  const TASK_REVOKE = 31;
  const CRAWL_POI_ERROR = 32;
  static public $__names = array(
    0 => 'UNKNOWN_ERROR',
    1 => 'INVALID_RESTAURANT_AREA',
    2 => 'INVALID_REGION_AREA',
    3 => 'INVALID_RRC_REGION_AREA',
    4 => 'REGION_AREA_TOO_LARGE',
    5 => 'RESTAURANT_AREA_TOO_LARGE',
    6 => 'RRC_REGION_AREA_TOO_LARGE',
    7 => 'CL_RRC_REGION_NOT_FOUND',
    8 => 'RRC_REGION_NOT_FOUND',
    9 => 'REGION_NOT_FOUND',
    10 => 'GEOHASH_NAME_NOT_FOUND',
    11 => 'GEOHASH_RESTAURANT_NOT_FOUND',
    12 => 'RRC_REGION_OUT_OF_PARENT_REGION',
    13 => 'CANT_REMOVE_RRC_REGION_HAS_FIXED_RANKING',
    14 => 'CONFLICT_WITH_OTHER_RRC_REGION',
    15 => 'CANT_MODIFY_REGION_ID',
    16 => 'POI_NOT_FOUND',
    17 => 'QUERY_AREA_TOO_LARGE',
    18 => 'POI_NAME_EMPTY',
    19 => 'POI_ADDRESS_EMPTY',
    20 => 'POI_CITY_EMPTY',
    21 => 'POI_LOC_EMPTY',
    22 => 'POI_PGUID_AUTOMATICALLY',
    23 => 'POI_PSN_AUTOMATICALLY',
    24 => 'PSN_AND_PGUID_READ_ONLY',
    25 => 'GEOHASH_NOT_VALID',
    26 => 'NO_PGUID_IN_POI',
    27 => 'INVALID_LAT_LON',
    28 => 'INVALID_FIELD_VALUE',
    29 => 'DATABASE_ERROR',
    30 => 'ERS_CLIENT_ERROR',
    31 => 'TASK_REVOKE',
    32 => 'CRAWL_POI_ERROR',
  );
}

class TGeohashName extends TBase {
  static $_TSPEC;

  public $geohash = null;
  public $is_filled = null;
  public $city_id = null;
  public $district_id = null;
  public $name = null;
  public $address = null;
  public $pguid = null;
  public $created_at = null;
  public $is_manually = null;
  public $online_payment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'is_filled',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'district_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'pguid',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'is_manually',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'online_payment',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TGeohashName';
  }

  public function read($input)
  {
    return $this->_read('TGeohashName', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TGeohashName', self::$_TSPEC, $output);
  }
}

class TRrcRegion extends TBase {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $region_id = null;
  public $area = null;
  public $created_at = null;
  public $is_premium = null;
  public $has_fixed_ranking = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'region_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'area',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'is_premium',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'has_fixed_ranking',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRrcRegion';
  }

  public function read($input)
  {
    return $this->_read('TRrcRegion', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRrcRegion', self::$_TSPEC, $output);
  }
}

class TRrcRegionQuery extends TBase {
  static $_TSPEC;

  public $region_ids = null;
  public $name = null;
  public $offset = null;
  public $limit = null;
  public $is_premium = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'region_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'is_premium',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRrcRegionQuery';
  }

  public function read($input)
  {
    return $this->_read('TRrcRegionQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRrcRegionQuery', self::$_TSPEC, $output);
  }
}

class TRrcRegionRanking extends TBase {
  static $_TSPEC;

  public $id = null;
  public $rrc_region_id = null;
  public $restaurant_id = null;
  public $ranking = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rrc_region_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ranking',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRrcRegionRanking';
  }

  public function read($input)
  {
    return $this->_read('TRrcRegionRanking', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRrcRegionRanking', self::$_TSPEC, $output);
  }
}

class TRrcRegionRankingPr extends TBase {
  static $_TSPEC;

  public $id = null;
  public $rrc_region_id = null;
  public $restaurant_id = null;
  public $ranking = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rrc_region_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ranking',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRrcRegionRankingPr';
  }

  public function read($input)
  {
    return $this->_read('TRrcRegionRankingPr', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRrcRegionRankingPr', self::$_TSPEC, $output);
  }
}

class TPoi extends TBase {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $address = null;
  public $latitude = null;
  public $longitude = null;
  public $pguid = null;
  public $psn = null;
  public $city = null;
  public $info_json = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'pguid',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'psn',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'info_json',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPoi';
  }

  public function read($input)
  {
    return $this->_read('TPoi', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPoi', self::$_TSPEC, $output);
  }
}

class GEOSUserException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GEOSUserException';
  }

  public function read($input)
  {
    return $this->_read('GEOSUserException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GEOSUserException', self::$_TSPEC, $output);
  }
}

class GEOSSystemException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GEOSSystemException';
  }

  public function read($input)
  {
    return $this->_read('GEOSSystemException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GEOSSystemException', self::$_TSPEC, $output);
  }
}

class GEOSUnknownException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GEOSUnknownException';
  }

  public function read($input)
  {
    return $this->_read('GEOSUnknownException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GEOSUnknownException', self::$_TSPEC, $output);
  }
}

$GLOBALS['geos_CONSTANTS']['DEFAULT_LIST_SIZE'] = 100;

$GLOBALS['geos_CONSTANTS']['MAX_LIST_SIZE'] = 1000;


