<?php
namespace EUS;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ElemeUserServiceIf {
  public function ping();
  public function clear_cache($api_name, $params);
  public function update_cache_for_replicator($name, $ids, $type_);
  public function update_cache($tablename, $ids);
  public function auth($username, $passward);
  public function sns_auth($sns_uid, $sns_type);
  public function sns_auth_new($sns_uid, $sns_type);
  public function signup($username, $email, $passward);
  public function extend_signup($username, $email, \EUS\TSignupExtendParam $extend_param, $password);
  public function get_mobile_location($mobile);
  public function mobileclient_signup($mobile, $validation_code, \EUS\TSignupExtendParam $extend_param, $password);
  public function hermes_mobileclient_signup($mobile, $validation_code, \EUS\TSignupExtendParam $extend_param, $password, $sender_key);
  public function napos_mobileclient_signup($mobile);
  public function mobileclient_validation_code_login($mobile, $validation_code);
  public function hermes_mobileclient_validation_code_login($mobile, $validation_code, $sender_key);
  public function mobileclient_mobile_login($mobile, $password);
  public function mobileclient_set_username($user_id, $username);
  public function mobileclient_set_password($user_id, $password);
  public function mobileclient_reset_password($mobile, $validation_code, $new_password);
  public function hermes_mobileclient_reset_password($mobile, $validation_code, $new_password, $sender_key);
  public function mobileclient_update_password($user_id, $validation_code, $new_password);
  public function mobileclient_sns_login($sns_type, $sns_uid, $sns_username);
  public function mobileclient_sns_login_new($sns_type, $sns_uid, $sns_username, $device_type);
  public function get_auto_generated_user($user_id);
  public function get_pending_refer();
  public function get_suspicious_refer();
  public function get_user_referal_code($user_id);
  public function is_user_refered($user_id, $mode);
  public function temp_super_user_bind($username, $mobile, $restaurant_id, $bank_id, $card_id, $cardholder_name, $process_user_id);
  public function third_signup($user_id, $session_id, $user_type);
  public function is_username_available($username);
  public function save_dop_user($nid, \EUS\TDopUser $save_struct);
  public function reset_password($user_id, $new_password);
  public function force_reset_password($user_id, $admin_user_id, $new_password);
  public function update_password($user_id, $old_password, $new_password, $current_session);
  public function clean_session($user_id, $current_session);
  public function post_login(\EUS\TLoginStruct $login_struct);
  public function set_avatar($user_id, $avatar);
  public function bind_sns($user_id, $sns_uid, $sns_type);
  public function bind_sns_new($user_id, $sns_uid, $sns_type);
  public function renren_purify($user_id, $username, $email, $password);
  public function unbind_sns($user_id, $sns_type);
  public function bind_device($user_id, $device_id, $device_type, $version, $come_from, $eleme_device_id, $version_name);
  public function unbind_device($user_id, $device_id, $device_type);
  public function update_email($user_id, $email);
  public function update_user_email($user_id, $admin_user_id, $email);
  public function update_tester_user_profile($tester_user_id, $balance, $point, $mobile, $payment_quota, $is_mobile_valid);
  public function update_username($user_id, $op_user_id, $username);
  public function update_mobile($user_id, $mobile);
  public function bind_mobile($user_id, $mobile);
  public function add_address($user_id, $entry_id, $geohash, $phone, $address, $phone_bk);
  public function add_address_new($user_id, $address, $phone, $phone_bk, $name, $geohash);
  public function update_address_new($user_id, $address_id, $address, $phone, $phone_bk, $name);
  public function update_address($user_id, $address_id, $phone, $address, $phone_bk);
  public function delete_address($user_id, $address_id);
  public function set_default_address($user_id, $address_id);
  public function set_groups($user_id, $group_ids);
  public function add_invoice($user_id, $invoice_pay_to);
  public function update_invoice($user_id, $invoice_id, $invoice_pay_to);
  public function delete_invoice($user_id, $invoice_id);
  public function set_default_invoice($user_id, $invoice_id);
  public function count_unprocessed_user_gift();
  public function mset_user_gift_status($user_gift_ids, $processed);
  public function mset_user_gift_valid($user_gift_ids, $is_valid);
  public function mset_feedback_reply_valid($reply_ids, $valid);
  public function delete_bankcard($bankcard_id);
  public function update_user_gift(\EUS\TUserGift $update_struct);
  public function save_gift($gift_id, \EUS\TGift $save_struct);
  public function exchange_gift($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note);
  public function analyse_user_gift($user_gift_id);
  public function exchange_gift_wkf($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note);
  public function analyse_user_gift_wkf($user_gift_id);
  public function human_check_pass_wkf($user_gift_id);
  public function human_check_fail_wkf($user_gift_id);
  public function gift_received_wkf($user_gift_id);
  public function change_point($user_id, $point_change, $reason, $relevant_id, $change_type);
  public function set_rate_message_read($target_id);
  public function check_restaurant_admin($user_id, $restaurant_id);
  public function check_service_admin($user_id);
  public function count_unread_message($user_id);
  public function mark_message_as_read($user_id, $message_id);
  public function mark_all_message_as_read($user_id);
  public function get_user_permission($user_id);
  public function set_pay_record_method($user_id, $pay_record_id, $method_json);
  public function add_feedback($user_id, $content, $comment_type, $entry_id, $zone_id, $district_id, $city_id, $geohash, $user_agent);
  public function mget_feedback($feedback_ids);
  public function count_feedback(\EUS\TFeedbackQuery $query_struct);
  public function query_feedback(\EUS\TFeedbackQuery $query_struct);
  public function query_feedback_with_replies(\EUS\TFeedbackQuery $query_struct);
  public function count_feedback_reply(\EUS\TFeedbackReplyQuery $query_struct);
  public function query_feedback_reply(\EUS\TFeedbackReplyQuery $query_struct);
  public function feedback_reply($feedback_id, $user_id, $content);
  public function add_restaurant_admin($restaurant_id, $user_id);
  public function delete_restaurant_admin($restaurant_id, $user_id);
  public function modify_payment_quota($user_id, $payment_quota, $ip);
  public function generate_email_validate_str($user_id);
  public function validate_old_mobile($user_id, $mobile);
  public function send_validate_code($user_id, $terminal, $terminal_type, $ip);
  public function validate_terminal($user_id, $terminal, $terminal_type, $validate_code, $ip);
  public function unbind_terminal($user_id, $terminal_type, $validate_code, $ip);
  public function send_notice($user_id, $type_code, $title, $content);
  public function send_unsent_notice();
  public function send_unsent_notice_by_user($user_id);
  public function send_coupon_by_sms($mobile);
  public function send_coupon_by_sms2($mobile, $source);
  public function active_email($active_code);
  public function generate_retrieval_password_final_token($email);
  public function reset_forgetted_password($final_token, $password);
  public function check_password_retrieval_token($final_token);
  public function get_user_point_change_except_order($user_id, $order_id);
  public function save_pay_error($error_id, \EUS\TPayError $t_error);
  public function get_pay_record($record_id);
  public function get_pay_record_by_unique_id($unique_id);
  public function get_pay_record_id_by_order_id($order_id);
  public function get_order_id_by_pay_record_id($pay_record_id);
  public function check_function_blocked($user_id, $func);
  public function count_trade_record(\EUS\TTradeRecordQuery $query_struct);
  public function parse_ip($ip);
  public function sum_balance_change(\EUS\TUserBalanceChangeQuery $query_struct);
  public function set_user_place(\EUS\TUserPlace $set_struct);
  public function delete_user_place($id);
  public function account_get_stats($user_id, $begin_datetime, $end_datetime);
  public function account_get_stats_by_type($user_id, $type_code);
  public function walle_get_all_groups();
  public function walle_get_all_permissions();
  public function walle_get_all_group_permissions();
  public function walle_add_group_permission($group_id, $permission_id);
  public function walle_remove_group_permission($group_id, $permission_id);
  public function walle_save_group($group_id, \EUS\TGroup $group_struct);
  public function walle_save_permission($permission_id, \EUS\TPermission $permission_struct);
  public function walle_count_balance_change(\EUS\TWalleBalanceChangeQuery $query_struct);
  public function walle_query_balance_change(\EUS\TWalleBalanceChangeQuery $query_struct);
  public function walle_count_withdraw_apply(\EUS\TWalleWithdrawApplyQuery $query_struct);
  public function walle_query_withdraw_apply(\EUS\TWalleWithdrawApplyQuery $query_struct);
  public function walle_count_withdraw_record(\EUS\TWalleWithdrawRecordQuery $query_struct);
  public function walle_mset_withdraw_process_record_batch_id($ids, $batch_id);
  public function walle_query_withdraw_record(\EUS\TWalleWithdrawRecordQuery $query_struct);
  public function walle_mget_withdraw_record($ids);
  public function walle_mset_withdraw_record_status($ids, $status);
  public function walle_get_latest_withdraw_process_record_by_withdraw_id($withdraw_id);
  public function walle_bind_email($user_id, $admin_user_id, $email);
  public function walle_get_online_sev($process_types);
  public function walle_get_point_change_list(\EUS\TPointChangeRecordQuery $query_struct);
  public function walle_get_user_list(\EUS\TUserQuery $query_struct);
  public function walle_get_user_gift_list(\EUS\TUserGiftQuery $query_struct);
  public function walle_get_user_gift_list_by_ids($user_gift_ids);
  public function walle_set_active($user_id, $is_active);
  public function walle_set_user_active($user_id, $admin_user_id, $is_active, $description);
  public function walle_set_name($user_id, $name);
  public function walle_set_super_admin($user_id, $is_super_admin);
  public function walle_unbind_email($user_id);
  public function walle_unbind_mobile($user_id);
  public function walle_change_mobile($user_id, $admin_user_id, $new_mobile);
  public function walle_count_online_payment_apply(\EUS\TWalleOnlinePaymentApplyQuery $query_struct);
  public function walle_query_online_payment_apply(\EUS\TWalleOnlinePaymentApplyQuery $query_struct);
  public function walle_query_point_change(\EUS\TWallePointChangeQuery $query_struct);
  public function walle_count_point_change(\EUS\TWallePointChangeQuery $query_struct);
  public function walle_get_pay_stats_detail_count(\EUS\TWallePayStatsQuery $query_struct);
  public function walle_get_pay_stats_overview(\EUS\TWallePayStatsQuery $query_struct);
  public function walle_get_pay_stats_detail(\EUS\TWallePayStatsQuery $query_struct);
  public function walle_mset_feedback_processed($feedback_ids, $is_processed);
  public function walle_query_withdraw_process_batch($statuses, $batch_id, $offset, $limit);
  public function walle_mset_feedback_valid($feedback_ids, $is_valid);
  public function walle_count_withdraw_process_batch($statuses, $batch_id);
  public function walle_get_withdraw_process_record_by_batch_id($batch_id);
  public function dms_get_dop_user_list();
  public function mobile_third_signup($third_user_id, $session_id);
  public function query_device_user(\EUS\TDeviceUserQuery $query);
  public function mobile_query_blocked_device_user_list(\EUS\TBlockedDeviceUserQuery $query);
  public function mobile_get_sns_map($user_id);
  public function mobile_get_sns_map_new($user_id);
  public function mobile_save_food_image($user_id, $food_id, $image_hash);
  public function mobile_add_feedback($user_id, $username, $content, $feedback_type, $version, $description, $contact);
  public function pay_upload_alipay_accounts($raw_accounts_str);
  public function pay_upload_cgb_accounts($raw_accounts_str);
  public function pay_for_order_new($user_id, $order_id, $pay_company_id, $come_from, $pay_bank, $hongbao_sn, $password);
  public function update_pay_method_for_order($order_id, $pay_company_id, $come_from, $pay_bank);
  public function walle_pay_for_order($user_id, $order_id, $original_total, $hongbao_sn);
  public function pay_for_contract($user_id, $contract_sn, $password);
  public function pay_for_contract_direct($contract_sn);
  public function pay_success(\EUS\TCPayReturnInfo $pay_return_info, $from_action, $ip);
  public function pay_manually_success($pay_record_id, $user_id, $admin_user_id, $password);
  public function pay_record_make($user_id, $pay_co_id, $total_fee, $remark);
  public function pay_record_make_new($user_id, $pay_company_id, $come_from, $pay_bank, $total_fee);
  public function pay_record_fail($pay_record_id);
  public function direct_order_pay_fail($order_id);
  public function direct_order_pay_fail_new($order_id);
  public function pay_is_success($pay_record_id);
  public function pay_get_alipay_info();
  public function pay_get_today_payment($user_id);
  public function withdraw_set_fatal($withdraw_id, $remark);
  public function withdraw_get_apply_records();
  public function withdraw_restaurant_apply($restaurant_id, $process_user_id, $amount, $password);
  public function submit_withdraw_record($withdraw_id);
  public function check_withdraw_record($withdraw_id);
  public function withdraw_user_drawback($user_id, $process_user_id, $amount);
  public function anonymous_user_drawback($order_id);
  public function get_alipay_refund_apply_info($batch_no);
  public function query_alipay_unprocessed_batch();
  public function alipay_drawback_process_notify(\EUS\TCDrawbackProcessNotify $drawback_process_notify);
  public function query_drawback_process_record(\EUS\TDrawbackProcessRecordQuery $query_struct);
  public function retry_drawback_process($drawback_process_id, $process_user_id, $pay_platform, $pay_account);
  public function drawback_process_manually_success($drawback_process_id, $image_hash);
  public function get_alipay_refund_url($batch_no);
  public function get_drawback_report();
  public function get_drawback_result_info($username, $order_id);
  public function get_drawback_result_info_new($username, $order_id);
  public function bankcard_bind_apply($user_id, $card_id, $bank_id, $cardholder_name, $password);
  public function bankcard_bind_update($user_id, $card_id, $bank_id, $cardholder_name, $password);
  public function bankcard_bind_approve($record_id);
  public function bankcard_bind_overrule($record_id);
  public function bankcard_bind($user_id, $card_id, $bank_id, $cardholder_name);
  public function balance_reconciliation();
  public function generate_hongbao_exchange($batch_sn, $count, $value, $sum_condition, $duration, $expire_date);
  public function generate_hongbao($user_ids, \EUS\THongbao $query_struct);
  public function generate_restaurant_activity_hongbao($order_id);
  public function exchange_hongbao($user_id, $exchange_code);
  public function charge_hongbao($pay_record_id);
  public function new_user_hongbao($user_id, $order_id);
  public function bind_mobile_hongbao($user_id, $phone);
  public function award_refer_hongbao($refer_ids);
  public function punish_refers($refer_ids);
  public function award_refer_bind_mobile_hongbao($refer_id);
  public function user_certification_apply($user_id, \EUS\TUserCertificationApply $user_certification_struct);
  public function process_user_certification($user_id, $to_status, $remark, $process_user_id);
  public function get_user_certification($user_id);
  public function query_user_certification_process_records($user_id);
  public function post_process_user_certification($record_id);
  public function new_user_bankcard_apply($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name);
  public function update_user_bankcard($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $process_user_id);
  public function update_user_bankcard_by_user($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $password);
  public function query_user_certification(\EUS\TUserCertificationQuery $query_struct);
  public function count_user_certification(\EUS\TUserCertificationQuery $query_struct);
  public function sso_create($user_id, $sso_type, $info_raw, $ip_addr);
  public function sso_is_tfauthed($sso_id);
  public function sso_tfauth($sso_id);
  public function sso_destroy($sso_id, $action, $user_id, $ip_addr);
  public function sso_destroy_admin($sso_id, $action, $op_user_id, $ip_addr);
  public function sso_destroy_system($sso_id, $action);
  public function sso_check($sso_id, $sso_app, $info_raw, $ip_addr);
  public function sso_count_valid($user_id);
  public function sso_mget($user_id, $is_valid, $start_date, $end_date);
  public function ucb_create($user_id, $info_raw, $ip_addr);
  public function ucb_destroy($ucb_id, $action, $user_id, $ip_addr);
  public function ucb_destroy_admin($ucb_id, $action, $admin_user_id, $ip_addr);
  public function ucb_destroy_system($ucb_id, $action);
  public function ucb_check($ucb_ids, $user_id, $info_raw, $ip_addr);
  public function ucb_mget($user_id, $is_valid, $start_date, $end_date);
  public function umcb_create($user_id, $mobile, $info_raw, $ip_addr);
  public function umcb_check($user_id, $mobile, $info_raw, $ip_addr);
  public function umb_create($user_id, $mobile);
  public function umb_destroy_admin($umb_id, $action, $admin_user_id, $ip_addr);
  public function umb_mget($user_id, $mobile, $is_valid);
  public function mcb_destroy_admin($mcb_id, $action, $admin_user_id, $ip_addr);
  public function mcb_destroy_system($mcb_id, $action);
  public function mcb_mget($mobile, $is_valid, $start_date, $end_date);
  public function add_blocked_device($eleme_device_id, $user_id, $operator_user_id, $reason, $come_from);
  public function get_pay_discount_map($come_from);
  public function clean_timeout_message();
  public function clean_outofdate_message();
  public function back_up_mysql_task();
  public function clean_timeout_mysql_task();
  public function signal_post_make_order($order_id);
  public function signal_post_process_order($order_process_record_id);
  public function process_claim_order($order_id, $user_id);
  public function process_push_android_message($msg_id);
  public function process_push_ios_message($msg_id);
  public function process_add_user_message($message_type, $target_id);
  public function process_quit_online_payment($restaurant_id, $user_id, $timestamp);
  public function process_post_refund_apply($order_id);
  public function process_post_settle_up_order($order_id);
  public function unsubscribe_order_sms($mobile);
  public function process_order_refund_fail($order_id);
  public function process_order_refund_success($order_id);
  public function invalid_order_income($order_id);
  public function filter_drawbacked_anonymous_order_ids($order_ids);
  public function has_permissions($user_id, $permissions, $is_strict);
  public function has_groups($user_id, $groups, $is_strict);
  public function clean_timout_message();
  public function send_restaurant_daily_balance_report($restaurant_id);
  public function get_user_refer_rank($user_id);
  public function send_ecredit($order_id, $user_id, $phone, $ecredit_amount);
  public function check_ecredit_ok($phone);
  public function get_ecredit_amount_by_order_id($order_id);
  public function get($user_id);
  public function master_get($user_id);
  public function get_third_user_session_by_user_id($user_id);
  public function get_by_username($username);
  public function get_by_mobile($mobile);
  public function mget($user_ids);
  public function mget_by_username($username);
  public function get_bank($bank_id);
  public function get_bank_list();
  public function mget_bank($bank_ids);
  public function get_bankcard($user_id, $status);
  public function get_bankcard_by_user($user_id);
  public function mget_bankcard_by_restaurant($restaurant_ids);
  public function get_dop_user($user_id);
  public function mget_dop_user($user_ids);
  public function get_profile($user_id);
  public function master_get_profile($user_id);
  public function mget_profile($user_ids);
  public function query_profile(\EUS\TUserProfileQuery $query_struct);
  public function get_remember_key($remember_key);
  public function get_full($user_id);
  public function get_full_by_valid_mobile($mobile);
  public function query_full(\EUS\TFullUserQuery $qeury_struct);
  public function get_address($address_id);
  public function get_invoice($invoice_id);
  public function get_gift($gift_id);
  public function mget_gift($gift_ids);
  public function get_group_list();
  public function get_user_gift($user_gift_id);
  public function mget_user_gift($user_gift_ids);
  public function get_weibo_map_by_user($user_id);
  public function get_renren_map_by_user($user_id);
  public function get_weixin_map_by_user($user_id);
  public function get_hongbao($hongbao_id);
  public function get_hongbao_by_sn($hongbao_sn);
  public function invalid_hongbao($hongbao_sn);
  public function invalid_restaurant_activity_hongbao($order_id);
  public function sum_hongbao_amount(\EUS\THongbaoSum $query_struct);
  public function query_hongbao(\EUS\THongbaoQuery $query_struct);
  public function count_hongbao(\EUS\THongbaoQuery $query_struct);
  public function get_order_payment_constitution_map($order_ids);
  public function query_address_by_user($user_id);
  public function query_invoice_by_user($user_id);
  public function query_user_gift($user_id);
  public function query_user_group($user_id);
  public function count_gift(\EUS\TGiftQuery $query_struct);
  public function query_gift(\EUS\TGiftQuery $query_struct);
  public function query_available_gift();
  public function query_unread_user_message($user_id);
  public function query_user_place(\EUS\TUserPlaceQuery $query_struct);
  public function query_refer(\EUS\TReferQuery $query_struct);
  public function master_get_refer_by_to_user_id($user_id);
  public function query_terminal_validation(\EUS\TTerminalValidationQuery $query_struct);
  public function get_weibo_map_by_weibo_id($weibo_uid);
  public function get_renren_map_by_renren_id($renren_uid);
  public function get_weixin_map_by_weixin_id($weixin_uid);
  public function get_restaurant_admin($restaurant_id);
  public function get_restaurant_admin_by_admin($user_id);
  public function get_restaurant_admin_by_admin_new($user_id);
  public function query_trade_record(\EUS\TTradeRecordQuery $query_struct);
  public function query_login_info(\EUS\TLoginInfoQuery $query_struct);
  public function mget_user_bankcard($record_ids);
  public function get_user_meta_data($user_id);
  public function query_user_meta_data(\EUS\TUserMetaDataQuery $query_struct);
  public function query_user_change_record(\EUS\TUserChangeRecordQuery $query_struct);
  public function get_user_custom_menu_by_user($user_id);
  public function save_user_custom_menu($menu_id, \EUS\TUserCustomMenu $menu);
  public function set_user_manage_groups($user_id, $group_ids);
  public function get_managed_user_ids($user_id);
  public function get_managed_group_ids($user_id);
  public function get_pay_record_by_order_id($order_id);
  public function get_last_pay_record_by_order_id($order_id);
  public function get_pay_failed_time_by_order_id($order_id);
  public function query_pay_record_trade_no($pay_company_id, $begin_at, $end_at);
}

class ElemeUserServiceClient implements \EUS\ElemeUserServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    return $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \EUS\ElemeUserService_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function clear_cache($api_name, $params)
  {
    $this->send_clear_cache($api_name, $params);
    $this->recv_clear_cache();
  }

  public function send_clear_cache($api_name, $params)
  {
    $args = new \EUS\ElemeUserService_clear_cache_args();
    $args->api_name = $api_name;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clear_cache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clear_cache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clear_cache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_clear_cache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_clear_cache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function update_cache_for_replicator($name, $ids, $type_)
  {
    $this->send_update_cache_for_replicator($name, $ids, $type_);
    $this->recv_update_cache_for_replicator();
  }

  public function send_update_cache_for_replicator($name, $ids, $type_)
  {
    $args = new \EUS\ElemeUserService_update_cache_for_replicator_args();
    $args->name = $name;
    $args->ids = $ids;
    $args->type_ = $type_;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_cache_for_replicator', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_cache_for_replicator', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_cache_for_replicator()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_cache_for_replicator_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_cache_for_replicator_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function update_cache($tablename, $ids)
  {
    $this->send_update_cache($tablename, $ids);
    $this->recv_update_cache();
  }

  public function send_update_cache($tablename, $ids)
  {
    $args = new \EUS\ElemeUserService_update_cache_args();
    $args->tablename = $tablename;
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_cache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_cache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_cache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_cache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_cache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function auth($username, $passward)
  {
    $this->send_auth($username, $passward);
    return $this->recv_auth();
  }

  public function send_auth($username, $passward)
  {
    $args = new \EUS\ElemeUserService_auth_args();
    $args->username = $username;
    $args->passward = $passward;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'auth', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('auth', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_auth()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_auth_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_auth_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("auth failed: unknown result");
  }

  public function sns_auth($sns_uid, $sns_type)
  {
    $this->send_sns_auth($sns_uid, $sns_type);
    return $this->recv_sns_auth();
  }

  public function send_sns_auth($sns_uid, $sns_type)
  {
    $args = new \EUS\ElemeUserService_sns_auth_args();
    $args->sns_uid = $sns_uid;
    $args->sns_type = $sns_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sns_auth', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sns_auth', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sns_auth()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sns_auth_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sns_auth_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sns_auth failed: unknown result");
  }

  public function sns_auth_new($sns_uid, $sns_type)
  {
    $this->send_sns_auth_new($sns_uid, $sns_type);
    return $this->recv_sns_auth_new();
  }

  public function send_sns_auth_new($sns_uid, $sns_type)
  {
    $args = new \EUS\ElemeUserService_sns_auth_new_args();
    $args->sns_uid = $sns_uid;
    $args->sns_type = $sns_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sns_auth_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sns_auth_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sns_auth_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sns_auth_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sns_auth_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sns_auth_new failed: unknown result");
  }

  public function signup($username, $email, $passward)
  {
    $this->send_signup($username, $email, $passward);
    return $this->recv_signup();
  }

  public function send_signup($username, $email, $passward)
  {
    $args = new \EUS\ElemeUserService_signup_args();
    $args->username = $username;
    $args->email = $email;
    $args->passward = $passward;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_signup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_signup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("signup failed: unknown result");
  }

  public function extend_signup($username, $email, \EUS\TSignupExtendParam $extend_param, $password)
  {
    $this->send_extend_signup($username, $email, $extend_param, $password);
    return $this->recv_extend_signup();
  }

  public function send_extend_signup($username, $email, \EUS\TSignupExtendParam $extend_param, $password)
  {
    $args = new \EUS\ElemeUserService_extend_signup_args();
    $args->username = $username;
    $args->email = $email;
    $args->extend_param = $extend_param;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'extend_signup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('extend_signup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_extend_signup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_extend_signup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_extend_signup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("extend_signup failed: unknown result");
  }

  public function get_mobile_location($mobile)
  {
    $this->send_get_mobile_location($mobile);
    return $this->recv_get_mobile_location();
  }

  public function send_get_mobile_location($mobile)
  {
    $args = new \EUS\ElemeUserService_get_mobile_location_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_mobile_location', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_mobile_location', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_mobile_location()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_mobile_location_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_mobile_location_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_mobile_location failed: unknown result");
  }

  public function mobileclient_signup($mobile, $validation_code, \EUS\TSignupExtendParam $extend_param, $password)
  {
    $this->send_mobileclient_signup($mobile, $validation_code, $extend_param, $password);
    return $this->recv_mobileclient_signup();
  }

  public function send_mobileclient_signup($mobile, $validation_code, \EUS\TSignupExtendParam $extend_param, $password)
  {
    $args = new \EUS\ElemeUserService_mobileclient_signup_args();
    $args->mobile = $mobile;
    $args->validation_code = $validation_code;
    $args->extend_param = $extend_param;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_signup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_signup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_signup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_signup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_signup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobileclient_signup failed: unknown result");
  }

  public function hermes_mobileclient_signup($mobile, $validation_code, \EUS\TSignupExtendParam $extend_param, $password, $sender_key)
  {
    $this->send_hermes_mobileclient_signup($mobile, $validation_code, $extend_param, $password, $sender_key);
    return $this->recv_hermes_mobileclient_signup();
  }

  public function send_hermes_mobileclient_signup($mobile, $validation_code, \EUS\TSignupExtendParam $extend_param, $password, $sender_key)
  {
    $args = new \EUS\ElemeUserService_hermes_mobileclient_signup_args();
    $args->mobile = $mobile;
    $args->validation_code = $validation_code;
    $args->extend_param = $extend_param;
    $args->password = $password;
    $args->sender_key = $sender_key;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_mobileclient_signup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_mobileclient_signup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_mobileclient_signup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_hermes_mobileclient_signup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_hermes_mobileclient_signup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("hermes_mobileclient_signup failed: unknown result");
  }

  public function napos_mobileclient_signup($mobile)
  {
    $this->send_napos_mobileclient_signup($mobile);
    return $this->recv_napos_mobileclient_signup();
  }

  public function send_napos_mobileclient_signup($mobile)
  {
    $args = new \EUS\ElemeUserService_napos_mobileclient_signup_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_mobileclient_signup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_mobileclient_signup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_mobileclient_signup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_napos_mobileclient_signup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_napos_mobileclient_signup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("napos_mobileclient_signup failed: unknown result");
  }

  public function mobileclient_validation_code_login($mobile, $validation_code)
  {
    $this->send_mobileclient_validation_code_login($mobile, $validation_code);
    return $this->recv_mobileclient_validation_code_login();
  }

  public function send_mobileclient_validation_code_login($mobile, $validation_code)
  {
    $args = new \EUS\ElemeUserService_mobileclient_validation_code_login_args();
    $args->mobile = $mobile;
    $args->validation_code = $validation_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_validation_code_login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_validation_code_login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_validation_code_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_validation_code_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_validation_code_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobileclient_validation_code_login failed: unknown result");
  }

  public function hermes_mobileclient_validation_code_login($mobile, $validation_code, $sender_key)
  {
    $this->send_hermes_mobileclient_validation_code_login($mobile, $validation_code, $sender_key);
    return $this->recv_hermes_mobileclient_validation_code_login();
  }

  public function send_hermes_mobileclient_validation_code_login($mobile, $validation_code, $sender_key)
  {
    $args = new \EUS\ElemeUserService_hermes_mobileclient_validation_code_login_args();
    $args->mobile = $mobile;
    $args->validation_code = $validation_code;
    $args->sender_key = $sender_key;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_mobileclient_validation_code_login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_mobileclient_validation_code_login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_mobileclient_validation_code_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_hermes_mobileclient_validation_code_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_hermes_mobileclient_validation_code_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("hermes_mobileclient_validation_code_login failed: unknown result");
  }

  public function mobileclient_mobile_login($mobile, $password)
  {
    $this->send_mobileclient_mobile_login($mobile, $password);
    return $this->recv_mobileclient_mobile_login();
  }

  public function send_mobileclient_mobile_login($mobile, $password)
  {
    $args = new \EUS\ElemeUserService_mobileclient_mobile_login_args();
    $args->mobile = $mobile;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_mobile_login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_mobile_login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_mobile_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_mobile_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_mobile_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobileclient_mobile_login failed: unknown result");
  }

  public function mobileclient_set_username($user_id, $username)
  {
    $this->send_mobileclient_set_username($user_id, $username);
    $this->recv_mobileclient_set_username();
  }

  public function send_mobileclient_set_username($user_id, $username)
  {
    $args = new \EUS\ElemeUserService_mobileclient_set_username_args();
    $args->user_id = $user_id;
    $args->username = $username;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_set_username', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_set_username', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_set_username()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_set_username_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_set_username_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function mobileclient_set_password($user_id, $password)
  {
    $this->send_mobileclient_set_password($user_id, $password);
    $this->recv_mobileclient_set_password();
  }

  public function send_mobileclient_set_password($user_id, $password)
  {
    $args = new \EUS\ElemeUserService_mobileclient_set_password_args();
    $args->user_id = $user_id;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_set_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_set_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_set_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_set_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_set_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function mobileclient_reset_password($mobile, $validation_code, $new_password)
  {
    $this->send_mobileclient_reset_password($mobile, $validation_code, $new_password);
    return $this->recv_mobileclient_reset_password();
  }

  public function send_mobileclient_reset_password($mobile, $validation_code, $new_password)
  {
    $args = new \EUS\ElemeUserService_mobileclient_reset_password_args();
    $args->mobile = $mobile;
    $args->validation_code = $validation_code;
    $args->new_password = $new_password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_reset_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_reset_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_reset_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_reset_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_reset_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobileclient_reset_password failed: unknown result");
  }

  public function hermes_mobileclient_reset_password($mobile, $validation_code, $new_password, $sender_key)
  {
    $this->send_hermes_mobileclient_reset_password($mobile, $validation_code, $new_password, $sender_key);
    return $this->recv_hermes_mobileclient_reset_password();
  }

  public function send_hermes_mobileclient_reset_password($mobile, $validation_code, $new_password, $sender_key)
  {
    $args = new \EUS\ElemeUserService_hermes_mobileclient_reset_password_args();
    $args->mobile = $mobile;
    $args->validation_code = $validation_code;
    $args->new_password = $new_password;
    $args->sender_key = $sender_key;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_mobileclient_reset_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_mobileclient_reset_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_mobileclient_reset_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_hermes_mobileclient_reset_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_hermes_mobileclient_reset_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("hermes_mobileclient_reset_password failed: unknown result");
  }

  public function mobileclient_update_password($user_id, $validation_code, $new_password)
  {
    $this->send_mobileclient_update_password($user_id, $validation_code, $new_password);
    $this->recv_mobileclient_update_password();
  }

  public function send_mobileclient_update_password($user_id, $validation_code, $new_password)
  {
    $args = new \EUS\ElemeUserService_mobileclient_update_password_args();
    $args->user_id = $user_id;
    $args->validation_code = $validation_code;
    $args->new_password = $new_password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_update_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_update_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_update_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_update_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_update_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function mobileclient_sns_login($sns_type, $sns_uid, $sns_username)
  {
    $this->send_mobileclient_sns_login($sns_type, $sns_uid, $sns_username);
    return $this->recv_mobileclient_sns_login();
  }

  public function send_mobileclient_sns_login($sns_type, $sns_uid, $sns_username)
  {
    $args = new \EUS\ElemeUserService_mobileclient_sns_login_args();
    $args->sns_type = $sns_type;
    $args->sns_uid = $sns_uid;
    $args->sns_username = $sns_username;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_sns_login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_sns_login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_sns_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_sns_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_sns_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobileclient_sns_login failed: unknown result");
  }

  public function mobileclient_sns_login_new($sns_type, $sns_uid, $sns_username, $device_type)
  {
    $this->send_mobileclient_sns_login_new($sns_type, $sns_uid, $sns_username, $device_type);
    return $this->recv_mobileclient_sns_login_new();
  }

  public function send_mobileclient_sns_login_new($sns_type, $sns_uid, $sns_username, $device_type)
  {
    $args = new \EUS\ElemeUserService_mobileclient_sns_login_new_args();
    $args->sns_type = $sns_type;
    $args->sns_uid = $sns_uid;
    $args->sns_username = $sns_username;
    $args->device_type = $device_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobileclient_sns_login_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobileclient_sns_login_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobileclient_sns_login_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobileclient_sns_login_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobileclient_sns_login_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobileclient_sns_login_new failed: unknown result");
  }

  public function get_auto_generated_user($user_id)
  {
    $this->send_get_auto_generated_user($user_id);
    return $this->recv_get_auto_generated_user();
  }

  public function send_get_auto_generated_user($user_id)
  {
    $args = new \EUS\ElemeUserService_get_auto_generated_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_auto_generated_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_auto_generated_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_auto_generated_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_auto_generated_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_auto_generated_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_auto_generated_user failed: unknown result");
  }

  public function get_pending_refer()
  {
    $this->send_get_pending_refer();
    return $this->recv_get_pending_refer();
  }

  public function send_get_pending_refer()
  {
    $args = new \EUS\ElemeUserService_get_pending_refer_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pending_refer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pending_refer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pending_refer()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_pending_refer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_pending_refer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_pending_refer failed: unknown result");
  }

  public function get_suspicious_refer()
  {
    $this->send_get_suspicious_refer();
    return $this->recv_get_suspicious_refer();
  }

  public function send_get_suspicious_refer()
  {
    $args = new \EUS\ElemeUserService_get_suspicious_refer_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_suspicious_refer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_suspicious_refer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_suspicious_refer()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_suspicious_refer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_suspicious_refer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_suspicious_refer failed: unknown result");
  }

  public function get_user_referal_code($user_id)
  {
    $this->send_get_user_referal_code($user_id);
    return $this->recv_get_user_referal_code();
  }

  public function send_get_user_referal_code($user_id)
  {
    $args = new \EUS\ElemeUserService_get_user_referal_code_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_referal_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_referal_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_referal_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_referal_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_referal_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_referal_code failed: unknown result");
  }

  public function is_user_refered($user_id, $mode)
  {
    $this->send_is_user_refered($user_id, $mode);
    return $this->recv_is_user_refered();
  }

  public function send_is_user_refered($user_id, $mode)
  {
    $args = new \EUS\ElemeUserService_is_user_refered_args();
    $args->user_id = $user_id;
    $args->mode = $mode;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'is_user_refered', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('is_user_refered', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_is_user_refered()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_is_user_refered_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_is_user_refered_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("is_user_refered failed: unknown result");
  }

  public function temp_super_user_bind($username, $mobile, $restaurant_id, $bank_id, $card_id, $cardholder_name, $process_user_id)
  {
    $this->send_temp_super_user_bind($username, $mobile, $restaurant_id, $bank_id, $card_id, $cardholder_name, $process_user_id);
    $this->recv_temp_super_user_bind();
  }

  public function send_temp_super_user_bind($username, $mobile, $restaurant_id, $bank_id, $card_id, $cardholder_name, $process_user_id)
  {
    $args = new \EUS\ElemeUserService_temp_super_user_bind_args();
    $args->username = $username;
    $args->mobile = $mobile;
    $args->restaurant_id = $restaurant_id;
    $args->bank_id = $bank_id;
    $args->card_id = $card_id;
    $args->cardholder_name = $cardholder_name;
    $args->process_user_id = $process_user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'temp_super_user_bind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('temp_super_user_bind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_temp_super_user_bind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_temp_super_user_bind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_temp_super_user_bind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function third_signup($user_id, $session_id, $user_type)
  {
    $this->send_third_signup($user_id, $session_id, $user_type);
    $this->recv_third_signup();
  }

  public function send_third_signup($user_id, $session_id, $user_type)
  {
    $args = new \EUS\ElemeUserService_third_signup_args();
    $args->user_id = $user_id;
    $args->session_id = $session_id;
    $args->user_type = $user_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'third_signup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('third_signup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_third_signup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_third_signup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_third_signup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function is_username_available($username)
  {
    $this->send_is_username_available($username);
    return $this->recv_is_username_available();
  }

  public function send_is_username_available($username)
  {
    $args = new \EUS\ElemeUserService_is_username_available_args();
    $args->username = $username;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'is_username_available', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('is_username_available', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_is_username_available()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_is_username_available_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_is_username_available_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("is_username_available failed: unknown result");
  }

  public function save_dop_user($nid, \EUS\TDopUser $save_struct)
  {
    $this->send_save_dop_user($nid, $save_struct);
    $this->recv_save_dop_user();
  }

  public function send_save_dop_user($nid, \EUS\TDopUser $save_struct)
  {
    $args = new \EUS\ElemeUserService_save_dop_user_args();
    $args->nid = $nid;
    $args->save_struct = $save_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_dop_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_dop_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_dop_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_save_dop_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_save_dop_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function reset_password($user_id, $new_password)
  {
    $this->send_reset_password($user_id, $new_password);
    $this->recv_reset_password();
  }

  public function send_reset_password($user_id, $new_password)
  {
    $args = new \EUS\ElemeUserService_reset_password_args();
    $args->user_id = $user_id;
    $args->new_password = $new_password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reset_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reset_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_reset_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_reset_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_reset_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function force_reset_password($user_id, $admin_user_id, $new_password)
  {
    $this->send_force_reset_password($user_id, $admin_user_id, $new_password);
    $this->recv_force_reset_password();
  }

  public function send_force_reset_password($user_id, $admin_user_id, $new_password)
  {
    $args = new \EUS\ElemeUserService_force_reset_password_args();
    $args->user_id = $user_id;
    $args->admin_user_id = $admin_user_id;
    $args->new_password = $new_password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'force_reset_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('force_reset_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_force_reset_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_force_reset_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_force_reset_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_password($user_id, $old_password, $new_password, $current_session)
  {
    $this->send_update_password($user_id, $old_password, $new_password, $current_session);
    $this->recv_update_password();
  }

  public function send_update_password($user_id, $old_password, $new_password, $current_session)
  {
    $args = new \EUS\ElemeUserService_update_password_args();
    $args->user_id = $user_id;
    $args->old_password = $old_password;
    $args->new_password = $new_password;
    $args->current_session = $current_session;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function clean_session($user_id, $current_session)
  {
    $this->send_clean_session($user_id, $current_session);
    $this->recv_clean_session();
  }

  public function send_clean_session($user_id, $current_session)
  {
    $args = new \EUS\ElemeUserService_clean_session_args();
    $args->user_id = $user_id;
    $args->current_session = $current_session;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clean_session', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clean_session', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clean_session()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_clean_session_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_clean_session_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function post_login(\EUS\TLoginStruct $login_struct)
  {
    $this->send_post_login($login_struct);
    $this->recv_post_login();
  }

  public function send_post_login(\EUS\TLoginStruct $login_struct)
  {
    $args = new \EUS\ElemeUserService_post_login_args();
    $args->login_struct = $login_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'post_login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('post_login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_post_login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_post_login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_post_login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function set_avatar($user_id, $avatar)
  {
    $this->send_set_avatar($user_id, $avatar);
    $this->recv_set_avatar();
  }

  public function send_set_avatar($user_id, $avatar)
  {
    $args = new \EUS\ElemeUserService_set_avatar_args();
    $args->user_id = $user_id;
    $args->avatar = $avatar;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_avatar', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_avatar', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_avatar()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_avatar_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_avatar_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bind_sns($user_id, $sns_uid, $sns_type)
  {
    $this->send_bind_sns($user_id, $sns_uid, $sns_type);
    $this->recv_bind_sns();
  }

  public function send_bind_sns($user_id, $sns_uid, $sns_type)
  {
    $args = new \EUS\ElemeUserService_bind_sns_args();
    $args->user_id = $user_id;
    $args->sns_uid = $sns_uid;
    $args->sns_type = $sns_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bind_sns', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bind_sns', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bind_sns()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bind_sns_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bind_sns_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bind_sns_new($user_id, $sns_uid, $sns_type)
  {
    $this->send_bind_sns_new($user_id, $sns_uid, $sns_type);
    $this->recv_bind_sns_new();
  }

  public function send_bind_sns_new($user_id, $sns_uid, $sns_type)
  {
    $args = new \EUS\ElemeUserService_bind_sns_new_args();
    $args->user_id = $user_id;
    $args->sns_uid = $sns_uid;
    $args->sns_type = $sns_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bind_sns_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bind_sns_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bind_sns_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bind_sns_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bind_sns_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function renren_purify($user_id, $username, $email, $password)
  {
    $this->send_renren_purify($user_id, $username, $email, $password);
    $this->recv_renren_purify();
  }

  public function send_renren_purify($user_id, $username, $email, $password)
  {
    $args = new \EUS\ElemeUserService_renren_purify_args();
    $args->user_id = $user_id;
    $args->username = $username;
    $args->email = $email;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'renren_purify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('renren_purify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_renren_purify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_renren_purify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_renren_purify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function unbind_sns($user_id, $sns_type)
  {
    $this->send_unbind_sns($user_id, $sns_type);
    $this->recv_unbind_sns();
  }

  public function send_unbind_sns($user_id, $sns_type)
  {
    $args = new \EUS\ElemeUserService_unbind_sns_args();
    $args->user_id = $user_id;
    $args->sns_type = $sns_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unbind_sns', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unbind_sns', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unbind_sns()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_unbind_sns_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_unbind_sns_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bind_device($user_id, $device_id, $device_type, $version, $come_from, $eleme_device_id, $version_name)
  {
    $this->send_bind_device($user_id, $device_id, $device_type, $version, $come_from, $eleme_device_id, $version_name);
    $this->recv_bind_device();
  }

  public function send_bind_device($user_id, $device_id, $device_type, $version, $come_from, $eleme_device_id, $version_name)
  {
    $args = new \EUS\ElemeUserService_bind_device_args();
    $args->user_id = $user_id;
    $args->device_id = $device_id;
    $args->device_type = $device_type;
    $args->version = $version;
    $args->come_from = $come_from;
    $args->eleme_device_id = $eleme_device_id;
    $args->version_name = $version_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bind_device', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bind_device', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bind_device()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bind_device_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bind_device_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function unbind_device($user_id, $device_id, $device_type)
  {
    $this->send_unbind_device($user_id, $device_id, $device_type);
    $this->recv_unbind_device();
  }

  public function send_unbind_device($user_id, $device_id, $device_type)
  {
    $args = new \EUS\ElemeUserService_unbind_device_args();
    $args->user_id = $user_id;
    $args->device_id = $device_id;
    $args->device_type = $device_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unbind_device', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unbind_device', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unbind_device()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_unbind_device_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_unbind_device_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_email($user_id, $email)
  {
    $this->send_update_email($user_id, $email);
    $this->recv_update_email();
  }

  public function send_update_email($user_id, $email)
  {
    $args = new \EUS\ElemeUserService_update_email_args();
    $args->user_id = $user_id;
    $args->email = $email;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_email', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_email', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_email()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_email_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_email_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_user_email($user_id, $admin_user_id, $email)
  {
    $this->send_update_user_email($user_id, $admin_user_id, $email);
    $this->recv_update_user_email();
  }

  public function send_update_user_email($user_id, $admin_user_id, $email)
  {
    $args = new \EUS\ElemeUserService_update_user_email_args();
    $args->user_id = $user_id;
    $args->admin_user_id = $admin_user_id;
    $args->email = $email;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_user_email', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_user_email', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_user_email()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_user_email_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_user_email_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_tester_user_profile($tester_user_id, $balance, $point, $mobile, $payment_quota, $is_mobile_valid)
  {
    $this->send_update_tester_user_profile($tester_user_id, $balance, $point, $mobile, $payment_quota, $is_mobile_valid);
    $this->recv_update_tester_user_profile();
  }

  public function send_update_tester_user_profile($tester_user_id, $balance, $point, $mobile, $payment_quota, $is_mobile_valid)
  {
    $args = new \EUS\ElemeUserService_update_tester_user_profile_args();
    $args->tester_user_id = $tester_user_id;
    $args->balance = $balance;
    $args->point = $point;
    $args->mobile = $mobile;
    $args->payment_quota = $payment_quota;
    $args->is_mobile_valid = $is_mobile_valid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_tester_user_profile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_tester_user_profile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_tester_user_profile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_tester_user_profile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_tester_user_profile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_username($user_id, $op_user_id, $username)
  {
    $this->send_update_username($user_id, $op_user_id, $username);
    return $this->recv_update_username();
  }

  public function send_update_username($user_id, $op_user_id, $username)
  {
    $args = new \EUS\ElemeUserService_update_username_args();
    $args->user_id = $user_id;
    $args->op_user_id = $op_user_id;
    $args->username = $username;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_username', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_username', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_username()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_username_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_username_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("update_username failed: unknown result");
  }

  public function update_mobile($user_id, $mobile)
  {
    $this->send_update_mobile($user_id, $mobile);
    $this->recv_update_mobile();
  }

  public function send_update_mobile($user_id, $mobile)
  {
    $args = new \EUS\ElemeUserService_update_mobile_args();
    $args->user_id = $user_id;
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bind_mobile($user_id, $mobile)
  {
    $this->send_bind_mobile($user_id, $mobile);
    $this->recv_bind_mobile();
  }

  public function send_bind_mobile($user_id, $mobile)
  {
    $args = new \EUS\ElemeUserService_bind_mobile_args();
    $args->user_id = $user_id;
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bind_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bind_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bind_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bind_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bind_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_address($user_id, $entry_id, $geohash, $phone, $address, $phone_bk)
  {
    $this->send_add_address($user_id, $entry_id, $geohash, $phone, $address, $phone_bk);
    return $this->recv_add_address();
  }

  public function send_add_address($user_id, $entry_id, $geohash, $phone, $address, $phone_bk)
  {
    $args = new \EUS\ElemeUserService_add_address_args();
    $args->user_id = $user_id;
    $args->entry_id = $entry_id;
    $args->geohash = $geohash;
    $args->phone = $phone;
    $args->address = $address;
    $args->phone_bk = $phone_bk;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_address', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_address', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_address()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_add_address_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_add_address_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("add_address failed: unknown result");
  }

  public function add_address_new($user_id, $address, $phone, $phone_bk, $name, $geohash)
  {
    $this->send_add_address_new($user_id, $address, $phone, $phone_bk, $name, $geohash);
    return $this->recv_add_address_new();
  }

  public function send_add_address_new($user_id, $address, $phone, $phone_bk, $name, $geohash)
  {
    $args = new \EUS\ElemeUserService_add_address_new_args();
    $args->user_id = $user_id;
    $args->address = $address;
    $args->phone = $phone;
    $args->phone_bk = $phone_bk;
    $args->name = $name;
    $args->geohash = $geohash;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_address_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_address_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_address_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_add_address_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_add_address_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("add_address_new failed: unknown result");
  }

  public function update_address_new($user_id, $address_id, $address, $phone, $phone_bk, $name)
  {
    $this->send_update_address_new($user_id, $address_id, $address, $phone, $phone_bk, $name);
    $this->recv_update_address_new();
  }

  public function send_update_address_new($user_id, $address_id, $address, $phone, $phone_bk, $name)
  {
    $args = new \EUS\ElemeUserService_update_address_new_args();
    $args->user_id = $user_id;
    $args->address_id = $address_id;
    $args->address = $address;
    $args->phone = $phone;
    $args->phone_bk = $phone_bk;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_address_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_address_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_address_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_address_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_address_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_address($user_id, $address_id, $phone, $address, $phone_bk)
  {
    $this->send_update_address($user_id, $address_id, $phone, $address, $phone_bk);
    $this->recv_update_address();
  }

  public function send_update_address($user_id, $address_id, $phone, $address, $phone_bk)
  {
    $args = new \EUS\ElemeUserService_update_address_args();
    $args->user_id = $user_id;
    $args->address_id = $address_id;
    $args->phone = $phone;
    $args->address = $address;
    $args->phone_bk = $phone_bk;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_address', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_address', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_address()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_address_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_address_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function delete_address($user_id, $address_id)
  {
    $this->send_delete_address($user_id, $address_id);
    $this->recv_delete_address();
  }

  public function send_delete_address($user_id, $address_id)
  {
    $args = new \EUS\ElemeUserService_delete_address_args();
    $args->user_id = $user_id;
    $args->address_id = $address_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_address', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_address', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_address()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_delete_address_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_delete_address_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function set_default_address($user_id, $address_id)
  {
    $this->send_set_default_address($user_id, $address_id);
    $this->recv_set_default_address();
  }

  public function send_set_default_address($user_id, $address_id)
  {
    $args = new \EUS\ElemeUserService_set_default_address_args();
    $args->user_id = $user_id;
    $args->address_id = $address_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_default_address', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_default_address', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_default_address()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_default_address_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_default_address_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function set_groups($user_id, $group_ids)
  {
    $this->send_set_groups($user_id, $group_ids);
    $this->recv_set_groups();
  }

  public function send_set_groups($user_id, $group_ids)
  {
    $args = new \EUS\ElemeUserService_set_groups_args();
    $args->user_id = $user_id;
    $args->group_ids = $group_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_groups', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_groups', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_groups()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_groups_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_groups_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_invoice($user_id, $invoice_pay_to)
  {
    $this->send_add_invoice($user_id, $invoice_pay_to);
    return $this->recv_add_invoice();
  }

  public function send_add_invoice($user_id, $invoice_pay_to)
  {
    $args = new \EUS\ElemeUserService_add_invoice_args();
    $args->user_id = $user_id;
    $args->invoice_pay_to = $invoice_pay_to;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_invoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_invoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_invoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_add_invoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_add_invoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("add_invoice failed: unknown result");
  }

  public function update_invoice($user_id, $invoice_id, $invoice_pay_to)
  {
    $this->send_update_invoice($user_id, $invoice_id, $invoice_pay_to);
    $this->recv_update_invoice();
  }

  public function send_update_invoice($user_id, $invoice_id, $invoice_pay_to)
  {
    $args = new \EUS\ElemeUserService_update_invoice_args();
    $args->user_id = $user_id;
    $args->invoice_id = $invoice_id;
    $args->invoice_pay_to = $invoice_pay_to;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_invoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_invoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_invoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_invoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_invoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function delete_invoice($user_id, $invoice_id)
  {
    $this->send_delete_invoice($user_id, $invoice_id);
    $this->recv_delete_invoice();
  }

  public function send_delete_invoice($user_id, $invoice_id)
  {
    $args = new \EUS\ElemeUserService_delete_invoice_args();
    $args->user_id = $user_id;
    $args->invoice_id = $invoice_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_invoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_invoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_invoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_delete_invoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_delete_invoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function set_default_invoice($user_id, $invoice_id)
  {
    $this->send_set_default_invoice($user_id, $invoice_id);
    $this->recv_set_default_invoice();
  }

  public function send_set_default_invoice($user_id, $invoice_id)
  {
    $args = new \EUS\ElemeUserService_set_default_invoice_args();
    $args->user_id = $user_id;
    $args->invoice_id = $invoice_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_default_invoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_default_invoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_default_invoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_default_invoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_default_invoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function count_unprocessed_user_gift()
  {
    $this->send_count_unprocessed_user_gift();
    return $this->recv_count_unprocessed_user_gift();
  }

  public function send_count_unprocessed_user_gift()
  {
    $args = new \EUS\ElemeUserService_count_unprocessed_user_gift_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_unprocessed_user_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_unprocessed_user_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_unprocessed_user_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_unprocessed_user_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_unprocessed_user_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_unprocessed_user_gift failed: unknown result");
  }

  public function mset_user_gift_status($user_gift_ids, $processed)
  {
    $this->send_mset_user_gift_status($user_gift_ids, $processed);
    $this->recv_mset_user_gift_status();
  }

  public function send_mset_user_gift_status($user_gift_ids, $processed)
  {
    $args = new \EUS\ElemeUserService_mset_user_gift_status_args();
    $args->user_gift_ids = $user_gift_ids;
    $args->processed = $processed;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mset_user_gift_status', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mset_user_gift_status', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mset_user_gift_status()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mset_user_gift_status_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mset_user_gift_status_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function mset_user_gift_valid($user_gift_ids, $is_valid)
  {
    $this->send_mset_user_gift_valid($user_gift_ids, $is_valid);
    $this->recv_mset_user_gift_valid();
  }

  public function send_mset_user_gift_valid($user_gift_ids, $is_valid)
  {
    $args = new \EUS\ElemeUserService_mset_user_gift_valid_args();
    $args->user_gift_ids = $user_gift_ids;
    $args->is_valid = $is_valid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mset_user_gift_valid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mset_user_gift_valid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mset_user_gift_valid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mset_user_gift_valid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mset_user_gift_valid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function mset_feedback_reply_valid($reply_ids, $valid)
  {
    $this->send_mset_feedback_reply_valid($reply_ids, $valid);
    $this->recv_mset_feedback_reply_valid();
  }

  public function send_mset_feedback_reply_valid($reply_ids, $valid)
  {
    $args = new \EUS\ElemeUserService_mset_feedback_reply_valid_args();
    $args->reply_ids = $reply_ids;
    $args->valid = $valid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mset_feedback_reply_valid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mset_feedback_reply_valid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mset_feedback_reply_valid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mset_feedback_reply_valid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mset_feedback_reply_valid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function delete_bankcard($bankcard_id)
  {
    $this->send_delete_bankcard($bankcard_id);
    $this->recv_delete_bankcard();
  }

  public function send_delete_bankcard($bankcard_id)
  {
    $args = new \EUS\ElemeUserService_delete_bankcard_args();
    $args->bankcard_id = $bankcard_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_bankcard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_bankcard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_bankcard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_delete_bankcard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_delete_bankcard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_user_gift(\EUS\TUserGift $update_struct)
  {
    $this->send_update_user_gift($update_struct);
    $this->recv_update_user_gift();
  }

  public function send_update_user_gift(\EUS\TUserGift $update_struct)
  {
    $args = new \EUS\ElemeUserService_update_user_gift_args();
    $args->update_struct = $update_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_user_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_user_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_user_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_user_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_user_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function save_gift($gift_id, \EUS\TGift $save_struct)
  {
    $this->send_save_gift($gift_id, $save_struct);
    return $this->recv_save_gift();
  }

  public function send_save_gift($gift_id, \EUS\TGift $save_struct)
  {
    $args = new \EUS\ElemeUserService_save_gift_args();
    $args->gift_id = $gift_id;
    $args->save_struct = $save_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_save_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_save_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("save_gift failed: unknown result");
  }

  public function exchange_gift($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note)
  {
    $this->send_exchange_gift($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note);
    $this->recv_exchange_gift();
  }

  public function send_exchange_gift($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note)
  {
    $args = new \EUS\ElemeUserService_exchange_gift_args();
    $args->user_id = $user_id;
    $args->gift_id = $gift_id;
    $args->delivery_name = $delivery_name;
    $args->delivery_address = $delivery_address;
    $args->delivery_phone = $delivery_phone;
    $args->delivery_note = $delivery_note;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'exchange_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('exchange_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_exchange_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_exchange_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_exchange_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function analyse_user_gift($user_gift_id)
  {
    $this->send_analyse_user_gift($user_gift_id);
    $this->recv_analyse_user_gift();
  }

  public function send_analyse_user_gift($user_gift_id)
  {
    $args = new \EUS\ElemeUserService_analyse_user_gift_args();
    $args->user_gift_id = $user_gift_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'analyse_user_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('analyse_user_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_analyse_user_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_analyse_user_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_analyse_user_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function exchange_gift_wkf($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note)
  {
    $this->send_exchange_gift_wkf($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note);
    $this->recv_exchange_gift_wkf();
  }

  public function send_exchange_gift_wkf($user_id, $gift_id, $delivery_name, $delivery_address, $delivery_phone, $delivery_note)
  {
    $args = new \EUS\ElemeUserService_exchange_gift_wkf_args();
    $args->user_id = $user_id;
    $args->gift_id = $gift_id;
    $args->delivery_name = $delivery_name;
    $args->delivery_address = $delivery_address;
    $args->delivery_phone = $delivery_phone;
    $args->delivery_note = $delivery_note;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'exchange_gift_wkf', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('exchange_gift_wkf', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_exchange_gift_wkf()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_exchange_gift_wkf_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_exchange_gift_wkf_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function analyse_user_gift_wkf($user_gift_id)
  {
    $this->send_analyse_user_gift_wkf($user_gift_id);
    $this->recv_analyse_user_gift_wkf();
  }

  public function send_analyse_user_gift_wkf($user_gift_id)
  {
    $args = new \EUS\ElemeUserService_analyse_user_gift_wkf_args();
    $args->user_gift_id = $user_gift_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'analyse_user_gift_wkf', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('analyse_user_gift_wkf', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_analyse_user_gift_wkf()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_analyse_user_gift_wkf_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_analyse_user_gift_wkf_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function human_check_pass_wkf($user_gift_id)
  {
    $this->send_human_check_pass_wkf($user_gift_id);
    $this->recv_human_check_pass_wkf();
  }

  public function send_human_check_pass_wkf($user_gift_id)
  {
    $args = new \EUS\ElemeUserService_human_check_pass_wkf_args();
    $args->user_gift_id = $user_gift_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'human_check_pass_wkf', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('human_check_pass_wkf', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_human_check_pass_wkf()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_human_check_pass_wkf_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_human_check_pass_wkf_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function human_check_fail_wkf($user_gift_id)
  {
    $this->send_human_check_fail_wkf($user_gift_id);
    $this->recv_human_check_fail_wkf();
  }

  public function send_human_check_fail_wkf($user_gift_id)
  {
    $args = new \EUS\ElemeUserService_human_check_fail_wkf_args();
    $args->user_gift_id = $user_gift_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'human_check_fail_wkf', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('human_check_fail_wkf', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_human_check_fail_wkf()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_human_check_fail_wkf_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_human_check_fail_wkf_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function gift_received_wkf($user_gift_id)
  {
    $this->send_gift_received_wkf($user_gift_id);
    $this->recv_gift_received_wkf();
  }

  public function send_gift_received_wkf($user_gift_id)
  {
    $args = new \EUS\ElemeUserService_gift_received_wkf_args();
    $args->user_gift_id = $user_gift_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'gift_received_wkf', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('gift_received_wkf', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_gift_received_wkf()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_gift_received_wkf_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_gift_received_wkf_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function change_point($user_id, $point_change, $reason, $relevant_id, $change_type)
  {
    $this->send_change_point($user_id, $point_change, $reason, $relevant_id, $change_type);
    return $this->recv_change_point();
  }

  public function send_change_point($user_id, $point_change, $reason, $relevant_id, $change_type)
  {
    $args = new \EUS\ElemeUserService_change_point_args();
    $args->user_id = $user_id;
    $args->point_change = $point_change;
    $args->reason = $reason;
    $args->relevant_id = $relevant_id;
    $args->change_type = $change_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'change_point', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('change_point', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_change_point()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_change_point_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_change_point_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("change_point failed: unknown result");
  }

  public function set_rate_message_read($target_id)
  {
    $this->send_set_rate_message_read($target_id);
    $this->recv_set_rate_message_read();
  }

  public function send_set_rate_message_read($target_id)
  {
    $args = new \EUS\ElemeUserService_set_rate_message_read_args();
    $args->target_id = $target_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_rate_message_read', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_rate_message_read', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_rate_message_read()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_rate_message_read_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_rate_message_read_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function check_restaurant_admin($user_id, $restaurant_id)
  {
    $this->send_check_restaurant_admin($user_id, $restaurant_id);
    return $this->recv_check_restaurant_admin();
  }

  public function send_check_restaurant_admin($user_id, $restaurant_id)
  {
    $args = new \EUS\ElemeUserService_check_restaurant_admin_args();
    $args->user_id = $user_id;
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_restaurant_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_restaurant_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_restaurant_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_check_restaurant_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_check_restaurant_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("check_restaurant_admin failed: unknown result");
  }

  public function check_service_admin($user_id)
  {
    $this->send_check_service_admin($user_id);
    return $this->recv_check_service_admin();
  }

  public function send_check_service_admin($user_id)
  {
    $args = new \EUS\ElemeUserService_check_service_admin_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_service_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_service_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_service_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_check_service_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_check_service_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("check_service_admin failed: unknown result");
  }

  public function count_unread_message($user_id)
  {
    $this->send_count_unread_message($user_id);
    return $this->recv_count_unread_message();
  }

  public function send_count_unread_message($user_id)
  {
    $args = new \EUS\ElemeUserService_count_unread_message_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_unread_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_unread_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_unread_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_unread_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_unread_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_unread_message failed: unknown result");
  }

  public function mark_message_as_read($user_id, $message_id)
  {
    $this->send_mark_message_as_read($user_id, $message_id);
    $this->recv_mark_message_as_read();
  }

  public function send_mark_message_as_read($user_id, $message_id)
  {
    $args = new \EUS\ElemeUserService_mark_message_as_read_args();
    $args->user_id = $user_id;
    $args->message_id = $message_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mark_message_as_read', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mark_message_as_read', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mark_message_as_read()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mark_message_as_read_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mark_message_as_read_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function mark_all_message_as_read($user_id)
  {
    $this->send_mark_all_message_as_read($user_id);
    $this->recv_mark_all_message_as_read();
  }

  public function send_mark_all_message_as_read($user_id)
  {
    $args = new \EUS\ElemeUserService_mark_all_message_as_read_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mark_all_message_as_read', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mark_all_message_as_read', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mark_all_message_as_read()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mark_all_message_as_read_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mark_all_message_as_read_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_user_permission($user_id)
  {
    $this->send_get_user_permission($user_id);
    return $this->recv_get_user_permission();
  }

  public function send_get_user_permission($user_id)
  {
    $args = new \EUS\ElemeUserService_get_user_permission_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_permission failed: unknown result");
  }

  public function set_pay_record_method($user_id, $pay_record_id, $method_json)
  {
    $this->send_set_pay_record_method($user_id, $pay_record_id, $method_json);
    $this->recv_set_pay_record_method();
  }

  public function send_set_pay_record_method($user_id, $pay_record_id, $method_json)
  {
    $args = new \EUS\ElemeUserService_set_pay_record_method_args();
    $args->user_id = $user_id;
    $args->pay_record_id = $pay_record_id;
    $args->method_json = $method_json;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_pay_record_method', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_pay_record_method', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_pay_record_method()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_pay_record_method_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_pay_record_method_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_feedback($user_id, $content, $comment_type, $entry_id, $zone_id, $district_id, $city_id, $geohash, $user_agent)
  {
    $this->send_add_feedback($user_id, $content, $comment_type, $entry_id, $zone_id, $district_id, $city_id, $geohash, $user_agent);
    return $this->recv_add_feedback();
  }

  public function send_add_feedback($user_id, $content, $comment_type, $entry_id, $zone_id, $district_id, $city_id, $geohash, $user_agent)
  {
    $args = new \EUS\ElemeUserService_add_feedback_args();
    $args->user_id = $user_id;
    $args->content = $content;
    $args->comment_type = $comment_type;
    $args->entry_id = $entry_id;
    $args->zone_id = $zone_id;
    $args->district_id = $district_id;
    $args->city_id = $city_id;
    $args->geohash = $geohash;
    $args->user_agent = $user_agent;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_feedback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_feedback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_feedback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_add_feedback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_add_feedback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("add_feedback failed: unknown result");
  }

  public function mget_feedback($feedback_ids)
  {
    $this->send_mget_feedback($feedback_ids);
    return $this->recv_mget_feedback();
  }

  public function send_mget_feedback($feedback_ids)
  {
    $args = new \EUS\ElemeUserService_mget_feedback_args();
    $args->feedback_ids = $feedback_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_feedback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_feedback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_feedback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_feedback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_feedback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_feedback failed: unknown result");
  }

  public function count_feedback(\EUS\TFeedbackQuery $query_struct)
  {
    $this->send_count_feedback($query_struct);
    return $this->recv_count_feedback();
  }

  public function send_count_feedback(\EUS\TFeedbackQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_count_feedback_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_feedback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_feedback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_feedback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_feedback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_feedback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_feedback failed: unknown result");
  }

  public function query_feedback(\EUS\TFeedbackQuery $query_struct)
  {
    $this->send_query_feedback($query_struct);
    return $this->recv_query_feedback();
  }

  public function send_query_feedback(\EUS\TFeedbackQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_feedback_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_feedback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_feedback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_feedback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_feedback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_feedback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_feedback failed: unknown result");
  }

  public function query_feedback_with_replies(\EUS\TFeedbackQuery $query_struct)
  {
    $this->send_query_feedback_with_replies($query_struct);
    return $this->recv_query_feedback_with_replies();
  }

  public function send_query_feedback_with_replies(\EUS\TFeedbackQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_feedback_with_replies_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_feedback_with_replies', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_feedback_with_replies', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_feedback_with_replies()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_feedback_with_replies_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_feedback_with_replies_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_feedback_with_replies failed: unknown result");
  }

  public function count_feedback_reply(\EUS\TFeedbackReplyQuery $query_struct)
  {
    $this->send_count_feedback_reply($query_struct);
    return $this->recv_count_feedback_reply();
  }

  public function send_count_feedback_reply(\EUS\TFeedbackReplyQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_count_feedback_reply_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_feedback_reply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_feedback_reply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_feedback_reply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_feedback_reply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_feedback_reply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_feedback_reply failed: unknown result");
  }

  public function query_feedback_reply(\EUS\TFeedbackReplyQuery $query_struct)
  {
    $this->send_query_feedback_reply($query_struct);
    return $this->recv_query_feedback_reply();
  }

  public function send_query_feedback_reply(\EUS\TFeedbackReplyQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_feedback_reply_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_feedback_reply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_feedback_reply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_feedback_reply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_feedback_reply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_feedback_reply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_feedback_reply failed: unknown result");
  }

  public function feedback_reply($feedback_id, $user_id, $content)
  {
    $this->send_feedback_reply($feedback_id, $user_id, $content);
    $this->recv_feedback_reply();
  }

  public function send_feedback_reply($feedback_id, $user_id, $content)
  {
    $args = new \EUS\ElemeUserService_feedback_reply_args();
    $args->feedback_id = $feedback_id;
    $args->user_id = $user_id;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'feedback_reply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('feedback_reply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_feedback_reply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_feedback_reply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_feedback_reply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function add_restaurant_admin($restaurant_id, $user_id)
  {
    $this->send_add_restaurant_admin($restaurant_id, $user_id);
    $this->recv_add_restaurant_admin();
  }

  public function send_add_restaurant_admin($restaurant_id, $user_id)
  {
    $args = new \EUS\ElemeUserService_add_restaurant_admin_args();
    $args->restaurant_id = $restaurant_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_restaurant_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_restaurant_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_restaurant_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_add_restaurant_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_add_restaurant_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function delete_restaurant_admin($restaurant_id, $user_id)
  {
    $this->send_delete_restaurant_admin($restaurant_id, $user_id);
    $this->recv_delete_restaurant_admin();
  }

  public function send_delete_restaurant_admin($restaurant_id, $user_id)
  {
    $args = new \EUS\ElemeUserService_delete_restaurant_admin_args();
    $args->restaurant_id = $restaurant_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_restaurant_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_restaurant_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_restaurant_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_delete_restaurant_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_delete_restaurant_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function modify_payment_quota($user_id, $payment_quota, $ip)
  {
    $this->send_modify_payment_quota($user_id, $payment_quota, $ip);
    $this->recv_modify_payment_quota();
  }

  public function send_modify_payment_quota($user_id, $payment_quota, $ip)
  {
    $args = new \EUS\ElemeUserService_modify_payment_quota_args();
    $args->user_id = $user_id;
    $args->payment_quota = $payment_quota;
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'modify_payment_quota', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('modify_payment_quota', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_modify_payment_quota()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_modify_payment_quota_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_modify_payment_quota_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function generate_email_validate_str($user_id)
  {
    $this->send_generate_email_validate_str($user_id);
    return $this->recv_generate_email_validate_str();
  }

  public function send_generate_email_validate_str($user_id)
  {
    $args = new \EUS\ElemeUserService_generate_email_validate_str_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_email_validate_str', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_email_validate_str', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_email_validate_str()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_generate_email_validate_str_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_generate_email_validate_str_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("generate_email_validate_str failed: unknown result");
  }

  public function validate_old_mobile($user_id, $mobile)
  {
    $this->send_validate_old_mobile($user_id, $mobile);
    return $this->recv_validate_old_mobile();
  }

  public function send_validate_old_mobile($user_id, $mobile)
  {
    $args = new \EUS\ElemeUserService_validate_old_mobile_args();
    $args->user_id = $user_id;
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validate_old_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validate_old_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validate_old_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_validate_old_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_validate_old_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("validate_old_mobile failed: unknown result");
  }

  public function send_validate_code($user_id, $terminal, $terminal_type, $ip)
  {
    $this->send_send_validate_code($user_id, $terminal, $terminal_type, $ip);
    return $this->recv_send_validate_code();
  }

  public function send_send_validate_code($user_id, $terminal, $terminal_type, $ip)
  {
    $args = new \EUS\ElemeUserService_send_validate_code_args();
    $args->user_id = $user_id;
    $args->terminal = $terminal;
    $args->terminal_type = $terminal_type;
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_validate_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_validate_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_validate_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_validate_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_validate_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("send_validate_code failed: unknown result");
  }

  public function validate_terminal($user_id, $terminal, $terminal_type, $validate_code, $ip)
  {
    $this->send_validate_terminal($user_id, $terminal, $terminal_type, $validate_code, $ip);
    return $this->recv_validate_terminal();
  }

  public function send_validate_terminal($user_id, $terminal, $terminal_type, $validate_code, $ip)
  {
    $args = new \EUS\ElemeUserService_validate_terminal_args();
    $args->user_id = $user_id;
    $args->terminal = $terminal;
    $args->terminal_type = $terminal_type;
    $args->validate_code = $validate_code;
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'validate_terminal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('validate_terminal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_validate_terminal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_validate_terminal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_validate_terminal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("validate_terminal failed: unknown result");
  }

  public function unbind_terminal($user_id, $terminal_type, $validate_code, $ip)
  {
    $this->send_unbind_terminal($user_id, $terminal_type, $validate_code, $ip);
    return $this->recv_unbind_terminal();
  }

  public function send_unbind_terminal($user_id, $terminal_type, $validate_code, $ip)
  {
    $args = new \EUS\ElemeUserService_unbind_terminal_args();
    $args->user_id = $user_id;
    $args->terminal_type = $terminal_type;
    $args->validate_code = $validate_code;
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unbind_terminal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unbind_terminal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unbind_terminal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_unbind_terminal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_unbind_terminal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("unbind_terminal failed: unknown result");
  }

  public function send_notice($user_id, $type_code, $title, $content)
  {
    $this->send_send_notice($user_id, $type_code, $title, $content);
    $this->recv_send_notice();
  }

  public function send_send_notice($user_id, $type_code, $title, $content)
  {
    $args = new \EUS\ElemeUserService_send_notice_args();
    $args->user_id = $user_id;
    $args->type_code = $type_code;
    $args->title = $title;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_notice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_notice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_notice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_notice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_notice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function send_unsent_notice()
  {
    $this->send_send_unsent_notice();
    $this->recv_send_unsent_notice();
  }

  public function send_send_unsent_notice()
  {
    $args = new \EUS\ElemeUserService_send_unsent_notice_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_unsent_notice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_unsent_notice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_unsent_notice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_unsent_notice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_unsent_notice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function send_unsent_notice_by_user($user_id)
  {
    $this->send_send_unsent_notice_by_user($user_id);
    $this->recv_send_unsent_notice_by_user();
  }

  public function send_send_unsent_notice_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_send_unsent_notice_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_unsent_notice_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_unsent_notice_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_unsent_notice_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_unsent_notice_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_unsent_notice_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function send_coupon_by_sms($mobile)
  {
    $this->send_send_coupon_by_sms($mobile);
    return $this->recv_send_coupon_by_sms();
  }

  public function send_send_coupon_by_sms($mobile)
  {
    $args = new \EUS\ElemeUserService_send_coupon_by_sms_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_coupon_by_sms', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_coupon_by_sms', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_coupon_by_sms()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_coupon_by_sms_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_coupon_by_sms_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("send_coupon_by_sms failed: unknown result");
  }

  public function send_coupon_by_sms2($mobile, $source)
  {
    $this->send_send_coupon_by_sms2($mobile, $source);
    return $this->recv_send_coupon_by_sms2();
  }

  public function send_send_coupon_by_sms2($mobile, $source)
  {
    $args = new \EUS\ElemeUserService_send_coupon_by_sms2_args();
    $args->mobile = $mobile;
    $args->source = $source;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_coupon_by_sms2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_coupon_by_sms2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_coupon_by_sms2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_coupon_by_sms2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_coupon_by_sms2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("send_coupon_by_sms2 failed: unknown result");
  }

  public function active_email($active_code)
  {
    $this->send_active_email($active_code);
    $this->recv_active_email();
  }

  public function send_active_email($active_code)
  {
    $args = new \EUS\ElemeUserService_active_email_args();
    $args->active_code = $active_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'active_email', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('active_email', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_active_email()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_active_email_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_active_email_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function generate_retrieval_password_final_token($email)
  {
    $this->send_generate_retrieval_password_final_token($email);
    return $this->recv_generate_retrieval_password_final_token();
  }

  public function send_generate_retrieval_password_final_token($email)
  {
    $args = new \EUS\ElemeUserService_generate_retrieval_password_final_token_args();
    $args->email = $email;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_retrieval_password_final_token', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_retrieval_password_final_token', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_retrieval_password_final_token()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_generate_retrieval_password_final_token_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_generate_retrieval_password_final_token_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("generate_retrieval_password_final_token failed: unknown result");
  }

  public function reset_forgetted_password($final_token, $password)
  {
    $this->send_reset_forgetted_password($final_token, $password);
    return $this->recv_reset_forgetted_password();
  }

  public function send_reset_forgetted_password($final_token, $password)
  {
    $args = new \EUS\ElemeUserService_reset_forgetted_password_args();
    $args->final_token = $final_token;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'reset_forgetted_password', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('reset_forgetted_password', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_reset_forgetted_password()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_reset_forgetted_password_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_reset_forgetted_password_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("reset_forgetted_password failed: unknown result");
  }

  public function check_password_retrieval_token($final_token)
  {
    $this->send_check_password_retrieval_token($final_token);
    return $this->recv_check_password_retrieval_token();
  }

  public function send_check_password_retrieval_token($final_token)
  {
    $args = new \EUS\ElemeUserService_check_password_retrieval_token_args();
    $args->final_token = $final_token;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_password_retrieval_token', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_password_retrieval_token', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_password_retrieval_token()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_check_password_retrieval_token_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_check_password_retrieval_token_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("check_password_retrieval_token failed: unknown result");
  }

  public function get_user_point_change_except_order($user_id, $order_id)
  {
    $this->send_get_user_point_change_except_order($user_id, $order_id);
    return $this->recv_get_user_point_change_except_order();
  }

  public function send_get_user_point_change_except_order($user_id, $order_id)
  {
    $args = new \EUS\ElemeUserService_get_user_point_change_except_order_args();
    $args->user_id = $user_id;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_point_change_except_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_point_change_except_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_point_change_except_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_point_change_except_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_point_change_except_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_point_change_except_order failed: unknown result");
  }

  public function save_pay_error($error_id, \EUS\TPayError $t_error)
  {
    $this->send_save_pay_error($error_id, $t_error);
    $this->recv_save_pay_error();
  }

  public function send_save_pay_error($error_id, \EUS\TPayError $t_error)
  {
    $args = new \EUS\ElemeUserService_save_pay_error_args();
    $args->error_id = $error_id;
    $args->t_error = $t_error;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_pay_error', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_pay_error', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_pay_error()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_save_pay_error_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_save_pay_error_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_pay_record($record_id)
  {
    $this->send_get_pay_record($record_id);
    return $this->recv_get_pay_record();
  }

  public function send_get_pay_record($record_id)
  {
    $args = new \EUS\ElemeUserService_get_pay_record_args();
    $args->record_id = $record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pay_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pay_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pay_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_pay_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_pay_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_pay_record failed: unknown result");
  }

  public function get_pay_record_by_unique_id($unique_id)
  {
    $this->send_get_pay_record_by_unique_id($unique_id);
    return $this->recv_get_pay_record_by_unique_id();
  }

  public function send_get_pay_record_by_unique_id($unique_id)
  {
    $args = new \EUS\ElemeUserService_get_pay_record_by_unique_id_args();
    $args->unique_id = $unique_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pay_record_by_unique_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pay_record_by_unique_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pay_record_by_unique_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_pay_record_by_unique_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_pay_record_by_unique_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_pay_record_by_unique_id failed: unknown result");
  }

  public function get_pay_record_id_by_order_id($order_id)
  {
    $this->send_get_pay_record_id_by_order_id($order_id);
    return $this->recv_get_pay_record_id_by_order_id();
  }

  public function send_get_pay_record_id_by_order_id($order_id)
  {
    $args = new \EUS\ElemeUserService_get_pay_record_id_by_order_id_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pay_record_id_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pay_record_id_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pay_record_id_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_pay_record_id_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_pay_record_id_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_pay_record_id_by_order_id failed: unknown result");
  }

  public function get_order_id_by_pay_record_id($pay_record_id)
  {
    $this->send_get_order_id_by_pay_record_id($pay_record_id);
    return $this->recv_get_order_id_by_pay_record_id();
  }

  public function send_get_order_id_by_pay_record_id($pay_record_id)
  {
    $args = new \EUS\ElemeUserService_get_order_id_by_pay_record_id_args();
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_order_id_by_pay_record_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_order_id_by_pay_record_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_order_id_by_pay_record_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_order_id_by_pay_record_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_order_id_by_pay_record_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_order_id_by_pay_record_id failed: unknown result");
  }

  public function check_function_blocked($user_id, $func)
  {
    $this->send_check_function_blocked($user_id, $func);
    return $this->recv_check_function_blocked();
  }

  public function send_check_function_blocked($user_id, $func)
  {
    $args = new \EUS\ElemeUserService_check_function_blocked_args();
    $args->user_id = $user_id;
    $args->func = $func;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_function_blocked', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_function_blocked', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_function_blocked()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_check_function_blocked_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_check_function_blocked_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("check_function_blocked failed: unknown result");
  }

  public function count_trade_record(\EUS\TTradeRecordQuery $query_struct)
  {
    $this->send_count_trade_record($query_struct);
    return $this->recv_count_trade_record();
  }

  public function send_count_trade_record(\EUS\TTradeRecordQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_count_trade_record_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_trade_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_trade_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_trade_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_trade_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_trade_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_trade_record failed: unknown result");
  }

  public function parse_ip($ip)
  {
    $this->send_parse_ip($ip);
    return $this->recv_parse_ip();
  }

  public function send_parse_ip($ip)
  {
    $args = new \EUS\ElemeUserService_parse_ip_args();
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'parse_ip', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('parse_ip', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_parse_ip()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_parse_ip_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_parse_ip_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("parse_ip failed: unknown result");
  }

  public function sum_balance_change(\EUS\TUserBalanceChangeQuery $query_struct)
  {
    $this->send_sum_balance_change($query_struct);
    return $this->recv_sum_balance_change();
  }

  public function send_sum_balance_change(\EUS\TUserBalanceChangeQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_sum_balance_change_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sum_balance_change', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sum_balance_change', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sum_balance_change()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sum_balance_change_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sum_balance_change_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sum_balance_change failed: unknown result");
  }

  public function set_user_place(\EUS\TUserPlace $set_struct)
  {
    $this->send_set_user_place($set_struct);
    return $this->recv_set_user_place();
  }

  public function send_set_user_place(\EUS\TUserPlace $set_struct)
  {
    $args = new \EUS\ElemeUserService_set_user_place_args();
    $args->set_struct = $set_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_user_place', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_user_place', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_user_place()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_user_place_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_user_place_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("set_user_place failed: unknown result");
  }

  public function delete_user_place($id)
  {
    $this->send_delete_user_place($id);
    $this->recv_delete_user_place();
  }

  public function send_delete_user_place($id)
  {
    $args = new \EUS\ElemeUserService_delete_user_place_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_user_place', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_user_place', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_user_place()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_delete_user_place_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_delete_user_place_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function account_get_stats($user_id, $begin_datetime, $end_datetime)
  {
    $this->send_account_get_stats($user_id, $begin_datetime, $end_datetime);
    return $this->recv_account_get_stats();
  }

  public function send_account_get_stats($user_id, $begin_datetime, $end_datetime)
  {
    $args = new \EUS\ElemeUserService_account_get_stats_args();
    $args->user_id = $user_id;
    $args->begin_datetime = $begin_datetime;
    $args->end_datetime = $end_datetime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'account_get_stats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('account_get_stats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_account_get_stats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_account_get_stats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_account_get_stats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("account_get_stats failed: unknown result");
  }

  public function account_get_stats_by_type($user_id, $type_code)
  {
    $this->send_account_get_stats_by_type($user_id, $type_code);
    return $this->recv_account_get_stats_by_type();
  }

  public function send_account_get_stats_by_type($user_id, $type_code)
  {
    $args = new \EUS\ElemeUserService_account_get_stats_by_type_args();
    $args->user_id = $user_id;
    $args->type_code = $type_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'account_get_stats_by_type', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('account_get_stats_by_type', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_account_get_stats_by_type()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_account_get_stats_by_type_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_account_get_stats_by_type_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("account_get_stats_by_type failed: unknown result");
  }

  public function walle_get_all_groups()
  {
    $this->send_walle_get_all_groups();
    return $this->recv_walle_get_all_groups();
  }

  public function send_walle_get_all_groups()
  {
    $args = new \EUS\ElemeUserService_walle_get_all_groups_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_all_groups', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_all_groups', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_all_groups()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_all_groups_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_all_groups_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_all_groups failed: unknown result");
  }

  public function walle_get_all_permissions()
  {
    $this->send_walle_get_all_permissions();
    return $this->recv_walle_get_all_permissions();
  }

  public function send_walle_get_all_permissions()
  {
    $args = new \EUS\ElemeUserService_walle_get_all_permissions_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_all_permissions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_all_permissions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_all_permissions()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_all_permissions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_all_permissions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_all_permissions failed: unknown result");
  }

  public function walle_get_all_group_permissions()
  {
    $this->send_walle_get_all_group_permissions();
    return $this->recv_walle_get_all_group_permissions();
  }

  public function send_walle_get_all_group_permissions()
  {
    $args = new \EUS\ElemeUserService_walle_get_all_group_permissions_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_all_group_permissions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_all_group_permissions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_all_group_permissions()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_all_group_permissions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_all_group_permissions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_all_group_permissions failed: unknown result");
  }

  public function walle_add_group_permission($group_id, $permission_id)
  {
    $this->send_walle_add_group_permission($group_id, $permission_id);
    $this->recv_walle_add_group_permission();
  }

  public function send_walle_add_group_permission($group_id, $permission_id)
  {
    $args = new \EUS\ElemeUserService_walle_add_group_permission_args();
    $args->group_id = $group_id;
    $args->permission_id = $permission_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_add_group_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_add_group_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_add_group_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_add_group_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_add_group_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_remove_group_permission($group_id, $permission_id)
  {
    $this->send_walle_remove_group_permission($group_id, $permission_id);
    $this->recv_walle_remove_group_permission();
  }

  public function send_walle_remove_group_permission($group_id, $permission_id)
  {
    $args = new \EUS\ElemeUserService_walle_remove_group_permission_args();
    $args->group_id = $group_id;
    $args->permission_id = $permission_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_remove_group_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_remove_group_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_remove_group_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_remove_group_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_remove_group_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_save_group($group_id, \EUS\TGroup $group_struct)
  {
    $this->send_walle_save_group($group_id, $group_struct);
    $this->recv_walle_save_group();
  }

  public function send_walle_save_group($group_id, \EUS\TGroup $group_struct)
  {
    $args = new \EUS\ElemeUserService_walle_save_group_args();
    $args->group_id = $group_id;
    $args->group_struct = $group_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_save_group', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_save_group', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_save_group()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_save_group_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_save_group_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_save_permission($permission_id, \EUS\TPermission $permission_struct)
  {
    $this->send_walle_save_permission($permission_id, $permission_struct);
    $this->recv_walle_save_permission();
  }

  public function send_walle_save_permission($permission_id, \EUS\TPermission $permission_struct)
  {
    $args = new \EUS\ElemeUserService_walle_save_permission_args();
    $args->permission_id = $permission_id;
    $args->permission_struct = $permission_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_save_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_save_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_save_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_save_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_save_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_count_balance_change(\EUS\TWalleBalanceChangeQuery $query_struct)
  {
    $this->send_walle_count_balance_change($query_struct);
    return $this->recv_walle_count_balance_change();
  }

  public function send_walle_count_balance_change(\EUS\TWalleBalanceChangeQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_count_balance_change_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_balance_change', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_balance_change', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_balance_change()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_count_balance_change_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_count_balance_change_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_count_balance_change failed: unknown result");
  }

  public function walle_query_balance_change(\EUS\TWalleBalanceChangeQuery $query_struct)
  {
    $this->send_walle_query_balance_change($query_struct);
    return $this->recv_walle_query_balance_change();
  }

  public function send_walle_query_balance_change(\EUS\TWalleBalanceChangeQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_query_balance_change_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_balance_change', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_balance_change', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_balance_change()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_query_balance_change_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_query_balance_change_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_query_balance_change failed: unknown result");
  }

  public function walle_count_withdraw_apply(\EUS\TWalleWithdrawApplyQuery $query_struct)
  {
    $this->send_walle_count_withdraw_apply($query_struct);
    return $this->recv_walle_count_withdraw_apply();
  }

  public function send_walle_count_withdraw_apply(\EUS\TWalleWithdrawApplyQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_count_withdraw_apply_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_withdraw_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_withdraw_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_withdraw_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_count_withdraw_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_count_withdraw_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_count_withdraw_apply failed: unknown result");
  }

  public function walle_query_withdraw_apply(\EUS\TWalleWithdrawApplyQuery $query_struct)
  {
    $this->send_walle_query_withdraw_apply($query_struct);
    return $this->recv_walle_query_withdraw_apply();
  }

  public function send_walle_query_withdraw_apply(\EUS\TWalleWithdrawApplyQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_query_withdraw_apply_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_withdraw_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_withdraw_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_withdraw_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_query_withdraw_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_query_withdraw_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_query_withdraw_apply failed: unknown result");
  }

  public function walle_count_withdraw_record(\EUS\TWalleWithdrawRecordQuery $query_struct)
  {
    $this->send_walle_count_withdraw_record($query_struct);
    return $this->recv_walle_count_withdraw_record();
  }

  public function send_walle_count_withdraw_record(\EUS\TWalleWithdrawRecordQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_count_withdraw_record_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_withdraw_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_withdraw_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_withdraw_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_count_withdraw_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_count_withdraw_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_count_withdraw_record failed: unknown result");
  }

  public function walle_mset_withdraw_process_record_batch_id($ids, $batch_id)
  {
    $this->send_walle_mset_withdraw_process_record_batch_id($ids, $batch_id);
    $this->recv_walle_mset_withdraw_process_record_batch_id();
  }

  public function send_walle_mset_withdraw_process_record_batch_id($ids, $batch_id)
  {
    $args = new \EUS\ElemeUserService_walle_mset_withdraw_process_record_batch_id_args();
    $args->ids = $ids;
    $args->batch_id = $batch_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_mset_withdraw_process_record_batch_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_mset_withdraw_process_record_batch_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_mset_withdraw_process_record_batch_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_mset_withdraw_process_record_batch_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_mset_withdraw_process_record_batch_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_query_withdraw_record(\EUS\TWalleWithdrawRecordQuery $query_struct)
  {
    $this->send_walle_query_withdraw_record($query_struct);
    return $this->recv_walle_query_withdraw_record();
  }

  public function send_walle_query_withdraw_record(\EUS\TWalleWithdrawRecordQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_query_withdraw_record_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_withdraw_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_withdraw_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_withdraw_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_query_withdraw_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_query_withdraw_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_query_withdraw_record failed: unknown result");
  }

  public function walle_mget_withdraw_record($ids)
  {
    $this->send_walle_mget_withdraw_record($ids);
    return $this->recv_walle_mget_withdraw_record();
  }

  public function send_walle_mget_withdraw_record($ids)
  {
    $args = new \EUS\ElemeUserService_walle_mget_withdraw_record_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_mget_withdraw_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_mget_withdraw_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_mget_withdraw_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_mget_withdraw_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_mget_withdraw_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_mget_withdraw_record failed: unknown result");
  }

  public function walle_mset_withdraw_record_status($ids, $status)
  {
    $this->send_walle_mset_withdraw_record_status($ids, $status);
    return $this->recv_walle_mset_withdraw_record_status();
  }

  public function send_walle_mset_withdraw_record_status($ids, $status)
  {
    $args = new \EUS\ElemeUserService_walle_mset_withdraw_record_status_args();
    $args->ids = $ids;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_mset_withdraw_record_status', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_mset_withdraw_record_status', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_mset_withdraw_record_status()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_mset_withdraw_record_status_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_mset_withdraw_record_status_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_mset_withdraw_record_status failed: unknown result");
  }

  public function walle_get_latest_withdraw_process_record_by_withdraw_id($withdraw_id)
  {
    $this->send_walle_get_latest_withdraw_process_record_by_withdraw_id($withdraw_id);
    return $this->recv_walle_get_latest_withdraw_process_record_by_withdraw_id();
  }

  public function send_walle_get_latest_withdraw_process_record_by_withdraw_id($withdraw_id)
  {
    $args = new \EUS\ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_args();
    $args->withdraw_id = $withdraw_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_latest_withdraw_process_record_by_withdraw_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_latest_withdraw_process_record_by_withdraw_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_latest_withdraw_process_record_by_withdraw_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_latest_withdraw_process_record_by_withdraw_id failed: unknown result");
  }

  public function walle_bind_email($user_id, $admin_user_id, $email)
  {
    $this->send_walle_bind_email($user_id, $admin_user_id, $email);
    $this->recv_walle_bind_email();
  }

  public function send_walle_bind_email($user_id, $admin_user_id, $email)
  {
    $args = new \EUS\ElemeUserService_walle_bind_email_args();
    $args->user_id = $user_id;
    $args->admin_user_id = $admin_user_id;
    $args->email = $email;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_bind_email', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_bind_email', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_bind_email()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_bind_email_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_bind_email_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_get_online_sev($process_types)
  {
    $this->send_walle_get_online_sev($process_types);
    return $this->recv_walle_get_online_sev();
  }

  public function send_walle_get_online_sev($process_types)
  {
    $args = new \EUS\ElemeUserService_walle_get_online_sev_args();
    $args->process_types = $process_types;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_online_sev', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_online_sev', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_online_sev()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_online_sev_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_online_sev_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_online_sev failed: unknown result");
  }

  public function walle_get_point_change_list(\EUS\TPointChangeRecordQuery $query_struct)
  {
    $this->send_walle_get_point_change_list($query_struct);
    return $this->recv_walle_get_point_change_list();
  }

  public function send_walle_get_point_change_list(\EUS\TPointChangeRecordQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_get_point_change_list_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_point_change_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_point_change_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_point_change_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_point_change_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_point_change_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_point_change_list failed: unknown result");
  }

  public function walle_get_user_list(\EUS\TUserQuery $query_struct)
  {
    $this->send_walle_get_user_list($query_struct);
    return $this->recv_walle_get_user_list();
  }

  public function send_walle_get_user_list(\EUS\TUserQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_get_user_list_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_user_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_user_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_user_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_user_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_user_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_user_list failed: unknown result");
  }

  public function walle_get_user_gift_list(\EUS\TUserGiftQuery $query_struct)
  {
    $this->send_walle_get_user_gift_list($query_struct);
    return $this->recv_walle_get_user_gift_list();
  }

  public function send_walle_get_user_gift_list(\EUS\TUserGiftQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_get_user_gift_list_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_user_gift_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_user_gift_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_user_gift_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_user_gift_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_user_gift_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_user_gift_list failed: unknown result");
  }

  public function walle_get_user_gift_list_by_ids($user_gift_ids)
  {
    $this->send_walle_get_user_gift_list_by_ids($user_gift_ids);
    return $this->recv_walle_get_user_gift_list_by_ids();
  }

  public function send_walle_get_user_gift_list_by_ids($user_gift_ids)
  {
    $args = new \EUS\ElemeUserService_walle_get_user_gift_list_by_ids_args();
    $args->user_gift_ids = $user_gift_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_user_gift_list_by_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_user_gift_list_by_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_user_gift_list_by_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_user_gift_list_by_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_user_gift_list_by_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_user_gift_list_by_ids failed: unknown result");
  }

  public function walle_set_active($user_id, $is_active)
  {
    $this->send_walle_set_active($user_id, $is_active);
    $this->recv_walle_set_active();
  }

  public function send_walle_set_active($user_id, $is_active)
  {
    $args = new \EUS\ElemeUserService_walle_set_active_args();
    $args->user_id = $user_id;
    $args->is_active = $is_active;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_set_active', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_set_active', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_set_active()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_set_active_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_set_active_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_set_user_active($user_id, $admin_user_id, $is_active, $description)
  {
    $this->send_walle_set_user_active($user_id, $admin_user_id, $is_active, $description);
    $this->recv_walle_set_user_active();
  }

  public function send_walle_set_user_active($user_id, $admin_user_id, $is_active, $description)
  {
    $args = new \EUS\ElemeUserService_walle_set_user_active_args();
    $args->user_id = $user_id;
    $args->admin_user_id = $admin_user_id;
    $args->is_active = $is_active;
    $args->description = $description;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_set_user_active', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_set_user_active', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_set_user_active()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_set_user_active_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_set_user_active_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_set_name($user_id, $name)
  {
    $this->send_walle_set_name($user_id, $name);
    $this->recv_walle_set_name();
  }

  public function send_walle_set_name($user_id, $name)
  {
    $args = new \EUS\ElemeUserService_walle_set_name_args();
    $args->user_id = $user_id;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_set_name', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_set_name', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_set_name()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_set_name_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_set_name_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_set_super_admin($user_id, $is_super_admin)
  {
    $this->send_walle_set_super_admin($user_id, $is_super_admin);
    $this->recv_walle_set_super_admin();
  }

  public function send_walle_set_super_admin($user_id, $is_super_admin)
  {
    $args = new \EUS\ElemeUserService_walle_set_super_admin_args();
    $args->user_id = $user_id;
    $args->is_super_admin = $is_super_admin;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_set_super_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_set_super_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_set_super_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_set_super_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_set_super_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_unbind_email($user_id)
  {
    $this->send_walle_unbind_email($user_id);
    $this->recv_walle_unbind_email();
  }

  public function send_walle_unbind_email($user_id)
  {
    $args = new \EUS\ElemeUserService_walle_unbind_email_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_unbind_email', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_unbind_email', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_unbind_email()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_unbind_email_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_unbind_email_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_unbind_mobile($user_id)
  {
    $this->send_walle_unbind_mobile($user_id);
    $this->recv_walle_unbind_mobile();
  }

  public function send_walle_unbind_mobile($user_id)
  {
    $args = new \EUS\ElemeUserService_walle_unbind_mobile_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_unbind_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_unbind_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_unbind_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_unbind_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_unbind_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_change_mobile($user_id, $admin_user_id, $new_mobile)
  {
    $this->send_walle_change_mobile($user_id, $admin_user_id, $new_mobile);
    return $this->recv_walle_change_mobile();
  }

  public function send_walle_change_mobile($user_id, $admin_user_id, $new_mobile)
  {
    $args = new \EUS\ElemeUserService_walle_change_mobile_args();
    $args->user_id = $user_id;
    $args->admin_user_id = $admin_user_id;
    $args->new_mobile = $new_mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_change_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_change_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_change_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_change_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_change_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_change_mobile failed: unknown result");
  }

  public function walle_count_online_payment_apply(\EUS\TWalleOnlinePaymentApplyQuery $query_struct)
  {
    $this->send_walle_count_online_payment_apply($query_struct);
    return $this->recv_walle_count_online_payment_apply();
  }

  public function send_walle_count_online_payment_apply(\EUS\TWalleOnlinePaymentApplyQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_count_online_payment_apply_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_online_payment_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_online_payment_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_online_payment_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_count_online_payment_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_count_online_payment_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_count_online_payment_apply failed: unknown result");
  }

  public function walle_query_online_payment_apply(\EUS\TWalleOnlinePaymentApplyQuery $query_struct)
  {
    $this->send_walle_query_online_payment_apply($query_struct);
    return $this->recv_walle_query_online_payment_apply();
  }

  public function send_walle_query_online_payment_apply(\EUS\TWalleOnlinePaymentApplyQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_query_online_payment_apply_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_online_payment_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_online_payment_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_online_payment_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_query_online_payment_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_query_online_payment_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_query_online_payment_apply failed: unknown result");
  }

  public function walle_query_point_change(\EUS\TWallePointChangeQuery $query_struct)
  {
    $this->send_walle_query_point_change($query_struct);
    return $this->recv_walle_query_point_change();
  }

  public function send_walle_query_point_change(\EUS\TWallePointChangeQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_query_point_change_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_point_change', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_point_change', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_point_change()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_query_point_change_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_query_point_change_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_query_point_change failed: unknown result");
  }

  public function walle_count_point_change(\EUS\TWallePointChangeQuery $query_struct)
  {
    $this->send_walle_count_point_change($query_struct);
    return $this->recv_walle_count_point_change();
  }

  public function send_walle_count_point_change(\EUS\TWallePointChangeQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_count_point_change_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_point_change', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_point_change', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_point_change()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_count_point_change_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_count_point_change_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_count_point_change failed: unknown result");
  }

  public function walle_get_pay_stats_detail_count(\EUS\TWallePayStatsQuery $query_struct)
  {
    $this->send_walle_get_pay_stats_detail_count($query_struct);
    return $this->recv_walle_get_pay_stats_detail_count();
  }

  public function send_walle_get_pay_stats_detail_count(\EUS\TWallePayStatsQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_get_pay_stats_detail_count_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_pay_stats_detail_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_pay_stats_detail_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_pay_stats_detail_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_pay_stats_detail_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_pay_stats_detail_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_pay_stats_detail_count failed: unknown result");
  }

  public function walle_get_pay_stats_overview(\EUS\TWallePayStatsQuery $query_struct)
  {
    $this->send_walle_get_pay_stats_overview($query_struct);
    return $this->recv_walle_get_pay_stats_overview();
  }

  public function send_walle_get_pay_stats_overview(\EUS\TWallePayStatsQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_get_pay_stats_overview_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_pay_stats_overview', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_pay_stats_overview', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_pay_stats_overview()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_pay_stats_overview_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_pay_stats_overview_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_pay_stats_overview failed: unknown result");
  }

  public function walle_get_pay_stats_detail(\EUS\TWallePayStatsQuery $query_struct)
  {
    $this->send_walle_get_pay_stats_detail($query_struct);
    return $this->recv_walle_get_pay_stats_detail();
  }

  public function send_walle_get_pay_stats_detail(\EUS\TWallePayStatsQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_walle_get_pay_stats_detail_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_pay_stats_detail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_pay_stats_detail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_pay_stats_detail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_pay_stats_detail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_pay_stats_detail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_pay_stats_detail failed: unknown result");
  }

  public function walle_mset_feedback_processed($feedback_ids, $is_processed)
  {
    $this->send_walle_mset_feedback_processed($feedback_ids, $is_processed);
    $this->recv_walle_mset_feedback_processed();
  }

  public function send_walle_mset_feedback_processed($feedback_ids, $is_processed)
  {
    $args = new \EUS\ElemeUserService_walle_mset_feedback_processed_args();
    $args->feedback_ids = $feedback_ids;
    $args->is_processed = $is_processed;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_mset_feedback_processed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_mset_feedback_processed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_mset_feedback_processed()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_mset_feedback_processed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_mset_feedback_processed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_query_withdraw_process_batch($statuses, $batch_id, $offset, $limit)
  {
    $this->send_walle_query_withdraw_process_batch($statuses, $batch_id, $offset, $limit);
    return $this->recv_walle_query_withdraw_process_batch();
  }

  public function send_walle_query_withdraw_process_batch($statuses, $batch_id, $offset, $limit)
  {
    $args = new \EUS\ElemeUserService_walle_query_withdraw_process_batch_args();
    $args->statuses = $statuses;
    $args->batch_id = $batch_id;
    $args->offset = $offset;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_withdraw_process_batch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_withdraw_process_batch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_withdraw_process_batch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_query_withdraw_process_batch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_query_withdraw_process_batch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_query_withdraw_process_batch failed: unknown result");
  }

  public function walle_mset_feedback_valid($feedback_ids, $is_valid)
  {
    $this->send_walle_mset_feedback_valid($feedback_ids, $is_valid);
    $this->recv_walle_mset_feedback_valid();
  }

  public function send_walle_mset_feedback_valid($feedback_ids, $is_valid)
  {
    $args = new \EUS\ElemeUserService_walle_mset_feedback_valid_args();
    $args->feedback_ids = $feedback_ids;
    $args->is_valid = $is_valid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_mset_feedback_valid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_mset_feedback_valid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_mset_feedback_valid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_mset_feedback_valid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_mset_feedback_valid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function walle_count_withdraw_process_batch($statuses, $batch_id)
  {
    $this->send_walle_count_withdraw_process_batch($statuses, $batch_id);
    return $this->recv_walle_count_withdraw_process_batch();
  }

  public function send_walle_count_withdraw_process_batch($statuses, $batch_id)
  {
    $args = new \EUS\ElemeUserService_walle_count_withdraw_process_batch_args();
    $args->statuses = $statuses;
    $args->batch_id = $batch_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_withdraw_process_batch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_withdraw_process_batch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_withdraw_process_batch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_count_withdraw_process_batch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_count_withdraw_process_batch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_count_withdraw_process_batch failed: unknown result");
  }

  public function walle_get_withdraw_process_record_by_batch_id($batch_id)
  {
    $this->send_walle_get_withdraw_process_record_by_batch_id($batch_id);
    return $this->recv_walle_get_withdraw_process_record_by_batch_id();
  }

  public function send_walle_get_withdraw_process_record_by_batch_id($batch_id)
  {
    $args = new \EUS\ElemeUserService_walle_get_withdraw_process_record_by_batch_id_args();
    $args->batch_id = $batch_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_withdraw_process_record_by_batch_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_withdraw_process_record_by_batch_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_withdraw_process_record_by_batch_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_get_withdraw_process_record_by_batch_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_get_withdraw_process_record_by_batch_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_get_withdraw_process_record_by_batch_id failed: unknown result");
  }

  public function dms_get_dop_user_list()
  {
    $this->send_dms_get_dop_user_list();
    return $this->recv_dms_get_dop_user_list();
  }

  public function send_dms_get_dop_user_list()
  {
    $args = new \EUS\ElemeUserService_dms_get_dop_user_list_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dms_get_dop_user_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dms_get_dop_user_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dms_get_dop_user_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_dms_get_dop_user_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_dms_get_dop_user_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("dms_get_dop_user_list failed: unknown result");
  }

  public function mobile_third_signup($third_user_id, $session_id)
  {
    $this->send_mobile_third_signup($third_user_id, $session_id);
    return $this->recv_mobile_third_signup();
  }

  public function send_mobile_third_signup($third_user_id, $session_id)
  {
    $args = new \EUS\ElemeUserService_mobile_third_signup_args();
    $args->third_user_id = $third_user_id;
    $args->session_id = $session_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_third_signup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_third_signup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_third_signup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobile_third_signup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobile_third_signup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobile_third_signup failed: unknown result");
  }

  public function query_device_user(\EUS\TDeviceUserQuery $query)
  {
    $this->send_query_device_user($query);
    return $this->recv_query_device_user();
  }

  public function send_query_device_user(\EUS\TDeviceUserQuery $query)
  {
    $args = new \EUS\ElemeUserService_query_device_user_args();
    $args->query = $query;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_device_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_device_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_device_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_device_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_device_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_device_user failed: unknown result");
  }

  public function mobile_query_blocked_device_user_list(\EUS\TBlockedDeviceUserQuery $query)
  {
    $this->send_mobile_query_blocked_device_user_list($query);
    return $this->recv_mobile_query_blocked_device_user_list();
  }

  public function send_mobile_query_blocked_device_user_list(\EUS\TBlockedDeviceUserQuery $query)
  {
    $args = new \EUS\ElemeUserService_mobile_query_blocked_device_user_list_args();
    $args->query = $query;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_query_blocked_device_user_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_query_blocked_device_user_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_query_blocked_device_user_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobile_query_blocked_device_user_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobile_query_blocked_device_user_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobile_query_blocked_device_user_list failed: unknown result");
  }

  public function mobile_get_sns_map($user_id)
  {
    $this->send_mobile_get_sns_map($user_id);
    return $this->recv_mobile_get_sns_map();
  }

  public function send_mobile_get_sns_map($user_id)
  {
    $args = new \EUS\ElemeUserService_mobile_get_sns_map_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_get_sns_map', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_get_sns_map', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_get_sns_map()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobile_get_sns_map_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobile_get_sns_map_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobile_get_sns_map failed: unknown result");
  }

  public function mobile_get_sns_map_new($user_id)
  {
    $this->send_mobile_get_sns_map_new($user_id);
    return $this->recv_mobile_get_sns_map_new();
  }

  public function send_mobile_get_sns_map_new($user_id)
  {
    $args = new \EUS\ElemeUserService_mobile_get_sns_map_new_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_get_sns_map_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_get_sns_map_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_get_sns_map_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobile_get_sns_map_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobile_get_sns_map_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mobile_get_sns_map_new failed: unknown result");
  }

  public function mobile_save_food_image($user_id, $food_id, $image_hash)
  {
    $this->send_mobile_save_food_image($user_id, $food_id, $image_hash);
    $this->recv_mobile_save_food_image();
  }

  public function send_mobile_save_food_image($user_id, $food_id, $image_hash)
  {
    $args = new \EUS\ElemeUserService_mobile_save_food_image_args();
    $args->user_id = $user_id;
    $args->food_id = $food_id;
    $args->image_hash = $image_hash;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_save_food_image', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_save_food_image', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_save_food_image()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobile_save_food_image_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobile_save_food_image_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function mobile_add_feedback($user_id, $username, $content, $feedback_type, $version, $description, $contact)
  {
    $this->send_mobile_add_feedback($user_id, $username, $content, $feedback_type, $version, $description, $contact);
    $this->recv_mobile_add_feedback();
  }

  public function send_mobile_add_feedback($user_id, $username, $content, $feedback_type, $version, $description, $contact)
  {
    $args = new \EUS\ElemeUserService_mobile_add_feedback_args();
    $args->user_id = $user_id;
    $args->username = $username;
    $args->content = $content;
    $args->feedback_type = $feedback_type;
    $args->version = $version;
    $args->description = $description;
    $args->contact = $contact;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_add_feedback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_add_feedback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_add_feedback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mobile_add_feedback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mobile_add_feedback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_upload_alipay_accounts($raw_accounts_str)
  {
    $this->send_pay_upload_alipay_accounts($raw_accounts_str);
    $this->recv_pay_upload_alipay_accounts();
  }

  public function send_pay_upload_alipay_accounts($raw_accounts_str)
  {
    $args = new \EUS\ElemeUserService_pay_upload_alipay_accounts_args();
    $args->raw_accounts_str = $raw_accounts_str;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_upload_alipay_accounts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_upload_alipay_accounts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_upload_alipay_accounts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_upload_alipay_accounts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_upload_alipay_accounts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_upload_cgb_accounts($raw_accounts_str)
  {
    $this->send_pay_upload_cgb_accounts($raw_accounts_str);
    $this->recv_pay_upload_cgb_accounts();
  }

  public function send_pay_upload_cgb_accounts($raw_accounts_str)
  {
    $args = new \EUS\ElemeUserService_pay_upload_cgb_accounts_args();
    $args->raw_accounts_str = $raw_accounts_str;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_upload_cgb_accounts', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_upload_cgb_accounts', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_upload_cgb_accounts()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_upload_cgb_accounts_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_upload_cgb_accounts_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_for_order_new($user_id, $order_id, $pay_company_id, $come_from, $pay_bank, $hongbao_sn, $password)
  {
    $this->send_pay_for_order_new($user_id, $order_id, $pay_company_id, $come_from, $pay_bank, $hongbao_sn, $password);
    return $this->recv_pay_for_order_new();
  }

  public function send_pay_for_order_new($user_id, $order_id, $pay_company_id, $come_from, $pay_bank, $hongbao_sn, $password)
  {
    $args = new \EUS\ElemeUserService_pay_for_order_new_args();
    $args->user_id = $user_id;
    $args->order_id = $order_id;
    $args->pay_company_id = $pay_company_id;
    $args->come_from = $come_from;
    $args->pay_bank = $pay_bank;
    $args->hongbao_sn = $hongbao_sn;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_for_order_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_for_order_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_for_order_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_for_order_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_for_order_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("pay_for_order_new failed: unknown result");
  }

  public function update_pay_method_for_order($order_id, $pay_company_id, $come_from, $pay_bank)
  {
    $this->send_update_pay_method_for_order($order_id, $pay_company_id, $come_from, $pay_bank);
    return $this->recv_update_pay_method_for_order();
  }

  public function send_update_pay_method_for_order($order_id, $pay_company_id, $come_from, $pay_bank)
  {
    $args = new \EUS\ElemeUserService_update_pay_method_for_order_args();
    $args->order_id = $order_id;
    $args->pay_company_id = $pay_company_id;
    $args->come_from = $come_from;
    $args->pay_bank = $pay_bank;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_pay_method_for_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_pay_method_for_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_pay_method_for_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_pay_method_for_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_pay_method_for_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("update_pay_method_for_order failed: unknown result");
  }

  public function walle_pay_for_order($user_id, $order_id, $original_total, $hongbao_sn)
  {
    $this->send_walle_pay_for_order($user_id, $order_id, $original_total, $hongbao_sn);
    return $this->recv_walle_pay_for_order();
  }

  public function send_walle_pay_for_order($user_id, $order_id, $original_total, $hongbao_sn)
  {
    $args = new \EUS\ElemeUserService_walle_pay_for_order_args();
    $args->user_id = $user_id;
    $args->order_id = $order_id;
    $args->original_total = $original_total;
    $args->hongbao_sn = $hongbao_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_pay_for_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_pay_for_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_pay_for_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_walle_pay_for_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_walle_pay_for_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("walle_pay_for_order failed: unknown result");
  }

  public function pay_for_contract($user_id, $contract_sn, $password)
  {
    $this->send_pay_for_contract($user_id, $contract_sn, $password);
    $this->recv_pay_for_contract();
  }

  public function send_pay_for_contract($user_id, $contract_sn, $password)
  {
    $args = new \EUS\ElemeUserService_pay_for_contract_args();
    $args->user_id = $user_id;
    $args->contract_sn = $contract_sn;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_for_contract', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_for_contract', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_for_contract()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_for_contract_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_for_contract_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_for_contract_direct($contract_sn)
  {
    $this->send_pay_for_contract_direct($contract_sn);
    $this->recv_pay_for_contract_direct();
  }

  public function send_pay_for_contract_direct($contract_sn)
  {
    $args = new \EUS\ElemeUserService_pay_for_contract_direct_args();
    $args->contract_sn = $contract_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_for_contract_direct', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_for_contract_direct', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_for_contract_direct()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_for_contract_direct_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_for_contract_direct_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_success(\EUS\TCPayReturnInfo $pay_return_info, $from_action, $ip)
  {
    $this->send_pay_success($pay_return_info, $from_action, $ip);
    $this->recv_pay_success();
  }

  public function send_pay_success(\EUS\TCPayReturnInfo $pay_return_info, $from_action, $ip)
  {
    $args = new \EUS\ElemeUserService_pay_success_args();
    $args->pay_return_info = $pay_return_info;
    $args->from_action = $from_action;
    $args->ip = $ip;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_success', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_success', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_success()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_success_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_success_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_manually_success($pay_record_id, $user_id, $admin_user_id, $password)
  {
    $this->send_pay_manually_success($pay_record_id, $user_id, $admin_user_id, $password);
    $this->recv_pay_manually_success();
  }

  public function send_pay_manually_success($pay_record_id, $user_id, $admin_user_id, $password)
  {
    $args = new \EUS\ElemeUserService_pay_manually_success_args();
    $args->pay_record_id = $pay_record_id;
    $args->user_id = $user_id;
    $args->admin_user_id = $admin_user_id;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_manually_success', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_manually_success', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_manually_success()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_manually_success_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_manually_success_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_record_make($user_id, $pay_co_id, $total_fee, $remark)
  {
    $this->send_pay_record_make($user_id, $pay_co_id, $total_fee, $remark);
    return $this->recv_pay_record_make();
  }

  public function send_pay_record_make($user_id, $pay_co_id, $total_fee, $remark)
  {
    $args = new \EUS\ElemeUserService_pay_record_make_args();
    $args->user_id = $user_id;
    $args->pay_co_id = $pay_co_id;
    $args->total_fee = $total_fee;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_record_make', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_record_make', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_record_make()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_record_make_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_record_make_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("pay_record_make failed: unknown result");
  }

  public function pay_record_make_new($user_id, $pay_company_id, $come_from, $pay_bank, $total_fee)
  {
    $this->send_pay_record_make_new($user_id, $pay_company_id, $come_from, $pay_bank, $total_fee);
    return $this->recv_pay_record_make_new();
  }

  public function send_pay_record_make_new($user_id, $pay_company_id, $come_from, $pay_bank, $total_fee)
  {
    $args = new \EUS\ElemeUserService_pay_record_make_new_args();
    $args->user_id = $user_id;
    $args->pay_company_id = $pay_company_id;
    $args->come_from = $come_from;
    $args->pay_bank = $pay_bank;
    $args->total_fee = $total_fee;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_record_make_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_record_make_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_record_make_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_record_make_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_record_make_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("pay_record_make_new failed: unknown result");
  }

  public function pay_record_fail($pay_record_id)
  {
    $this->send_pay_record_fail($pay_record_id);
    $this->recv_pay_record_fail();
  }

  public function send_pay_record_fail($pay_record_id)
  {
    $args = new \EUS\ElemeUserService_pay_record_fail_args();
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_record_fail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_record_fail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_record_fail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_record_fail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_record_fail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function direct_order_pay_fail($order_id)
  {
    $this->send_direct_order_pay_fail($order_id);
    $this->recv_direct_order_pay_fail();
  }

  public function send_direct_order_pay_fail($order_id)
  {
    $args = new \EUS\ElemeUserService_direct_order_pay_fail_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'direct_order_pay_fail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('direct_order_pay_fail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_direct_order_pay_fail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_direct_order_pay_fail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_direct_order_pay_fail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function direct_order_pay_fail_new($order_id)
  {
    $this->send_direct_order_pay_fail_new($order_id);
    $this->recv_direct_order_pay_fail_new();
  }

  public function send_direct_order_pay_fail_new($order_id)
  {
    $args = new \EUS\ElemeUserService_direct_order_pay_fail_new_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'direct_order_pay_fail_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('direct_order_pay_fail_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_direct_order_pay_fail_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_direct_order_pay_fail_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_direct_order_pay_fail_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function pay_is_success($pay_record_id)
  {
    $this->send_pay_is_success($pay_record_id);
    return $this->recv_pay_is_success();
  }

  public function send_pay_is_success($pay_record_id)
  {
    $args = new \EUS\ElemeUserService_pay_is_success_args();
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_is_success', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_is_success', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_is_success()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_is_success_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_is_success_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("pay_is_success failed: unknown result");
  }

  public function pay_get_alipay_info()
  {
    $this->send_pay_get_alipay_info();
    return $this->recv_pay_get_alipay_info();
  }

  public function send_pay_get_alipay_info()
  {
    $args = new \EUS\ElemeUserService_pay_get_alipay_info_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_get_alipay_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_get_alipay_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_get_alipay_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_get_alipay_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_get_alipay_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("pay_get_alipay_info failed: unknown result");
  }

  public function pay_get_today_payment($user_id)
  {
    $this->send_pay_get_today_payment($user_id);
    return $this->recv_pay_get_today_payment();
  }

  public function send_pay_get_today_payment($user_id)
  {
    $args = new \EUS\ElemeUserService_pay_get_today_payment_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'pay_get_today_payment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('pay_get_today_payment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_pay_get_today_payment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_pay_get_today_payment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_pay_get_today_payment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("pay_get_today_payment failed: unknown result");
  }

  public function withdraw_set_fatal($withdraw_id, $remark)
  {
    $this->send_withdraw_set_fatal($withdraw_id, $remark);
    $this->recv_withdraw_set_fatal();
  }

  public function send_withdraw_set_fatal($withdraw_id, $remark)
  {
    $args = new \EUS\ElemeUserService_withdraw_set_fatal_args();
    $args->withdraw_id = $withdraw_id;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'withdraw_set_fatal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('withdraw_set_fatal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_withdraw_set_fatal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_withdraw_set_fatal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_withdraw_set_fatal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function withdraw_get_apply_records()
  {
    $this->send_withdraw_get_apply_records();
    return $this->recv_withdraw_get_apply_records();
  }

  public function send_withdraw_get_apply_records()
  {
    $args = new \EUS\ElemeUserService_withdraw_get_apply_records_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'withdraw_get_apply_records', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('withdraw_get_apply_records', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_withdraw_get_apply_records()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_withdraw_get_apply_records_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_withdraw_get_apply_records_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("withdraw_get_apply_records failed: unknown result");
  }

  public function withdraw_restaurant_apply($restaurant_id, $process_user_id, $amount, $password)
  {
    $this->send_withdraw_restaurant_apply($restaurant_id, $process_user_id, $amount, $password);
    return $this->recv_withdraw_restaurant_apply();
  }

  public function send_withdraw_restaurant_apply($restaurant_id, $process_user_id, $amount, $password)
  {
    $args = new \EUS\ElemeUserService_withdraw_restaurant_apply_args();
    $args->restaurant_id = $restaurant_id;
    $args->process_user_id = $process_user_id;
    $args->amount = $amount;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'withdraw_restaurant_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('withdraw_restaurant_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_withdraw_restaurant_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_withdraw_restaurant_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_withdraw_restaurant_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("withdraw_restaurant_apply failed: unknown result");
  }

  public function submit_withdraw_record($withdraw_id)
  {
    $this->send_submit_withdraw_record($withdraw_id);
    $this->recv_submit_withdraw_record();
  }

  public function send_submit_withdraw_record($withdraw_id)
  {
    $args = new \EUS\ElemeUserService_submit_withdraw_record_args();
    $args->withdraw_id = $withdraw_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'submit_withdraw_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('submit_withdraw_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_submit_withdraw_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_submit_withdraw_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_submit_withdraw_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function check_withdraw_record($withdraw_id)
  {
    $this->send_check_withdraw_record($withdraw_id);
    $this->recv_check_withdraw_record();
  }

  public function send_check_withdraw_record($withdraw_id)
  {
    $args = new \EUS\ElemeUserService_check_withdraw_record_args();
    $args->withdraw_id = $withdraw_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_withdraw_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_withdraw_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_withdraw_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_check_withdraw_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_check_withdraw_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function withdraw_user_drawback($user_id, $process_user_id, $amount)
  {
    $this->send_withdraw_user_drawback($user_id, $process_user_id, $amount);
    $this->recv_withdraw_user_drawback();
  }

  public function send_withdraw_user_drawback($user_id, $process_user_id, $amount)
  {
    $args = new \EUS\ElemeUserService_withdraw_user_drawback_args();
    $args->user_id = $user_id;
    $args->process_user_id = $process_user_id;
    $args->amount = $amount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'withdraw_user_drawback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('withdraw_user_drawback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_withdraw_user_drawback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_withdraw_user_drawback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_withdraw_user_drawback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function anonymous_user_drawback($order_id)
  {
    $this->send_anonymous_user_drawback($order_id);
    $this->recv_anonymous_user_drawback();
  }

  public function send_anonymous_user_drawback($order_id)
  {
    $args = new \EUS\ElemeUserService_anonymous_user_drawback_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'anonymous_user_drawback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('anonymous_user_drawback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_anonymous_user_drawback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_anonymous_user_drawback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_anonymous_user_drawback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_alipay_refund_apply_info($batch_no)
  {
    $this->send_get_alipay_refund_apply_info($batch_no);
    return $this->recv_get_alipay_refund_apply_info();
  }

  public function send_get_alipay_refund_apply_info($batch_no)
  {
    $args = new \EUS\ElemeUserService_get_alipay_refund_apply_info_args();
    $args->batch_no = $batch_no;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_alipay_refund_apply_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_alipay_refund_apply_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_alipay_refund_apply_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_alipay_refund_apply_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_alipay_refund_apply_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_alipay_refund_apply_info failed: unknown result");
  }

  public function query_alipay_unprocessed_batch()
  {
    $this->send_query_alipay_unprocessed_batch();
    return $this->recv_query_alipay_unprocessed_batch();
  }

  public function send_query_alipay_unprocessed_batch()
  {
    $args = new \EUS\ElemeUserService_query_alipay_unprocessed_batch_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_alipay_unprocessed_batch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_alipay_unprocessed_batch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_alipay_unprocessed_batch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_alipay_unprocessed_batch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_alipay_unprocessed_batch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_alipay_unprocessed_batch failed: unknown result");
  }

  public function alipay_drawback_process_notify(\EUS\TCDrawbackProcessNotify $drawback_process_notify)
  {
    $this->send_alipay_drawback_process_notify($drawback_process_notify);
    $this->recv_alipay_drawback_process_notify();
  }

  public function send_alipay_drawback_process_notify(\EUS\TCDrawbackProcessNotify $drawback_process_notify)
  {
    $args = new \EUS\ElemeUserService_alipay_drawback_process_notify_args();
    $args->drawback_process_notify = $drawback_process_notify;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'alipay_drawback_process_notify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('alipay_drawback_process_notify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_alipay_drawback_process_notify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_alipay_drawback_process_notify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_alipay_drawback_process_notify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function query_drawback_process_record(\EUS\TDrawbackProcessRecordQuery $query_struct)
  {
    $this->send_query_drawback_process_record($query_struct);
    return $this->recv_query_drawback_process_record();
  }

  public function send_query_drawback_process_record(\EUS\TDrawbackProcessRecordQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_drawback_process_record_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_drawback_process_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_drawback_process_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_drawback_process_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_drawback_process_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_drawback_process_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_drawback_process_record failed: unknown result");
  }

  public function retry_drawback_process($drawback_process_id, $process_user_id, $pay_platform, $pay_account)
  {
    $this->send_retry_drawback_process($drawback_process_id, $process_user_id, $pay_platform, $pay_account);
    $this->recv_retry_drawback_process();
  }

  public function send_retry_drawback_process($drawback_process_id, $process_user_id, $pay_platform, $pay_account)
  {
    $args = new \EUS\ElemeUserService_retry_drawback_process_args();
    $args->drawback_process_id = $drawback_process_id;
    $args->process_user_id = $process_user_id;
    $args->pay_platform = $pay_platform;
    $args->pay_account = $pay_account;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'retry_drawback_process', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('retry_drawback_process', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_retry_drawback_process()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_retry_drawback_process_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_retry_drawback_process_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function drawback_process_manually_success($drawback_process_id, $image_hash)
  {
    $this->send_drawback_process_manually_success($drawback_process_id, $image_hash);
    $this->recv_drawback_process_manually_success();
  }

  public function send_drawback_process_manually_success($drawback_process_id, $image_hash)
  {
    $args = new \EUS\ElemeUserService_drawback_process_manually_success_args();
    $args->drawback_process_id = $drawback_process_id;
    $args->image_hash = $image_hash;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'drawback_process_manually_success', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('drawback_process_manually_success', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_drawback_process_manually_success()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_drawback_process_manually_success_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_drawback_process_manually_success_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_alipay_refund_url($batch_no)
  {
    $this->send_get_alipay_refund_url($batch_no);
    return $this->recv_get_alipay_refund_url();
  }

  public function send_get_alipay_refund_url($batch_no)
  {
    $args = new \EUS\ElemeUserService_get_alipay_refund_url_args();
    $args->batch_no = $batch_no;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_alipay_refund_url', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_alipay_refund_url', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_alipay_refund_url()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_alipay_refund_url_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_alipay_refund_url_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_alipay_refund_url failed: unknown result");
  }

  public function get_drawback_report()
  {
    $this->send_get_drawback_report();
    return $this->recv_get_drawback_report();
  }

  public function send_get_drawback_report()
  {
    $args = new \EUS\ElemeUserService_get_drawback_report_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_drawback_report', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_drawback_report', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_drawback_report()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_drawback_report_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_drawback_report_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_drawback_report failed: unknown result");
  }

  public function get_drawback_result_info($username, $order_id)
  {
    $this->send_get_drawback_result_info($username, $order_id);
    return $this->recv_get_drawback_result_info();
  }

  public function send_get_drawback_result_info($username, $order_id)
  {
    $args = new \EUS\ElemeUserService_get_drawback_result_info_args();
    $args->username = $username;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_drawback_result_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_drawback_result_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_drawback_result_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_drawback_result_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_drawback_result_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_drawback_result_info failed: unknown result");
  }

  public function get_drawback_result_info_new($username, $order_id)
  {
    $this->send_get_drawback_result_info_new($username, $order_id);
    return $this->recv_get_drawback_result_info_new();
  }

  public function send_get_drawback_result_info_new($username, $order_id)
  {
    $args = new \EUS\ElemeUserService_get_drawback_result_info_new_args();
    $args->username = $username;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_drawback_result_info_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_drawback_result_info_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_drawback_result_info_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_drawback_result_info_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_drawback_result_info_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_drawback_result_info_new failed: unknown result");
  }

  public function bankcard_bind_apply($user_id, $card_id, $bank_id, $cardholder_name, $password)
  {
    $this->send_bankcard_bind_apply($user_id, $card_id, $bank_id, $cardholder_name, $password);
    return $this->recv_bankcard_bind_apply();
  }

  public function send_bankcard_bind_apply($user_id, $card_id, $bank_id, $cardholder_name, $password)
  {
    $args = new \EUS\ElemeUserService_bankcard_bind_apply_args();
    $args->user_id = $user_id;
    $args->card_id = $card_id;
    $args->bank_id = $bank_id;
    $args->cardholder_name = $cardholder_name;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bankcard_bind_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bankcard_bind_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bankcard_bind_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bankcard_bind_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bankcard_bind_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("bankcard_bind_apply failed: unknown result");
  }

  public function bankcard_bind_update($user_id, $card_id, $bank_id, $cardholder_name, $password)
  {
    $this->send_bankcard_bind_update($user_id, $card_id, $bank_id, $cardholder_name, $password);
    $this->recv_bankcard_bind_update();
  }

  public function send_bankcard_bind_update($user_id, $card_id, $bank_id, $cardholder_name, $password)
  {
    $args = new \EUS\ElemeUserService_bankcard_bind_update_args();
    $args->user_id = $user_id;
    $args->card_id = $card_id;
    $args->bank_id = $bank_id;
    $args->cardholder_name = $cardholder_name;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bankcard_bind_update', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bankcard_bind_update', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bankcard_bind_update()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bankcard_bind_update_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bankcard_bind_update_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bankcard_bind_approve($record_id)
  {
    $this->send_bankcard_bind_approve($record_id);
    $this->recv_bankcard_bind_approve();
  }

  public function send_bankcard_bind_approve($record_id)
  {
    $args = new \EUS\ElemeUserService_bankcard_bind_approve_args();
    $args->record_id = $record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bankcard_bind_approve', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bankcard_bind_approve', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bankcard_bind_approve()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bankcard_bind_approve_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bankcard_bind_approve_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bankcard_bind_overrule($record_id)
  {
    $this->send_bankcard_bind_overrule($record_id);
    $this->recv_bankcard_bind_overrule();
  }

  public function send_bankcard_bind_overrule($record_id)
  {
    $args = new \EUS\ElemeUserService_bankcard_bind_overrule_args();
    $args->record_id = $record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bankcard_bind_overrule', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bankcard_bind_overrule', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bankcard_bind_overrule()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bankcard_bind_overrule_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bankcard_bind_overrule_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bankcard_bind($user_id, $card_id, $bank_id, $cardholder_name)
  {
    $this->send_bankcard_bind($user_id, $card_id, $bank_id, $cardholder_name);
    $this->recv_bankcard_bind();
  }

  public function send_bankcard_bind($user_id, $card_id, $bank_id, $cardholder_name)
  {
    $args = new \EUS\ElemeUserService_bankcard_bind_args();
    $args->user_id = $user_id;
    $args->card_id = $card_id;
    $args->bank_id = $bank_id;
    $args->cardholder_name = $cardholder_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bankcard_bind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bankcard_bind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bankcard_bind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bankcard_bind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bankcard_bind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function balance_reconciliation()
  {
    $this->send_balance_reconciliation();
    $this->recv_balance_reconciliation();
  }

  public function send_balance_reconciliation()
  {
    $args = new \EUS\ElemeUserService_balance_reconciliation_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'balance_reconciliation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('balance_reconciliation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_balance_reconciliation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_balance_reconciliation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_balance_reconciliation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function generate_hongbao_exchange($batch_sn, $count, $value, $sum_condition, $duration, $expire_date)
  {
    $this->send_generate_hongbao_exchange($batch_sn, $count, $value, $sum_condition, $duration, $expire_date);
    return $this->recv_generate_hongbao_exchange();
  }

  public function send_generate_hongbao_exchange($batch_sn, $count, $value, $sum_condition, $duration, $expire_date)
  {
    $args = new \EUS\ElemeUserService_generate_hongbao_exchange_args();
    $args->batch_sn = $batch_sn;
    $args->count = $count;
    $args->value = $value;
    $args->sum_condition = $sum_condition;
    $args->duration = $duration;
    $args->expire_date = $expire_date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_hongbao_exchange', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_hongbao_exchange', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_hongbao_exchange()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_generate_hongbao_exchange_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_generate_hongbao_exchange_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("generate_hongbao_exchange failed: unknown result");
  }

  public function generate_hongbao($user_ids, \EUS\THongbao $query_struct)
  {
    $this->send_generate_hongbao($user_ids, $query_struct);
    $this->recv_generate_hongbao();
  }

  public function send_generate_hongbao($user_ids, \EUS\THongbao $query_struct)
  {
    $args = new \EUS\ElemeUserService_generate_hongbao_args();
    $args->user_ids = $user_ids;
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_generate_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_generate_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function generate_restaurant_activity_hongbao($order_id)
  {
    $this->send_generate_restaurant_activity_hongbao($order_id);
    $this->recv_generate_restaurant_activity_hongbao();
  }

  public function send_generate_restaurant_activity_hongbao($order_id)
  {
    $args = new \EUS\ElemeUserService_generate_restaurant_activity_hongbao_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_restaurant_activity_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_restaurant_activity_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_restaurant_activity_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_generate_restaurant_activity_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_generate_restaurant_activity_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function exchange_hongbao($user_id, $exchange_code)
  {
    $this->send_exchange_hongbao($user_id, $exchange_code);
    return $this->recv_exchange_hongbao();
  }

  public function send_exchange_hongbao($user_id, $exchange_code)
  {
    $args = new \EUS\ElemeUserService_exchange_hongbao_args();
    $args->user_id = $user_id;
    $args->exchange_code = $exchange_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'exchange_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('exchange_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_exchange_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_exchange_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_exchange_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("exchange_hongbao failed: unknown result");
  }

  public function charge_hongbao($pay_record_id)
  {
    $this->send_charge_hongbao($pay_record_id);
    $this->recv_charge_hongbao();
  }

  public function send_charge_hongbao($pay_record_id)
  {
    $args = new \EUS\ElemeUserService_charge_hongbao_args();
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'charge_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('charge_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_charge_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_charge_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_charge_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function new_user_hongbao($user_id, $order_id)
  {
    $this->send_new_user_hongbao($user_id, $order_id);
    $this->recv_new_user_hongbao();
  }

  public function send_new_user_hongbao($user_id, $order_id)
  {
    $args = new \EUS\ElemeUserService_new_user_hongbao_args();
    $args->user_id = $user_id;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'new_user_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('new_user_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_new_user_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_new_user_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_new_user_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function bind_mobile_hongbao($user_id, $phone)
  {
    $this->send_bind_mobile_hongbao($user_id, $phone);
    $this->recv_bind_mobile_hongbao();
  }

  public function send_bind_mobile_hongbao($user_id, $phone)
  {
    $args = new \EUS\ElemeUserService_bind_mobile_hongbao_args();
    $args->user_id = $user_id;
    $args->phone = $phone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bind_mobile_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bind_mobile_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bind_mobile_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_bind_mobile_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_bind_mobile_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function award_refer_hongbao($refer_ids)
  {
    $this->send_award_refer_hongbao($refer_ids);
    $this->recv_award_refer_hongbao();
  }

  public function send_award_refer_hongbao($refer_ids)
  {
    $args = new \EUS\ElemeUserService_award_refer_hongbao_args();
    $args->refer_ids = $refer_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'award_refer_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('award_refer_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_award_refer_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_award_refer_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_award_refer_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function punish_refers($refer_ids)
  {
    $this->send_punish_refers($refer_ids);
    $this->recv_punish_refers();
  }

  public function send_punish_refers($refer_ids)
  {
    $args = new \EUS\ElemeUserService_punish_refers_args();
    $args->refer_ids = $refer_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'punish_refers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('punish_refers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_punish_refers()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_punish_refers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_punish_refers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function award_refer_bind_mobile_hongbao($refer_id)
  {
    $this->send_award_refer_bind_mobile_hongbao($refer_id);
    $this->recv_award_refer_bind_mobile_hongbao();
  }

  public function send_award_refer_bind_mobile_hongbao($refer_id)
  {
    $args = new \EUS\ElemeUserService_award_refer_bind_mobile_hongbao_args();
    $args->refer_id = $refer_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'award_refer_bind_mobile_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('award_refer_bind_mobile_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_award_refer_bind_mobile_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_award_refer_bind_mobile_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_award_refer_bind_mobile_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function user_certification_apply($user_id, \EUS\TUserCertificationApply $user_certification_struct)
  {
    $this->send_user_certification_apply($user_id, $user_certification_struct);
    $this->recv_user_certification_apply();
  }

  public function send_user_certification_apply($user_id, \EUS\TUserCertificationApply $user_certification_struct)
  {
    $args = new \EUS\ElemeUserService_user_certification_apply_args();
    $args->user_id = $user_id;
    $args->user_certification_struct = $user_certification_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'user_certification_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('user_certification_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_user_certification_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_user_certification_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_user_certification_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_user_certification($user_id, $to_status, $remark, $process_user_id)
  {
    $this->send_process_user_certification($user_id, $to_status, $remark, $process_user_id);
    $this->recv_process_user_certification();
  }

  public function send_process_user_certification($user_id, $to_status, $remark, $process_user_id)
  {
    $args = new \EUS\ElemeUserService_process_user_certification_args();
    $args->user_id = $user_id;
    $args->to_status = $to_status;
    $args->remark = $remark;
    $args->process_user_id = $process_user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_user_certification', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_user_certification', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_user_certification()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_user_certification_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_user_certification_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_user_certification($user_id)
  {
    $this->send_get_user_certification($user_id);
    return $this->recv_get_user_certification();
  }

  public function send_get_user_certification($user_id)
  {
    $args = new \EUS\ElemeUserService_get_user_certification_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_certification', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_certification', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_certification()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_certification_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_certification_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_certification failed: unknown result");
  }

  public function query_user_certification_process_records($user_id)
  {
    $this->send_query_user_certification_process_records($user_id);
    return $this->recv_query_user_certification_process_records();
  }

  public function send_query_user_certification_process_records($user_id)
  {
    $args = new \EUS\ElemeUserService_query_user_certification_process_records_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_user_certification_process_records', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_user_certification_process_records', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_user_certification_process_records()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_user_certification_process_records_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_user_certification_process_records_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_user_certification_process_records failed: unknown result");
  }

  public function post_process_user_certification($record_id)
  {
    $this->send_post_process_user_certification($record_id);
    $this->recv_post_process_user_certification();
  }

  public function send_post_process_user_certification($record_id)
  {
    $args = new \EUS\ElemeUserService_post_process_user_certification_args();
    $args->record_id = $record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'post_process_user_certification', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('post_process_user_certification', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_post_process_user_certification()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_post_process_user_certification_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_post_process_user_certification_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function new_user_bankcard_apply($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name)
  {
    $this->send_new_user_bankcard_apply($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name);
    $this->recv_new_user_bankcard_apply();
  }

  public function send_new_user_bankcard_apply($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name)
  {
    $args = new \EUS\ElemeUserService_new_user_bankcard_apply_args();
    $args->user_id = $user_id;
    $args->card_id = $card_id;
    $args->bank_id = $bank_id;
    $args->cardholder_name = $cardholder_name;
    $args->city_name = $city_name;
    $args->branch_name = $branch_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'new_user_bankcard_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('new_user_bankcard_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_new_user_bankcard_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_new_user_bankcard_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_new_user_bankcard_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_user_bankcard($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $process_user_id)
  {
    $this->send_update_user_bankcard($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $process_user_id);
    $this->recv_update_user_bankcard();
  }

  public function send_update_user_bankcard($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $process_user_id)
  {
    $args = new \EUS\ElemeUserService_update_user_bankcard_args();
    $args->user_id = $user_id;
    $args->card_id = $card_id;
    $args->bank_id = $bank_id;
    $args->cardholder_name = $cardholder_name;
    $args->city_name = $city_name;
    $args->branch_name = $branch_name;
    $args->process_user_id = $process_user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_user_bankcard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_user_bankcard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_user_bankcard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_user_bankcard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_user_bankcard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function update_user_bankcard_by_user($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $password)
  {
    $this->send_update_user_bankcard_by_user($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $password);
    $this->recv_update_user_bankcard_by_user();
  }

  public function send_update_user_bankcard_by_user($user_id, $card_id, $bank_id, $cardholder_name, $city_name, $branch_name, $password)
  {
    $args = new \EUS\ElemeUserService_update_user_bankcard_by_user_args();
    $args->user_id = $user_id;
    $args->card_id = $card_id;
    $args->bank_id = $bank_id;
    $args->cardholder_name = $cardholder_name;
    $args->city_name = $city_name;
    $args->branch_name = $branch_name;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_user_bankcard_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_user_bankcard_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_user_bankcard_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_update_user_bankcard_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_update_user_bankcard_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function query_user_certification(\EUS\TUserCertificationQuery $query_struct)
  {
    $this->send_query_user_certification($query_struct);
    return $this->recv_query_user_certification();
  }

  public function send_query_user_certification(\EUS\TUserCertificationQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_user_certification_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_user_certification', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_user_certification', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_user_certification()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_user_certification_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_user_certification_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_user_certification failed: unknown result");
  }

  public function count_user_certification(\EUS\TUserCertificationQuery $query_struct)
  {
    $this->send_count_user_certification($query_struct);
    return $this->recv_count_user_certification();
  }

  public function send_count_user_certification(\EUS\TUserCertificationQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_count_user_certification_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_user_certification', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_user_certification', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_user_certification()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_user_certification_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_user_certification_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_user_certification failed: unknown result");
  }

  public function sso_create($user_id, $sso_type, $info_raw, $ip_addr)
  {
    $this->send_sso_create($user_id, $sso_type, $info_raw, $ip_addr);
    return $this->recv_sso_create();
  }

  public function send_sso_create($user_id, $sso_type, $info_raw, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_sso_create_args();
    $args->user_id = $user_id;
    $args->sso_type = $sso_type;
    $args->info_raw = $info_raw;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_create', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_create', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_create()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_create_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_create_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_create failed: unknown result");
  }

  public function sso_is_tfauthed($sso_id)
  {
    $this->send_sso_is_tfauthed($sso_id);
    return $this->recv_sso_is_tfauthed();
  }

  public function send_sso_is_tfauthed($sso_id)
  {
    $args = new \EUS\ElemeUserService_sso_is_tfauthed_args();
    $args->sso_id = $sso_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_is_tfauthed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_is_tfauthed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_is_tfauthed()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_is_tfauthed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_is_tfauthed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_is_tfauthed failed: unknown result");
  }

  public function sso_tfauth($sso_id)
  {
    $this->send_sso_tfauth($sso_id);
    return $this->recv_sso_tfauth();
  }

  public function send_sso_tfauth($sso_id)
  {
    $args = new \EUS\ElemeUserService_sso_tfauth_args();
    $args->sso_id = $sso_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_tfauth', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_tfauth', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_tfauth()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_tfauth_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_tfauth_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_tfauth failed: unknown result");
  }

  public function sso_destroy($sso_id, $action, $user_id, $ip_addr)
  {
    $this->send_sso_destroy($sso_id, $action, $user_id, $ip_addr);
    return $this->recv_sso_destroy();
  }

  public function send_sso_destroy($sso_id, $action, $user_id, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_sso_destroy_args();
    $args->sso_id = $sso_id;
    $args->action = $action;
    $args->user_id = $user_id;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_destroy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_destroy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_destroy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_destroy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_destroy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_destroy failed: unknown result");
  }

  public function sso_destroy_admin($sso_id, $action, $op_user_id, $ip_addr)
  {
    $this->send_sso_destroy_admin($sso_id, $action, $op_user_id, $ip_addr);
    return $this->recv_sso_destroy_admin();
  }

  public function send_sso_destroy_admin($sso_id, $action, $op_user_id, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_sso_destroy_admin_args();
    $args->sso_id = $sso_id;
    $args->action = $action;
    $args->op_user_id = $op_user_id;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_destroy_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_destroy_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_destroy_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_destroy_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_destroy_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_destroy_admin failed: unknown result");
  }

  public function sso_destroy_system($sso_id, $action)
  {
    $this->send_sso_destroy_system($sso_id, $action);
    return $this->recv_sso_destroy_system();
  }

  public function send_sso_destroy_system($sso_id, $action)
  {
    $args = new \EUS\ElemeUserService_sso_destroy_system_args();
    $args->sso_id = $sso_id;
    $args->action = $action;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_destroy_system', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_destroy_system', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_destroy_system()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_destroy_system_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_destroy_system_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_destroy_system failed: unknown result");
  }

  public function sso_check($sso_id, $sso_app, $info_raw, $ip_addr)
  {
    $this->send_sso_check($sso_id, $sso_app, $info_raw, $ip_addr);
    return $this->recv_sso_check();
  }

  public function send_sso_check($sso_id, $sso_app, $info_raw, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_sso_check_args();
    $args->sso_id = $sso_id;
    $args->sso_app = $sso_app;
    $args->info_raw = $info_raw;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_check', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_check', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_check()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_check_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_check_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_check failed: unknown result");
  }

  public function sso_count_valid($user_id)
  {
    $this->send_sso_count_valid($user_id);
    return $this->recv_sso_count_valid();
  }

  public function send_sso_count_valid($user_id)
  {
    $args = new \EUS\ElemeUserService_sso_count_valid_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_count_valid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_count_valid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_count_valid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_count_valid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_count_valid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_count_valid failed: unknown result");
  }

  public function sso_mget($user_id, $is_valid, $start_date, $end_date)
  {
    $this->send_sso_mget($user_id, $is_valid, $start_date, $end_date);
    return $this->recv_sso_mget();
  }

  public function send_sso_mget($user_id, $is_valid, $start_date, $end_date)
  {
    $args = new \EUS\ElemeUserService_sso_mget_args();
    $args->user_id = $user_id;
    $args->is_valid = $is_valid;
    $args->start_date = $start_date;
    $args->end_date = $end_date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sso_mget', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sso_mget', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sso_mget()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sso_mget_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sso_mget_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sso_mget failed: unknown result");
  }

  public function ucb_create($user_id, $info_raw, $ip_addr)
  {
    $this->send_ucb_create($user_id, $info_raw, $ip_addr);
    return $this->recv_ucb_create();
  }

  public function send_ucb_create($user_id, $info_raw, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_ucb_create_args();
    $args->user_id = $user_id;
    $args->info_raw = $info_raw;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ucb_create', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ucb_create', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ucb_create()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_ucb_create_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_ucb_create_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ucb_create failed: unknown result");
  }

  public function ucb_destroy($ucb_id, $action, $user_id, $ip_addr)
  {
    $this->send_ucb_destroy($ucb_id, $action, $user_id, $ip_addr);
    return $this->recv_ucb_destroy();
  }

  public function send_ucb_destroy($ucb_id, $action, $user_id, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_ucb_destroy_args();
    $args->ucb_id = $ucb_id;
    $args->action = $action;
    $args->user_id = $user_id;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ucb_destroy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ucb_destroy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ucb_destroy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_ucb_destroy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_ucb_destroy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ucb_destroy failed: unknown result");
  }

  public function ucb_destroy_admin($ucb_id, $action, $admin_user_id, $ip_addr)
  {
    $this->send_ucb_destroy_admin($ucb_id, $action, $admin_user_id, $ip_addr);
    return $this->recv_ucb_destroy_admin();
  }

  public function send_ucb_destroy_admin($ucb_id, $action, $admin_user_id, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_ucb_destroy_admin_args();
    $args->ucb_id = $ucb_id;
    $args->action = $action;
    $args->admin_user_id = $admin_user_id;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ucb_destroy_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ucb_destroy_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ucb_destroy_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_ucb_destroy_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_ucb_destroy_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ucb_destroy_admin failed: unknown result");
  }

  public function ucb_destroy_system($ucb_id, $action)
  {
    $this->send_ucb_destroy_system($ucb_id, $action);
    return $this->recv_ucb_destroy_system();
  }

  public function send_ucb_destroy_system($ucb_id, $action)
  {
    $args = new \EUS\ElemeUserService_ucb_destroy_system_args();
    $args->ucb_id = $ucb_id;
    $args->action = $action;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ucb_destroy_system', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ucb_destroy_system', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ucb_destroy_system()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_ucb_destroy_system_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_ucb_destroy_system_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ucb_destroy_system failed: unknown result");
  }

  public function ucb_check($ucb_ids, $user_id, $info_raw, $ip_addr)
  {
    $this->send_ucb_check($ucb_ids, $user_id, $info_raw, $ip_addr);
    return $this->recv_ucb_check();
  }

  public function send_ucb_check($ucb_ids, $user_id, $info_raw, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_ucb_check_args();
    $args->ucb_ids = $ucb_ids;
    $args->user_id = $user_id;
    $args->info_raw = $info_raw;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ucb_check', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ucb_check', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ucb_check()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_ucb_check_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_ucb_check_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ucb_check failed: unknown result");
  }

  public function ucb_mget($user_id, $is_valid, $start_date, $end_date)
  {
    $this->send_ucb_mget($user_id, $is_valid, $start_date, $end_date);
    return $this->recv_ucb_mget();
  }

  public function send_ucb_mget($user_id, $is_valid, $start_date, $end_date)
  {
    $args = new \EUS\ElemeUserService_ucb_mget_args();
    $args->user_id = $user_id;
    $args->is_valid = $is_valid;
    $args->start_date = $start_date;
    $args->end_date = $end_date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ucb_mget', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ucb_mget', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ucb_mget()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_ucb_mget_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_ucb_mget_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ucb_mget failed: unknown result");
  }

  public function umcb_create($user_id, $mobile, $info_raw, $ip_addr)
  {
    $this->send_umcb_create($user_id, $mobile, $info_raw, $ip_addr);
    return $this->recv_umcb_create();
  }

  public function send_umcb_create($user_id, $mobile, $info_raw, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_umcb_create_args();
    $args->user_id = $user_id;
    $args->mobile = $mobile;
    $args->info_raw = $info_raw;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'umcb_create', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('umcb_create', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_umcb_create()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_umcb_create_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_umcb_create_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("umcb_create failed: unknown result");
  }

  public function umcb_check($user_id, $mobile, $info_raw, $ip_addr)
  {
    $this->send_umcb_check($user_id, $mobile, $info_raw, $ip_addr);
    return $this->recv_umcb_check();
  }

  public function send_umcb_check($user_id, $mobile, $info_raw, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_umcb_check_args();
    $args->user_id = $user_id;
    $args->mobile = $mobile;
    $args->info_raw = $info_raw;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'umcb_check', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('umcb_check', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_umcb_check()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_umcb_check_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_umcb_check_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("umcb_check failed: unknown result");
  }

  public function umb_create($user_id, $mobile)
  {
    $this->send_umb_create($user_id, $mobile);
    return $this->recv_umb_create();
  }

  public function send_umb_create($user_id, $mobile)
  {
    $args = new \EUS\ElemeUserService_umb_create_args();
    $args->user_id = $user_id;
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'umb_create', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('umb_create', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_umb_create()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_umb_create_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_umb_create_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("umb_create failed: unknown result");
  }

  public function umb_destroy_admin($umb_id, $action, $admin_user_id, $ip_addr)
  {
    $this->send_umb_destroy_admin($umb_id, $action, $admin_user_id, $ip_addr);
    return $this->recv_umb_destroy_admin();
  }

  public function send_umb_destroy_admin($umb_id, $action, $admin_user_id, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_umb_destroy_admin_args();
    $args->umb_id = $umb_id;
    $args->action = $action;
    $args->admin_user_id = $admin_user_id;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'umb_destroy_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('umb_destroy_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_umb_destroy_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_umb_destroy_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_umb_destroy_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("umb_destroy_admin failed: unknown result");
  }

  public function umb_mget($user_id, $mobile, $is_valid)
  {
    $this->send_umb_mget($user_id, $mobile, $is_valid);
    return $this->recv_umb_mget();
  }

  public function send_umb_mget($user_id, $mobile, $is_valid)
  {
    $args = new \EUS\ElemeUserService_umb_mget_args();
    $args->user_id = $user_id;
    $args->mobile = $mobile;
    $args->is_valid = $is_valid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'umb_mget', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('umb_mget', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_umb_mget()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_umb_mget_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_umb_mget_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("umb_mget failed: unknown result");
  }

  public function mcb_destroy_admin($mcb_id, $action, $admin_user_id, $ip_addr)
  {
    $this->send_mcb_destroy_admin($mcb_id, $action, $admin_user_id, $ip_addr);
    return $this->recv_mcb_destroy_admin();
  }

  public function send_mcb_destroy_admin($mcb_id, $action, $admin_user_id, $ip_addr)
  {
    $args = new \EUS\ElemeUserService_mcb_destroy_admin_args();
    $args->mcb_id = $mcb_id;
    $args->action = $action;
    $args->admin_user_id = $admin_user_id;
    $args->ip_addr = $ip_addr;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mcb_destroy_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mcb_destroy_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mcb_destroy_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mcb_destroy_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mcb_destroy_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mcb_destroy_admin failed: unknown result");
  }

  public function mcb_destroy_system($mcb_id, $action)
  {
    $this->send_mcb_destroy_system($mcb_id, $action);
    return $this->recv_mcb_destroy_system();
  }

  public function send_mcb_destroy_system($mcb_id, $action)
  {
    $args = new \EUS\ElemeUserService_mcb_destroy_system_args();
    $args->mcb_id = $mcb_id;
    $args->action = $action;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mcb_destroy_system', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mcb_destroy_system', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mcb_destroy_system()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mcb_destroy_system_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mcb_destroy_system_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mcb_destroy_system failed: unknown result");
  }

  public function mcb_mget($mobile, $is_valid, $start_date, $end_date)
  {
    $this->send_mcb_mget($mobile, $is_valid, $start_date, $end_date);
    return $this->recv_mcb_mget();
  }

  public function send_mcb_mget($mobile, $is_valid, $start_date, $end_date)
  {
    $args = new \EUS\ElemeUserService_mcb_mget_args();
    $args->mobile = $mobile;
    $args->is_valid = $is_valid;
    $args->start_date = $start_date;
    $args->end_date = $end_date;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mcb_mget', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mcb_mget', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mcb_mget()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mcb_mget_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mcb_mget_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mcb_mget failed: unknown result");
  }

  public function add_blocked_device($eleme_device_id, $user_id, $operator_user_id, $reason, $come_from)
  {
    $this->send_add_blocked_device($eleme_device_id, $user_id, $operator_user_id, $reason, $come_from);
    $this->recv_add_blocked_device();
  }

  public function send_add_blocked_device($eleme_device_id, $user_id, $operator_user_id, $reason, $come_from)
  {
    $args = new \EUS\ElemeUserService_add_blocked_device_args();
    $args->eleme_device_id = $eleme_device_id;
    $args->user_id = $user_id;
    $args->operator_user_id = $operator_user_id;
    $args->reason = $reason;
    $args->come_from = $come_from;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_blocked_device', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_blocked_device', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_blocked_device()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_add_blocked_device_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_add_blocked_device_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_pay_discount_map($come_from)
  {
    $this->send_get_pay_discount_map($come_from);
    return $this->recv_get_pay_discount_map();
  }

  public function send_get_pay_discount_map($come_from)
  {
    $args = new \EUS\ElemeUserService_get_pay_discount_map_args();
    $args->come_from = $come_from;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pay_discount_map', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pay_discount_map', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pay_discount_map()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_pay_discount_map_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_pay_discount_map_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_pay_discount_map failed: unknown result");
  }

  public function clean_timeout_message()
  {
    $this->send_clean_timeout_message();
    $this->recv_clean_timeout_message();
  }

  public function send_clean_timeout_message()
  {
    $args = new \EUS\ElemeUserService_clean_timeout_message_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clean_timeout_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clean_timeout_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clean_timeout_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_clean_timeout_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_clean_timeout_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function clean_outofdate_message()
  {
    $this->send_clean_outofdate_message();
    $this->recv_clean_outofdate_message();
  }

  public function send_clean_outofdate_message()
  {
    $args = new \EUS\ElemeUserService_clean_outofdate_message_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clean_outofdate_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clean_outofdate_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clean_outofdate_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_clean_outofdate_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_clean_outofdate_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function back_up_mysql_task()
  {
    $this->send_back_up_mysql_task();
    $this->recv_back_up_mysql_task();
  }

  public function send_back_up_mysql_task()
  {
    $args = new \EUS\ElemeUserService_back_up_mysql_task_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'back_up_mysql_task', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('back_up_mysql_task', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_back_up_mysql_task()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_back_up_mysql_task_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_back_up_mysql_task_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function clean_timeout_mysql_task()
  {
    $this->send_clean_timeout_mysql_task();
    $this->recv_clean_timeout_mysql_task();
  }

  public function send_clean_timeout_mysql_task()
  {
    $args = new \EUS\ElemeUserService_clean_timeout_mysql_task_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clean_timeout_mysql_task', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clean_timeout_mysql_task', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clean_timeout_mysql_task()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_clean_timeout_mysql_task_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_clean_timeout_mysql_task_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_post_make_order($order_id)
  {
    $this->send_signal_post_make_order($order_id);
    $this->recv_signal_post_make_order();
  }

  public function send_signal_post_make_order($order_id)
  {
    $args = new \EUS\ElemeUserService_signal_post_make_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_post_make_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_post_make_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_post_make_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_signal_post_make_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_signal_post_make_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_post_process_order($order_process_record_id)
  {
    $this->send_signal_post_process_order($order_process_record_id);
    $this->recv_signal_post_process_order();
  }

  public function send_signal_post_process_order($order_process_record_id)
  {
    $args = new \EUS\ElemeUserService_signal_post_process_order_args();
    $args->order_process_record_id = $order_process_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_post_process_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_post_process_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_post_process_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_signal_post_process_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_signal_post_process_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_claim_order($order_id, $user_id)
  {
    $this->send_process_claim_order($order_id, $user_id);
    $this->recv_process_claim_order();
  }

  public function send_process_claim_order($order_id, $user_id)
  {
    $args = new \EUS\ElemeUserService_process_claim_order_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_claim_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_claim_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_claim_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_claim_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_claim_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_push_android_message($msg_id)
  {
    $this->send_process_push_android_message($msg_id);
    $this->recv_process_push_android_message();
  }

  public function send_process_push_android_message($msg_id)
  {
    $args = new \EUS\ElemeUserService_process_push_android_message_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_push_android_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_push_android_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_push_android_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_push_android_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_push_android_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_push_ios_message($msg_id)
  {
    $this->send_process_push_ios_message($msg_id);
    $this->recv_process_push_ios_message();
  }

  public function send_process_push_ios_message($msg_id)
  {
    $args = new \EUS\ElemeUserService_process_push_ios_message_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_push_ios_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_push_ios_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_push_ios_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_push_ios_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_push_ios_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_add_user_message($message_type, $target_id)
  {
    $this->send_process_add_user_message($message_type, $target_id);
    $this->recv_process_add_user_message();
  }

  public function send_process_add_user_message($message_type, $target_id)
  {
    $args = new \EUS\ElemeUserService_process_add_user_message_args();
    $args->message_type = $message_type;
    $args->target_id = $target_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_add_user_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_add_user_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_add_user_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_add_user_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_add_user_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_quit_online_payment($restaurant_id, $user_id, $timestamp)
  {
    $this->send_process_quit_online_payment($restaurant_id, $user_id, $timestamp);
    $this->recv_process_quit_online_payment();
  }

  public function send_process_quit_online_payment($restaurant_id, $user_id, $timestamp)
  {
    $args = new \EUS\ElemeUserService_process_quit_online_payment_args();
    $args->restaurant_id = $restaurant_id;
    $args->user_id = $user_id;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_quit_online_payment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_quit_online_payment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_quit_online_payment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_quit_online_payment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_quit_online_payment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_post_refund_apply($order_id)
  {
    $this->send_process_post_refund_apply($order_id);
    $this->recv_process_post_refund_apply();
  }

  public function send_process_post_refund_apply($order_id)
  {
    $args = new \EUS\ElemeUserService_process_post_refund_apply_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_post_refund_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_post_refund_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_post_refund_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_post_refund_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_post_refund_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_post_settle_up_order($order_id)
  {
    $this->send_process_post_settle_up_order($order_id);
    $this->recv_process_post_settle_up_order();
  }

  public function send_process_post_settle_up_order($order_id)
  {
    $args = new \EUS\ElemeUserService_process_post_settle_up_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_post_settle_up_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_post_settle_up_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_post_settle_up_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_post_settle_up_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_post_settle_up_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function unsubscribe_order_sms($mobile)
  {
    $this->send_unsubscribe_order_sms($mobile);
    $this->recv_unsubscribe_order_sms();
  }

  public function send_unsubscribe_order_sms($mobile)
  {
    $args = new \EUS\ElemeUserService_unsubscribe_order_sms_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unsubscribe_order_sms', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unsubscribe_order_sms', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unsubscribe_order_sms()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_unsubscribe_order_sms_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_unsubscribe_order_sms_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_order_refund_fail($order_id)
  {
    $this->send_process_order_refund_fail($order_id);
    $this->recv_process_order_refund_fail();
  }

  public function send_process_order_refund_fail($order_id)
  {
    $args = new \EUS\ElemeUserService_process_order_refund_fail_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_order_refund_fail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_order_refund_fail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_order_refund_fail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_order_refund_fail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_order_refund_fail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_order_refund_success($order_id)
  {
    $this->send_process_order_refund_success($order_id);
    $this->recv_process_order_refund_success();
  }

  public function send_process_order_refund_success($order_id)
  {
    $args = new \EUS\ElemeUserService_process_order_refund_success_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_order_refund_success', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_order_refund_success', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_order_refund_success()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_process_order_refund_success_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_process_order_refund_success_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function invalid_order_income($order_id)
  {
    $this->send_invalid_order_income($order_id);
    $this->recv_invalid_order_income();
  }

  public function send_invalid_order_income($order_id)
  {
    $args = new \EUS\ElemeUserService_invalid_order_income_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'invalid_order_income', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('invalid_order_income', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_invalid_order_income()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_invalid_order_income_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_invalid_order_income_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function filter_drawbacked_anonymous_order_ids($order_ids)
  {
    $this->send_filter_drawbacked_anonymous_order_ids($order_ids);
    return $this->recv_filter_drawbacked_anonymous_order_ids();
  }

  public function send_filter_drawbacked_anonymous_order_ids($order_ids)
  {
    $args = new \EUS\ElemeUserService_filter_drawbacked_anonymous_order_ids_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'filter_drawbacked_anonymous_order_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('filter_drawbacked_anonymous_order_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_filter_drawbacked_anonymous_order_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_filter_drawbacked_anonymous_order_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_filter_drawbacked_anonymous_order_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("filter_drawbacked_anonymous_order_ids failed: unknown result");
  }

  public function has_permissions($user_id, $permissions, $is_strict)
  {
    $this->send_has_permissions($user_id, $permissions, $is_strict);
    return $this->recv_has_permissions();
  }

  public function send_has_permissions($user_id, $permissions, $is_strict)
  {
    $args = new \EUS\ElemeUserService_has_permissions_args();
    $args->user_id = $user_id;
    $args->permissions = $permissions;
    $args->is_strict = $is_strict;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'has_permissions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('has_permissions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_has_permissions()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_has_permissions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_has_permissions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("has_permissions failed: unknown result");
  }

  public function has_groups($user_id, $groups, $is_strict)
  {
    $this->send_has_groups($user_id, $groups, $is_strict);
    return $this->recv_has_groups();
  }

  public function send_has_groups($user_id, $groups, $is_strict)
  {
    $args = new \EUS\ElemeUserService_has_groups_args();
    $args->user_id = $user_id;
    $args->groups = $groups;
    $args->is_strict = $is_strict;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'has_groups', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('has_groups', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_has_groups()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_has_groups_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_has_groups_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("has_groups failed: unknown result");
  }

  public function clean_timout_message()
  {
    $this->send_clean_timout_message();
    $this->recv_clean_timout_message();
  }

  public function send_clean_timout_message()
  {
    $args = new \EUS\ElemeUserService_clean_timout_message_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clean_timout_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clean_timout_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clean_timout_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_clean_timout_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_clean_timout_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function send_restaurant_daily_balance_report($restaurant_id)
  {
    $this->send_send_restaurant_daily_balance_report($restaurant_id);
    $this->recv_send_restaurant_daily_balance_report();
  }

  public function send_send_restaurant_daily_balance_report($restaurant_id)
  {
    $args = new \EUS\ElemeUserService_send_restaurant_daily_balance_report_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_restaurant_daily_balance_report', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_restaurant_daily_balance_report', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_restaurant_daily_balance_report()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_restaurant_daily_balance_report_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_restaurant_daily_balance_report_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_user_refer_rank($user_id)
  {
    $this->send_get_user_refer_rank($user_id);
    return $this->recv_get_user_refer_rank();
  }

  public function send_get_user_refer_rank($user_id)
  {
    $args = new \EUS\ElemeUserService_get_user_refer_rank_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_refer_rank', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_refer_rank', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_refer_rank()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_refer_rank_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_refer_rank_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_refer_rank failed: unknown result");
  }

  public function send_ecredit($order_id, $user_id, $phone, $ecredit_amount)
  {
    $this->send_send_ecredit($order_id, $user_id, $phone, $ecredit_amount);
    $this->recv_send_ecredit();
  }

  public function send_send_ecredit($order_id, $user_id, $phone, $ecredit_amount)
  {
    $args = new \EUS\ElemeUserService_send_ecredit_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $args->phone = $phone;
    $args->ecredit_amount = $ecredit_amount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_ecredit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_ecredit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_ecredit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_send_ecredit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_send_ecredit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function check_ecredit_ok($phone)
  {
    $this->send_check_ecredit_ok($phone);
    return $this->recv_check_ecredit_ok();
  }

  public function send_check_ecredit_ok($phone)
  {
    $args = new \EUS\ElemeUserService_check_ecredit_ok_args();
    $args->phone = $phone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_ecredit_ok', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_ecredit_ok', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_ecredit_ok()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_check_ecredit_ok_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_check_ecredit_ok_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("check_ecredit_ok failed: unknown result");
  }

  public function get_ecredit_amount_by_order_id($order_id)
  {
    $this->send_get_ecredit_amount_by_order_id($order_id);
    return $this->recv_get_ecredit_amount_by_order_id();
  }

  public function send_get_ecredit_amount_by_order_id($order_id)
  {
    $args = new \EUS\ElemeUserService_get_ecredit_amount_by_order_id_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_ecredit_amount_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_ecredit_amount_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_ecredit_amount_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_ecredit_amount_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_ecredit_amount_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_ecredit_amount_by_order_id failed: unknown result");
  }

  public function get($user_id)
  {
    $this->send_get($user_id);
    return $this->recv_get();
  }

  public function send_get($user_id)
  {
    $args = new \EUS\ElemeUserService_get_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get failed: unknown result");
  }

  public function master_get($user_id)
  {
    $this->send_master_get($user_id);
    return $this->recv_master_get();
  }

  public function send_master_get($user_id)
  {
    $args = new \EUS\ElemeUserService_master_get_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_master_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_master_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("master_get failed: unknown result");
  }

  public function get_third_user_session_by_user_id($user_id)
  {
    $this->send_get_third_user_session_by_user_id($user_id);
    return $this->recv_get_third_user_session_by_user_id();
  }

  public function send_get_third_user_session_by_user_id($user_id)
  {
    $args = new \EUS\ElemeUserService_get_third_user_session_by_user_id_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_third_user_session_by_user_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_third_user_session_by_user_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_third_user_session_by_user_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_third_user_session_by_user_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_third_user_session_by_user_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_third_user_session_by_user_id failed: unknown result");
  }

  public function get_by_username($username)
  {
    $this->send_get_by_username($username);
    return $this->recv_get_by_username();
  }

  public function send_get_by_username($username)
  {
    $args = new \EUS\ElemeUserService_get_by_username_args();
    $args->username = $username;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_by_username', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_by_username', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_by_username()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_by_username_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_by_username_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_by_username failed: unknown result");
  }

  public function get_by_mobile($mobile)
  {
    $this->send_get_by_mobile($mobile);
    return $this->recv_get_by_mobile();
  }

  public function send_get_by_mobile($mobile)
  {
    $args = new \EUS\ElemeUserService_get_by_mobile_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_by_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_by_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_by_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_by_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_by_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_by_mobile failed: unknown result");
  }

  public function mget($user_ids)
  {
    $this->send_mget($user_ids);
    return $this->recv_mget();
  }

  public function send_mget($user_ids)
  {
    $args = new \EUS\ElemeUserService_mget_args();
    $args->user_ids = $user_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget failed: unknown result");
  }

  public function mget_by_username($username)
  {
    $this->send_mget_by_username($username);
    return $this->recv_mget_by_username();
  }

  public function send_mget_by_username($username)
  {
    $args = new \EUS\ElemeUserService_mget_by_username_args();
    $args->username = $username;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_by_username', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_by_username', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_by_username()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_by_username_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_by_username_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_by_username failed: unknown result");
  }

  public function get_bank($bank_id)
  {
    $this->send_get_bank($bank_id);
    return $this->recv_get_bank();
  }

  public function send_get_bank($bank_id)
  {
    $args = new \EUS\ElemeUserService_get_bank_args();
    $args->bank_id = $bank_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_bank', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_bank', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_bank()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_bank_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_bank_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_bank failed: unknown result");
  }

  public function get_bank_list()
  {
    $this->send_get_bank_list();
    return $this->recv_get_bank_list();
  }

  public function send_get_bank_list()
  {
    $args = new \EUS\ElemeUserService_get_bank_list_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_bank_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_bank_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_bank_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_bank_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_bank_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_bank_list failed: unknown result");
  }

  public function mget_bank($bank_ids)
  {
    $this->send_mget_bank($bank_ids);
    return $this->recv_mget_bank();
  }

  public function send_mget_bank($bank_ids)
  {
    $args = new \EUS\ElemeUserService_mget_bank_args();
    $args->bank_ids = $bank_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_bank', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_bank', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_bank()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_bank_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_bank_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_bank failed: unknown result");
  }

  public function get_bankcard($user_id, $status)
  {
    $this->send_get_bankcard($user_id, $status);
    return $this->recv_get_bankcard();
  }

  public function send_get_bankcard($user_id, $status)
  {
    $args = new \EUS\ElemeUserService_get_bankcard_args();
    $args->user_id = $user_id;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_bankcard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_bankcard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_bankcard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_bankcard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_bankcard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_bankcard failed: unknown result");
  }

  public function get_bankcard_by_user($user_id)
  {
    $this->send_get_bankcard_by_user($user_id);
    return $this->recv_get_bankcard_by_user();
  }

  public function send_get_bankcard_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_get_bankcard_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_bankcard_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_bankcard_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_bankcard_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_bankcard_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_bankcard_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_bankcard_by_user failed: unknown result");
  }

  public function mget_bankcard_by_restaurant($restaurant_ids)
  {
    $this->send_mget_bankcard_by_restaurant($restaurant_ids);
    return $this->recv_mget_bankcard_by_restaurant();
  }

  public function send_mget_bankcard_by_restaurant($restaurant_ids)
  {
    $args = new \EUS\ElemeUserService_mget_bankcard_by_restaurant_args();
    $args->restaurant_ids = $restaurant_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_bankcard_by_restaurant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_bankcard_by_restaurant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_bankcard_by_restaurant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_bankcard_by_restaurant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_bankcard_by_restaurant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_bankcard_by_restaurant failed: unknown result");
  }

  public function get_dop_user($user_id)
  {
    $this->send_get_dop_user($user_id);
    return $this->recv_get_dop_user();
  }

  public function send_get_dop_user($user_id)
  {
    $args = new \EUS\ElemeUserService_get_dop_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_dop_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_dop_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_dop_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_dop_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_dop_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_dop_user failed: unknown result");
  }

  public function mget_dop_user($user_ids)
  {
    $this->send_mget_dop_user($user_ids);
    return $this->recv_mget_dop_user();
  }

  public function send_mget_dop_user($user_ids)
  {
    $args = new \EUS\ElemeUserService_mget_dop_user_args();
    $args->user_ids = $user_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_dop_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_dop_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_dop_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_dop_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_dop_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_dop_user failed: unknown result");
  }

  public function get_profile($user_id)
  {
    $this->send_get_profile($user_id);
    return $this->recv_get_profile();
  }

  public function send_get_profile($user_id)
  {
    $args = new \EUS\ElemeUserService_get_profile_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_profile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_profile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_profile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_profile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_profile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_profile failed: unknown result");
  }

  public function master_get_profile($user_id)
  {
    $this->send_master_get_profile($user_id);
    return $this->recv_master_get_profile();
  }

  public function send_master_get_profile($user_id)
  {
    $args = new \EUS\ElemeUserService_master_get_profile_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get_profile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get_profile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get_profile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_master_get_profile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_master_get_profile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("master_get_profile failed: unknown result");
  }

  public function mget_profile($user_ids)
  {
    $this->send_mget_profile($user_ids);
    return $this->recv_mget_profile();
  }

  public function send_mget_profile($user_ids)
  {
    $args = new \EUS\ElemeUserService_mget_profile_args();
    $args->user_ids = $user_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_profile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_profile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_profile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_profile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_profile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_profile failed: unknown result");
  }

  public function query_profile(\EUS\TUserProfileQuery $query_struct)
  {
    $this->send_query_profile($query_struct);
    return $this->recv_query_profile();
  }

  public function send_query_profile(\EUS\TUserProfileQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_profile_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_profile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_profile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_profile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_profile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_profile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_profile failed: unknown result");
  }

  public function get_remember_key($remember_key)
  {
    $this->send_get_remember_key($remember_key);
    return $this->recv_get_remember_key();
  }

  public function send_get_remember_key($remember_key)
  {
    $args = new \EUS\ElemeUserService_get_remember_key_args();
    $args->remember_key = $remember_key;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_remember_key', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_remember_key', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_remember_key()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_remember_key_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_remember_key_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_remember_key failed: unknown result");
  }

  public function get_full($user_id)
  {
    $this->send_get_full($user_id);
    return $this->recv_get_full();
  }

  public function send_get_full($user_id)
  {
    $args = new \EUS\ElemeUserService_get_full_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_full', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_full', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_full()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_full_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_full_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_full failed: unknown result");
  }

  public function get_full_by_valid_mobile($mobile)
  {
    $this->send_get_full_by_valid_mobile($mobile);
    return $this->recv_get_full_by_valid_mobile();
  }

  public function send_get_full_by_valid_mobile($mobile)
  {
    $args = new \EUS\ElemeUserService_get_full_by_valid_mobile_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_full_by_valid_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_full_by_valid_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_full_by_valid_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_full_by_valid_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_full_by_valid_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_full_by_valid_mobile failed: unknown result");
  }

  public function query_full(\EUS\TFullUserQuery $qeury_struct)
  {
    $this->send_query_full($qeury_struct);
    return $this->recv_query_full();
  }

  public function send_query_full(\EUS\TFullUserQuery $qeury_struct)
  {
    $args = new \EUS\ElemeUserService_query_full_args();
    $args->qeury_struct = $qeury_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_full', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_full', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_full()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_full_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_full_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_full failed: unknown result");
  }

  public function get_address($address_id)
  {
    $this->send_get_address($address_id);
    return $this->recv_get_address();
  }

  public function send_get_address($address_id)
  {
    $args = new \EUS\ElemeUserService_get_address_args();
    $args->address_id = $address_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_address', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_address', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_address()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_address_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_address_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_address failed: unknown result");
  }

  public function get_invoice($invoice_id)
  {
    $this->send_get_invoice($invoice_id);
    return $this->recv_get_invoice();
  }

  public function send_get_invoice($invoice_id)
  {
    $args = new \EUS\ElemeUserService_get_invoice_args();
    $args->invoice_id = $invoice_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_invoice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_invoice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_invoice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_invoice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_invoice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_invoice failed: unknown result");
  }

  public function get_gift($gift_id)
  {
    $this->send_get_gift($gift_id);
    return $this->recv_get_gift();
  }

  public function send_get_gift($gift_id)
  {
    $args = new \EUS\ElemeUserService_get_gift_args();
    $args->gift_id = $gift_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_gift failed: unknown result");
  }

  public function mget_gift($gift_ids)
  {
    $this->send_mget_gift($gift_ids);
    return $this->recv_mget_gift();
  }

  public function send_mget_gift($gift_ids)
  {
    $args = new \EUS\ElemeUserService_mget_gift_args();
    $args->gift_ids = $gift_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_gift failed: unknown result");
  }

  public function get_group_list()
  {
    $this->send_get_group_list();
    return $this->recv_get_group_list();
  }

  public function send_get_group_list()
  {
    $args = new \EUS\ElemeUserService_get_group_list_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_group_list', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_group_list', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_group_list()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_group_list_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_group_list_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_group_list failed: unknown result");
  }

  public function get_user_gift($user_gift_id)
  {
    $this->send_get_user_gift($user_gift_id);
    return $this->recv_get_user_gift();
  }

  public function send_get_user_gift($user_gift_id)
  {
    $args = new \EUS\ElemeUserService_get_user_gift_args();
    $args->user_gift_id = $user_gift_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_gift failed: unknown result");
  }

  public function mget_user_gift($user_gift_ids)
  {
    $this->send_mget_user_gift($user_gift_ids);
    return $this->recv_mget_user_gift();
  }

  public function send_mget_user_gift($user_gift_ids)
  {
    $args = new \EUS\ElemeUserService_mget_user_gift_args();
    $args->user_gift_ids = $user_gift_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_user_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_user_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_user_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_user_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_user_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_user_gift failed: unknown result");
  }

  public function get_weibo_map_by_user($user_id)
  {
    $this->send_get_weibo_map_by_user($user_id);
    return $this->recv_get_weibo_map_by_user();
  }

  public function send_get_weibo_map_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_get_weibo_map_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_weibo_map_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_weibo_map_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_weibo_map_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_weibo_map_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_weibo_map_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_weibo_map_by_user failed: unknown result");
  }

  public function get_renren_map_by_user($user_id)
  {
    $this->send_get_renren_map_by_user($user_id);
    return $this->recv_get_renren_map_by_user();
  }

  public function send_get_renren_map_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_get_renren_map_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_renren_map_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_renren_map_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_renren_map_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_renren_map_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_renren_map_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_renren_map_by_user failed: unknown result");
  }

  public function get_weixin_map_by_user($user_id)
  {
    $this->send_get_weixin_map_by_user($user_id);
    return $this->recv_get_weixin_map_by_user();
  }

  public function send_get_weixin_map_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_get_weixin_map_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_weixin_map_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_weixin_map_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_weixin_map_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_weixin_map_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_weixin_map_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_weixin_map_by_user failed: unknown result");
  }

  public function get_hongbao($hongbao_id)
  {
    $this->send_get_hongbao($hongbao_id);
    return $this->recv_get_hongbao();
  }

  public function send_get_hongbao($hongbao_id)
  {
    $args = new \EUS\ElemeUserService_get_hongbao_args();
    $args->hongbao_id = $hongbao_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_hongbao failed: unknown result");
  }

  public function get_hongbao_by_sn($hongbao_sn)
  {
    $this->send_get_hongbao_by_sn($hongbao_sn);
    return $this->recv_get_hongbao_by_sn();
  }

  public function send_get_hongbao_by_sn($hongbao_sn)
  {
    $args = new \EUS\ElemeUserService_get_hongbao_by_sn_args();
    $args->hongbao_sn = $hongbao_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_hongbao_by_sn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_hongbao_by_sn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_hongbao_by_sn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_hongbao_by_sn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_hongbao_by_sn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_hongbao_by_sn failed: unknown result");
  }

  public function invalid_hongbao($hongbao_sn)
  {
    $this->send_invalid_hongbao($hongbao_sn);
    $this->recv_invalid_hongbao();
  }

  public function send_invalid_hongbao($hongbao_sn)
  {
    $args = new \EUS\ElemeUserService_invalid_hongbao_args();
    $args->hongbao_sn = $hongbao_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'invalid_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('invalid_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_invalid_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_invalid_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_invalid_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function invalid_restaurant_activity_hongbao($order_id)
  {
    $this->send_invalid_restaurant_activity_hongbao($order_id);
    $this->recv_invalid_restaurant_activity_hongbao();
  }

  public function send_invalid_restaurant_activity_hongbao($order_id)
  {
    $args = new \EUS\ElemeUserService_invalid_restaurant_activity_hongbao_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'invalid_restaurant_activity_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('invalid_restaurant_activity_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_invalid_restaurant_activity_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_invalid_restaurant_activity_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_invalid_restaurant_activity_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function sum_hongbao_amount(\EUS\THongbaoSum $query_struct)
  {
    $this->send_sum_hongbao_amount($query_struct);
    return $this->recv_sum_hongbao_amount();
  }

  public function send_sum_hongbao_amount(\EUS\THongbaoSum $query_struct)
  {
    $args = new \EUS\ElemeUserService_sum_hongbao_amount_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sum_hongbao_amount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sum_hongbao_amount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sum_hongbao_amount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_sum_hongbao_amount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_sum_hongbao_amount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("sum_hongbao_amount failed: unknown result");
  }

  public function query_hongbao(\EUS\THongbaoQuery $query_struct)
  {
    $this->send_query_hongbao($query_struct);
    return $this->recv_query_hongbao();
  }

  public function send_query_hongbao(\EUS\THongbaoQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_hongbao_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_hongbao failed: unknown result");
  }

  public function count_hongbao(\EUS\THongbaoQuery $query_struct)
  {
    $this->send_count_hongbao($query_struct);
    return $this->recv_count_hongbao();
  }

  public function send_count_hongbao(\EUS\THongbaoQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_count_hongbao_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_hongbao', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_hongbao', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_hongbao()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_hongbao_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_hongbao_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_hongbao failed: unknown result");
  }

  public function get_order_payment_constitution_map($order_ids)
  {
    $this->send_get_order_payment_constitution_map($order_ids);
    return $this->recv_get_order_payment_constitution_map();
  }

  public function send_get_order_payment_constitution_map($order_ids)
  {
    $args = new \EUS\ElemeUserService_get_order_payment_constitution_map_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_order_payment_constitution_map', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_order_payment_constitution_map', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_order_payment_constitution_map()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_order_payment_constitution_map_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_order_payment_constitution_map_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_order_payment_constitution_map failed: unknown result");
  }

  public function query_address_by_user($user_id)
  {
    $this->send_query_address_by_user($user_id);
    return $this->recv_query_address_by_user();
  }

  public function send_query_address_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_query_address_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_address_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_address_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_address_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_address_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_address_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_address_by_user failed: unknown result");
  }

  public function query_invoice_by_user($user_id)
  {
    $this->send_query_invoice_by_user($user_id);
    return $this->recv_query_invoice_by_user();
  }

  public function send_query_invoice_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_query_invoice_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_invoice_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_invoice_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_invoice_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_invoice_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_invoice_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_invoice_by_user failed: unknown result");
  }

  public function query_user_gift($user_id)
  {
    $this->send_query_user_gift($user_id);
    return $this->recv_query_user_gift();
  }

  public function send_query_user_gift($user_id)
  {
    $args = new \EUS\ElemeUserService_query_user_gift_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_user_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_user_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_user_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_user_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_user_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_user_gift failed: unknown result");
  }

  public function query_user_group($user_id)
  {
    $this->send_query_user_group($user_id);
    return $this->recv_query_user_group();
  }

  public function send_query_user_group($user_id)
  {
    $args = new \EUS\ElemeUserService_query_user_group_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_user_group', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_user_group', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_user_group()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_user_group_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_user_group_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_user_group failed: unknown result");
  }

  public function count_gift(\EUS\TGiftQuery $query_struct)
  {
    $this->send_count_gift($query_struct);
    return $this->recv_count_gift();
  }

  public function send_count_gift(\EUS\TGiftQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_count_gift_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_count_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_count_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("count_gift failed: unknown result");
  }

  public function query_gift(\EUS\TGiftQuery $query_struct)
  {
    $this->send_query_gift($query_struct);
    return $this->recv_query_gift();
  }

  public function send_query_gift(\EUS\TGiftQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_gift_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_gift failed: unknown result");
  }

  public function query_available_gift()
  {
    $this->send_query_available_gift();
    return $this->recv_query_available_gift();
  }

  public function send_query_available_gift()
  {
    $args = new \EUS\ElemeUserService_query_available_gift_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_available_gift', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_available_gift', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_available_gift()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_available_gift_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_available_gift_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_available_gift failed: unknown result");
  }

  public function query_unread_user_message($user_id)
  {
    $this->send_query_unread_user_message($user_id);
    return $this->recv_query_unread_user_message();
  }

  public function send_query_unread_user_message($user_id)
  {
    $args = new \EUS\ElemeUserService_query_unread_user_message_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_unread_user_message', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_unread_user_message', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_unread_user_message()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_unread_user_message_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_unread_user_message_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_unread_user_message failed: unknown result");
  }

  public function query_user_place(\EUS\TUserPlaceQuery $query_struct)
  {
    $this->send_query_user_place($query_struct);
    return $this->recv_query_user_place();
  }

  public function send_query_user_place(\EUS\TUserPlaceQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_user_place_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_user_place', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_user_place', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_user_place()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_user_place_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_user_place_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_user_place failed: unknown result");
  }

  public function query_refer(\EUS\TReferQuery $query_struct)
  {
    $this->send_query_refer($query_struct);
    return $this->recv_query_refer();
  }

  public function send_query_refer(\EUS\TReferQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_refer_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_refer', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_refer', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_refer()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_refer_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_refer_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_refer failed: unknown result");
  }

  public function master_get_refer_by_to_user_id($user_id)
  {
    $this->send_master_get_refer_by_to_user_id($user_id);
    return $this->recv_master_get_refer_by_to_user_id();
  }

  public function send_master_get_refer_by_to_user_id($user_id)
  {
    $args = new \EUS\ElemeUserService_master_get_refer_by_to_user_id_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get_refer_by_to_user_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get_refer_by_to_user_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get_refer_by_to_user_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_master_get_refer_by_to_user_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_master_get_refer_by_to_user_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("master_get_refer_by_to_user_id failed: unknown result");
  }

  public function query_terminal_validation(\EUS\TTerminalValidationQuery $query_struct)
  {
    $this->send_query_terminal_validation($query_struct);
    return $this->recv_query_terminal_validation();
  }

  public function send_query_terminal_validation(\EUS\TTerminalValidationQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_terminal_validation_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_terminal_validation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_terminal_validation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_terminal_validation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_terminal_validation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_terminal_validation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_terminal_validation failed: unknown result");
  }

  public function get_weibo_map_by_weibo_id($weibo_uid)
  {
    $this->send_get_weibo_map_by_weibo_id($weibo_uid);
    return $this->recv_get_weibo_map_by_weibo_id();
  }

  public function send_get_weibo_map_by_weibo_id($weibo_uid)
  {
    $args = new \EUS\ElemeUserService_get_weibo_map_by_weibo_id_args();
    $args->weibo_uid = $weibo_uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_weibo_map_by_weibo_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_weibo_map_by_weibo_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_weibo_map_by_weibo_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_weibo_map_by_weibo_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_weibo_map_by_weibo_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_weibo_map_by_weibo_id failed: unknown result");
  }

  public function get_renren_map_by_renren_id($renren_uid)
  {
    $this->send_get_renren_map_by_renren_id($renren_uid);
    return $this->recv_get_renren_map_by_renren_id();
  }

  public function send_get_renren_map_by_renren_id($renren_uid)
  {
    $args = new \EUS\ElemeUserService_get_renren_map_by_renren_id_args();
    $args->renren_uid = $renren_uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_renren_map_by_renren_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_renren_map_by_renren_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_renren_map_by_renren_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_renren_map_by_renren_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_renren_map_by_renren_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_renren_map_by_renren_id failed: unknown result");
  }

  public function get_weixin_map_by_weixin_id($weixin_uid)
  {
    $this->send_get_weixin_map_by_weixin_id($weixin_uid);
    return $this->recv_get_weixin_map_by_weixin_id();
  }

  public function send_get_weixin_map_by_weixin_id($weixin_uid)
  {
    $args = new \EUS\ElemeUserService_get_weixin_map_by_weixin_id_args();
    $args->weixin_uid = $weixin_uid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_weixin_map_by_weixin_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_weixin_map_by_weixin_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_weixin_map_by_weixin_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_weixin_map_by_weixin_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_weixin_map_by_weixin_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_weixin_map_by_weixin_id failed: unknown result");
  }

  public function get_restaurant_admin($restaurant_id)
  {
    $this->send_get_restaurant_admin($restaurant_id);
    return $this->recv_get_restaurant_admin();
  }

  public function send_get_restaurant_admin($restaurant_id)
  {
    $args = new \EUS\ElemeUserService_get_restaurant_admin_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_restaurant_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_restaurant_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_restaurant_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_restaurant_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_restaurant_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_restaurant_admin failed: unknown result");
  }

  public function get_restaurant_admin_by_admin($user_id)
  {
    $this->send_get_restaurant_admin_by_admin($user_id);
    return $this->recv_get_restaurant_admin_by_admin();
  }

  public function send_get_restaurant_admin_by_admin($user_id)
  {
    $args = new \EUS\ElemeUserService_get_restaurant_admin_by_admin_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_restaurant_admin_by_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_restaurant_admin_by_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_restaurant_admin_by_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_restaurant_admin_by_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_restaurant_admin_by_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_restaurant_admin_by_admin failed: unknown result");
  }

  public function get_restaurant_admin_by_admin_new($user_id)
  {
    $this->send_get_restaurant_admin_by_admin_new($user_id);
    return $this->recv_get_restaurant_admin_by_admin_new();
  }

  public function send_get_restaurant_admin_by_admin_new($user_id)
  {
    $args = new \EUS\ElemeUserService_get_restaurant_admin_by_admin_new_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_restaurant_admin_by_admin_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_restaurant_admin_by_admin_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_restaurant_admin_by_admin_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_restaurant_admin_by_admin_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_restaurant_admin_by_admin_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_restaurant_admin_by_admin_new failed: unknown result");
  }

  public function query_trade_record(\EUS\TTradeRecordQuery $query_struct)
  {
    $this->send_query_trade_record($query_struct);
    return $this->recv_query_trade_record();
  }

  public function send_query_trade_record(\EUS\TTradeRecordQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_trade_record_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_trade_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_trade_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_trade_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_trade_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_trade_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_trade_record failed: unknown result");
  }

  public function query_login_info(\EUS\TLoginInfoQuery $query_struct)
  {
    $this->send_query_login_info($query_struct);
    return $this->recv_query_login_info();
  }

  public function send_query_login_info(\EUS\TLoginInfoQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_login_info_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_login_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_login_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_login_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_login_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_login_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_login_info failed: unknown result");
  }

  public function mget_user_bankcard($record_ids)
  {
    $this->send_mget_user_bankcard($record_ids);
    return $this->recv_mget_user_bankcard();
  }

  public function send_mget_user_bankcard($record_ids)
  {
    $args = new \EUS\ElemeUserService_mget_user_bankcard_args();
    $args->record_ids = $record_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_user_bankcard', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_user_bankcard', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_user_bankcard()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_mget_user_bankcard_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_mget_user_bankcard_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_user_bankcard failed: unknown result");
  }

  public function get_user_meta_data($user_id)
  {
    $this->send_get_user_meta_data($user_id);
    return $this->recv_get_user_meta_data();
  }

  public function send_get_user_meta_data($user_id)
  {
    $args = new \EUS\ElemeUserService_get_user_meta_data_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_meta_data', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_meta_data', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_meta_data()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_meta_data_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_meta_data_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_meta_data failed: unknown result");
  }

  public function query_user_meta_data(\EUS\TUserMetaDataQuery $query_struct)
  {
    $this->send_query_user_meta_data($query_struct);
    return $this->recv_query_user_meta_data();
  }

  public function send_query_user_meta_data(\EUS\TUserMetaDataQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_user_meta_data_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_user_meta_data', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_user_meta_data', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_user_meta_data()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_user_meta_data_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_user_meta_data_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_user_meta_data failed: unknown result");
  }

  public function query_user_change_record(\EUS\TUserChangeRecordQuery $query_struct)
  {
    $this->send_query_user_change_record($query_struct);
    return $this->recv_query_user_change_record();
  }

  public function send_query_user_change_record(\EUS\TUserChangeRecordQuery $query_struct)
  {
    $args = new \EUS\ElemeUserService_query_user_change_record_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_user_change_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_user_change_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_user_change_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_user_change_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_user_change_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_user_change_record failed: unknown result");
  }

  public function get_user_custom_menu_by_user($user_id)
  {
    $this->send_get_user_custom_menu_by_user($user_id);
    return $this->recv_get_user_custom_menu_by_user();
  }

  public function send_get_user_custom_menu_by_user($user_id)
  {
    $args = new \EUS\ElemeUserService_get_user_custom_menu_by_user_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_user_custom_menu_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_user_custom_menu_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_user_custom_menu_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_user_custom_menu_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_user_custom_menu_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_user_custom_menu_by_user failed: unknown result");
  }

  public function save_user_custom_menu($menu_id, \EUS\TUserCustomMenu $menu)
  {
    $this->send_save_user_custom_menu($menu_id, $menu);
    return $this->recv_save_user_custom_menu();
  }

  public function send_save_user_custom_menu($menu_id, \EUS\TUserCustomMenu $menu)
  {
    $args = new \EUS\ElemeUserService_save_user_custom_menu_args();
    $args->menu_id = $menu_id;
    $args->menu = $menu;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_user_custom_menu', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_user_custom_menu', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_user_custom_menu()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_save_user_custom_menu_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_save_user_custom_menu_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("save_user_custom_menu failed: unknown result");
  }

  public function set_user_manage_groups($user_id, $group_ids)
  {
    $this->send_set_user_manage_groups($user_id, $group_ids);
    $this->recv_set_user_manage_groups();
  }

  public function send_set_user_manage_groups($user_id, $group_ids)
  {
    $args = new \EUS\ElemeUserService_set_user_manage_groups_args();
    $args->user_id = $user_id;
    $args->group_ids = $group_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_user_manage_groups', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_user_manage_groups', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_user_manage_groups()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_set_user_manage_groups_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_set_user_manage_groups_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_managed_user_ids($user_id)
  {
    $this->send_get_managed_user_ids($user_id);
    return $this->recv_get_managed_user_ids();
  }

  public function send_get_managed_user_ids($user_id)
  {
    $args = new \EUS\ElemeUserService_get_managed_user_ids_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_managed_user_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_managed_user_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_managed_user_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_managed_user_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_managed_user_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_managed_user_ids failed: unknown result");
  }

  public function get_managed_group_ids($user_id)
  {
    $this->send_get_managed_group_ids($user_id);
    return $this->recv_get_managed_group_ids();
  }

  public function send_get_managed_group_ids($user_id)
  {
    $args = new \EUS\ElemeUserService_get_managed_group_ids_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_managed_group_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_managed_group_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_managed_group_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_managed_group_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_managed_group_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_managed_group_ids failed: unknown result");
  }

  public function get_pay_record_by_order_id($order_id)
  {
    $this->send_get_pay_record_by_order_id($order_id);
    return $this->recv_get_pay_record_by_order_id();
  }

  public function send_get_pay_record_by_order_id($order_id)
  {
    $args = new \EUS\ElemeUserService_get_pay_record_by_order_id_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pay_record_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pay_record_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pay_record_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_pay_record_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_pay_record_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_pay_record_by_order_id failed: unknown result");
  }

  public function get_last_pay_record_by_order_id($order_id)
  {
    $this->send_get_last_pay_record_by_order_id($order_id);
    return $this->recv_get_last_pay_record_by_order_id();
  }

  public function send_get_last_pay_record_by_order_id($order_id)
  {
    $args = new \EUS\ElemeUserService_get_last_pay_record_by_order_id_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_last_pay_record_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_last_pay_record_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_last_pay_record_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_last_pay_record_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_last_pay_record_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_last_pay_record_by_order_id failed: unknown result");
  }

  public function get_pay_failed_time_by_order_id($order_id)
  {
    $this->send_get_pay_failed_time_by_order_id($order_id);
    return $this->recv_get_pay_failed_time_by_order_id();
  }

  public function send_get_pay_failed_time_by_order_id($order_id)
  {
    $args = new \EUS\ElemeUserService_get_pay_failed_time_by_order_id_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pay_failed_time_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pay_failed_time_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pay_failed_time_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_get_pay_failed_time_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_get_pay_failed_time_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_pay_failed_time_by_order_id failed: unknown result");
  }

  public function query_pay_record_trade_no($pay_company_id, $begin_at, $end_at)
  {
    $this->send_query_pay_record_trade_no($pay_company_id, $begin_at, $end_at);
    return $this->recv_query_pay_record_trade_no();
  }

  public function send_query_pay_record_trade_no($pay_company_id, $begin_at, $end_at)
  {
    $args = new \EUS\ElemeUserService_query_pay_record_trade_no_args();
    $args->pay_company_id = $pay_company_id;
    $args->begin_at = $begin_at;
    $args->end_at = $end_at;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_pay_record_trade_no', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_pay_record_trade_no', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_pay_record_trade_no()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EUS\ElemeUserService_query_pay_record_trade_no_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EUS\ElemeUserService_query_pay_record_trade_no_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("query_pay_record_trade_no failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ElemeUserService_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_ping_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ping_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ping_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ping_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ping_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clear_cache_args extends TBase {
  static $_TSPEC;

  public $api_name = null;
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clear_cache_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clear_cache_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clear_cache_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clear_cache_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clear_cache_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clear_cache_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clear_cache_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_cache_for_replicator_args extends TBase {
  static $_TSPEC;

  public $name = null;
  public $ids = null;
  public $type_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'type_',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_cache_for_replicator_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_cache_for_replicator_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_cache_for_replicator_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_cache_for_replicator_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_cache_for_replicator_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_cache_for_replicator_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_cache_for_replicator_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_cache_args extends TBase {
  static $_TSPEC;

  public $tablename = null;
  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tablename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_cache_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_cache_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_cache_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_cache_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_cache_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_cache_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_cache_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_auth_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $passward = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'passward',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_auth_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_auth_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_auth_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_auth_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_auth_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_auth_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_auth_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sns_auth_args extends TBase {
  static $_TSPEC;

  public $sns_uid = null;
  public $sns_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sns_uid',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sns_auth_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sns_auth_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sns_auth_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sns_auth_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sns_auth_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sns_auth_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sns_auth_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sns_auth_new_args extends TBase {
  static $_TSPEC;

  public $sns_uid = null;
  public $sns_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sns_uid',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sns_auth_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sns_auth_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sns_auth_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sns_auth_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sns_auth_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sns_auth_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sns_auth_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_signup_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $email = null;
  public $passward = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'passward',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_signup_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_signup_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_signup_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_signup_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_signup_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_signup_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_signup_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_extend_signup_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $email = null;
  public $extend_param = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extend_param',
          'type' => TType::STRUCT,
          'class' => '\EUS\TSignupExtendParam',
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_extend_signup_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_extend_signup_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_extend_signup_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_extend_signup_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_extend_signup_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_extend_signup_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_extend_signup_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_mobile_location_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_mobile_location_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_mobile_location_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_mobile_location_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_mobile_location_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TMobileLocation',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_mobile_location_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_mobile_location_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_mobile_location_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_signup_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $validation_code = null;
  public $extend_param = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'validation_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extend_param',
          'type' => TType::STRUCT,
          'class' => '\EUS\TSignupExtendParam',
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_signup_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_signup_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_signup_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_signup_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_signup_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_signup_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_signup_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_hermes_mobileclient_signup_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $validation_code = null;
  public $extend_param = null;
  public $password = null;
  public $sender_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'validation_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extend_param',
          'type' => TType::STRUCT,
          'class' => '\EUS\TSignupExtendParam',
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sender_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_hermes_mobileclient_signup_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_hermes_mobileclient_signup_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_hermes_mobileclient_signup_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_hermes_mobileclient_signup_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_hermes_mobileclient_signup_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_hermes_mobileclient_signup_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_hermes_mobileclient_signup_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_napos_mobileclient_signup_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_napos_mobileclient_signup_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_napos_mobileclient_signup_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_napos_mobileclient_signup_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_napos_mobileclient_signup_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_napos_mobileclient_signup_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_napos_mobileclient_signup_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_napos_mobileclient_signup_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_validation_code_login_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $validation_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'validation_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_validation_code_login_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_validation_code_login_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_validation_code_login_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_validation_code_login_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_validation_code_login_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_validation_code_login_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_validation_code_login_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_hermes_mobileclient_validation_code_login_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $validation_code = null;
  public $sender_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'validation_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sender_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_hermes_mobileclient_validation_code_login_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_hermes_mobileclient_validation_code_login_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_hermes_mobileclient_validation_code_login_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_hermes_mobileclient_validation_code_login_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_hermes_mobileclient_validation_code_login_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_hermes_mobileclient_validation_code_login_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_hermes_mobileclient_validation_code_login_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_mobile_login_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_mobile_login_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_mobile_login_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_mobile_login_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_mobile_login_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_mobile_login_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_mobile_login_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_mobile_login_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_set_username_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_set_username_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_set_username_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_set_username_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_set_username_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_set_username_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_set_username_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_set_username_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_set_password_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_set_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_set_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_set_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_set_password_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_set_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_set_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_set_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_reset_password_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $validation_code = null;
  public $new_password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'validation_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'new_password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_reset_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_reset_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_reset_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_reset_password_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_reset_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_reset_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_reset_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_hermes_mobileclient_reset_password_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $validation_code = null;
  public $new_password = null;
  public $sender_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'validation_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'new_password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sender_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_hermes_mobileclient_reset_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_hermes_mobileclient_reset_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_hermes_mobileclient_reset_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_hermes_mobileclient_reset_password_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_hermes_mobileclient_reset_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_hermes_mobileclient_reset_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_hermes_mobileclient_reset_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_update_password_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $validation_code = null;
  public $new_password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'validation_code',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'new_password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_update_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_update_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_update_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_update_password_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_update_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_update_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_update_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_sns_login_args extends TBase {
  static $_TSPEC;

  public $sns_type = null;
  public $sns_uid = null;
  public $sns_username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sns_uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sns_username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_sns_login_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_sns_login_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_sns_login_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_sns_login_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_sns_login_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_sns_login_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_sns_login_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_sns_login_new_args extends TBase {
  static $_TSPEC;

  public $sns_type = null;
  public $sns_uid = null;
  public $sns_username = null;
  public $device_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sns_uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sns_username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'device_type',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_sns_login_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_sns_login_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_sns_login_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobileclient_sns_login_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobileclient_sns_login_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobileclient_sns_login_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobileclient_sns_login_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_auto_generated_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_auto_generated_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_auto_generated_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_auto_generated_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_auto_generated_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TAutoGeneratedUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_auto_generated_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_auto_generated_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_auto_generated_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pending_refer_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pending_refer_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pending_refer_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pending_refer_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pending_refer_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::LST,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::LST,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EUS\TRefer',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pending_refer_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pending_refer_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pending_refer_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_suspicious_refer_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_get_suspicious_refer_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_suspicious_refer_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_suspicious_refer_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_suspicious_refer_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::LST,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::LST,
              'etype' => TType::STRUCT,
              'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\EUS\TRefer',
                ),
              ),
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_suspicious_refer_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_suspicious_refer_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_suspicious_refer_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_referal_code_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_referal_code_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_referal_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_referal_code_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_referal_code_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_referal_code_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_referal_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_referal_code_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_is_user_refered_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mode',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_is_user_refered_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_is_user_refered_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_is_user_refered_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_is_user_refered_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_is_user_refered_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_is_user_refered_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_is_user_refered_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_temp_super_user_bind_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $mobile = null;
  public $restaurant_id = null;
  public $bank_id = null;
  public $card_id = null;
  public $cardholder_name = null;
  public $process_user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'process_user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_temp_super_user_bind_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_temp_super_user_bind_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_temp_super_user_bind_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_temp_super_user_bind_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_temp_super_user_bind_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_temp_super_user_bind_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_temp_super_user_bind_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_third_signup_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $session_id = null;
  public $user_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_third_signup_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_third_signup_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_third_signup_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_third_signup_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_third_signup_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_third_signup_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_third_signup_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_is_username_available_args extends TBase {
  static $_TSPEC;

  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_is_username_available_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_is_username_available_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_is_username_available_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_is_username_available_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_is_username_available_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_is_username_available_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_is_username_available_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_dop_user_args extends TBase {
  static $_TSPEC;

  public $nid = null;
  public $save_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'nid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'save_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TDopUser',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_dop_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_dop_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_dop_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_dop_user_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_dop_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_dop_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_dop_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_reset_password_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $new_password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'new_password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_reset_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_reset_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_reset_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_reset_password_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_reset_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_reset_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_reset_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_force_reset_password_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $admin_user_id = null;
  public $new_password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'new_password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_force_reset_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_force_reset_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_force_reset_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_force_reset_password_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_force_reset_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_force_reset_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_force_reset_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_password_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $old_password = null;
  public $new_password = null;
  public $current_session = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'old_password',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'new_password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'current_session',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_password_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_session_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $current_session = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'current_session',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_session_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_session_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_session_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_session_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_session_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_session_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_session_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_post_login_args extends TBase {
  static $_TSPEC;

  public $login_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'login_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TLoginStruct',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_post_login_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_post_login_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_post_login_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_post_login_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_post_login_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_post_login_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_post_login_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_avatar_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $avatar = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'avatar',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_avatar_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_avatar_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_avatar_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_avatar_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_avatar_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_avatar_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_avatar_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_sns_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $sns_uid = null;
  public $sns_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sns_uid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_sns_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_sns_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_sns_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_sns_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_sns_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_sns_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_sns_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_sns_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $sns_uid = null;
  public $sns_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sns_uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_sns_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_sns_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_sns_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_sns_new_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_sns_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_sns_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_sns_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_renren_purify_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $username = null;
  public $email = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_renren_purify_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_renren_purify_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_renren_purify_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_renren_purify_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_renren_purify_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_renren_purify_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_renren_purify_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unbind_sns_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $sns_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unbind_sns_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unbind_sns_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unbind_sns_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unbind_sns_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unbind_sns_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unbind_sns_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unbind_sns_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_device_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $device_id = null;
  public $device_type = null;
  public $version = null;
  public $come_from = null;
  public $eleme_device_id = null;
  public $version_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'device_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'version',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'come_from',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'eleme_device_id',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'version_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_device_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_device_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_device_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_device_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_device_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_device_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_device_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unbind_device_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $device_id = null;
  public $device_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'device_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unbind_device_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unbind_device_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unbind_device_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unbind_device_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unbind_device_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unbind_device_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unbind_device_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_email_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_email_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_email_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_email_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_email_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_email_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_email_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_email_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_email_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $admin_user_id = null;
  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_email_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_email_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_email_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_email_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_email_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_email_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_email_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_tester_user_profile_args extends TBase {
  static $_TSPEC;

  public $tester_user_id = null;
  public $balance = null;
  public $point = null;
  public $mobile = null;
  public $payment_quota = null;
  public $is_mobile_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tester_user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'balance',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'payment_quota',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'is_mobile_valid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_tester_user_profile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_tester_user_profile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_tester_user_profile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_tester_user_profile_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_tester_user_profile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_tester_user_profile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_tester_user_profile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_username_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $op_user_id = null;
  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'op_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_username_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_username_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_username_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_username_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_username_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_username_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_username_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_mobile_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_mobile_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_mobile_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_mobile_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_address_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $entry_id = null;
  public $geohash = null;
  public $phone = null;
  public $address = null;
  public $phone_bk = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'phone_bk',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_address_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_address_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_address_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_address_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_address_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_address_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_address_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_address_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $address = null;
  public $phone = null;
  public $phone_bk = null;
  public $name = null;
  public $geohash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone_bk',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_address_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_address_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_address_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_address_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_address_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_address_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_address_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_address_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $address_id = null;
  public $address = null;
  public $phone = null;
  public $phone_bk = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'address_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'phone_bk',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_address_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_address_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_address_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_address_new_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_address_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_address_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_address_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_address_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $address_id = null;
  public $phone = null;
  public $address = null;
  public $phone_bk = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'address_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'phone_bk',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_address_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_address_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_address_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_address_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_address_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_address_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_address_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_address_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $address_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'address_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_address_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_address_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_address_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_address_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_address_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_address_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_address_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_default_address_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $address_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'address_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_default_address_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_default_address_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_default_address_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_default_address_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_default_address_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_default_address_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_default_address_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_groups_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $group_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'group_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_groups_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_groups_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_groups_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_groups_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_groups_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_groups_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_groups_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_invoice_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $invoice_pay_to = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'invoice_pay_to',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_invoice_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_invoice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_invoice_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_invoice_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_invoice_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_invoice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_invoice_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_invoice_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $invoice_id = null;
  public $invoice_pay_to = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'invoice_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'invoice_pay_to',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_invoice_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_invoice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_invoice_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_invoice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_invoice_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_invoice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_invoice_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_invoice_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $invoice_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'invoice_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_invoice_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_invoice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_invoice_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_invoice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_invoice_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_invoice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_invoice_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_default_invoice_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $invoice_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'invoice_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_default_invoice_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_default_invoice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_default_invoice_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_default_invoice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_default_invoice_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_default_invoice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_default_invoice_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_unprocessed_user_gift_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_count_unprocessed_user_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_unprocessed_user_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_unprocessed_user_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_unprocessed_user_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_unprocessed_user_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_unprocessed_user_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_unprocessed_user_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mset_user_gift_status_args extends TBase {
  static $_TSPEC;

  public $user_gift_ids = null;
  public $processed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'processed',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mset_user_gift_status_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mset_user_gift_status_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mset_user_gift_status_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mset_user_gift_status_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mset_user_gift_status_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mset_user_gift_status_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mset_user_gift_status_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mset_user_gift_valid_args extends TBase {
  static $_TSPEC;

  public $user_gift_ids = null;
  public $is_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mset_user_gift_valid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mset_user_gift_valid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mset_user_gift_valid_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mset_user_gift_valid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mset_user_gift_valid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mset_user_gift_valid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mset_user_gift_valid_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mset_feedback_reply_valid_args extends TBase {
  static $_TSPEC;

  public $reply_ids = null;
  public $valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'reply_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'valid',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mset_feedback_reply_valid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mset_feedback_reply_valid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mset_feedback_reply_valid_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mset_feedback_reply_valid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mset_feedback_reply_valid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mset_feedback_reply_valid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mset_feedback_reply_valid_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_bankcard_args extends TBase {
  static $_TSPEC;

  public $bankcard_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bankcard_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_bankcard_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_bankcard_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_bankcard_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_bankcard_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_bankcard_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_bankcard_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_bankcard_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_gift_args extends TBase {
  static $_TSPEC;

  public $update_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'update_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserGift',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_gift_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_gift_args extends TBase {
  static $_TSPEC;

  public $gift_id = null;
  public $save_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'save_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TGift',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_exchange_gift_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $gift_id = null;
  public $delivery_name = null;
  public $delivery_address = null;
  public $delivery_phone = null;
  public $delivery_note = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'delivery_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'delivery_address',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'delivery_phone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'delivery_note',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_exchange_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_exchange_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_exchange_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_exchange_gift_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_exchange_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_exchange_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_exchange_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_analyse_user_gift_args extends TBase {
  static $_TSPEC;

  public $user_gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_analyse_user_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_analyse_user_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_analyse_user_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_analyse_user_gift_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_analyse_user_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_analyse_user_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_analyse_user_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_exchange_gift_wkf_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $gift_id = null;
  public $delivery_name = null;
  public $delivery_address = null;
  public $delivery_phone = null;
  public $delivery_note = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'delivery_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'delivery_address',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'delivery_phone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'delivery_note',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_exchange_gift_wkf_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_exchange_gift_wkf_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_exchange_gift_wkf_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_exchange_gift_wkf_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_exchange_gift_wkf_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_exchange_gift_wkf_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_exchange_gift_wkf_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_analyse_user_gift_wkf_args extends TBase {
  static $_TSPEC;

  public $user_gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_analyse_user_gift_wkf_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_analyse_user_gift_wkf_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_analyse_user_gift_wkf_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_analyse_user_gift_wkf_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_analyse_user_gift_wkf_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_analyse_user_gift_wkf_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_analyse_user_gift_wkf_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_human_check_pass_wkf_args extends TBase {
  static $_TSPEC;

  public $user_gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_human_check_pass_wkf_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_human_check_pass_wkf_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_human_check_pass_wkf_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_human_check_pass_wkf_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_human_check_pass_wkf_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_human_check_pass_wkf_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_human_check_pass_wkf_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_human_check_fail_wkf_args extends TBase {
  static $_TSPEC;

  public $user_gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_human_check_fail_wkf_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_human_check_fail_wkf_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_human_check_fail_wkf_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_human_check_fail_wkf_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_human_check_fail_wkf_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_human_check_fail_wkf_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_human_check_fail_wkf_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_gift_received_wkf_args extends TBase {
  static $_TSPEC;

  public $user_gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_gift_received_wkf_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_gift_received_wkf_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_gift_received_wkf_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_gift_received_wkf_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_gift_received_wkf_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_gift_received_wkf_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_gift_received_wkf_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_change_point_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $point_change = null;
  public $reason = null;
  public $relevant_id = null;
  public $change_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'point_change',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'relevant_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'change_type',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_change_point_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_change_point_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_change_point_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_change_point_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_change_point_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_change_point_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_change_point_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_rate_message_read_args extends TBase {
  static $_TSPEC;

  public $target_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'target_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_rate_message_read_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_rate_message_read_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_rate_message_read_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_rate_message_read_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_rate_message_read_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_rate_message_read_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_rate_message_read_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_restaurant_admin_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_restaurant_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_restaurant_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_restaurant_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_restaurant_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_restaurant_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_restaurant_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_restaurant_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_service_admin_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_service_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_service_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_service_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_service_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_service_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_service_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_service_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_unread_message_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_unread_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_unread_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_unread_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_unread_message_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_unread_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_unread_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_unread_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mark_message_as_read_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $message_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mark_message_as_read_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mark_message_as_read_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mark_message_as_read_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mark_message_as_read_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mark_message_as_read_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mark_message_as_read_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mark_message_as_read_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mark_all_message_as_read_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mark_all_message_as_read_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mark_all_message_as_read_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mark_all_message_as_read_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mark_all_message_as_read_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mark_all_message_as_read_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mark_all_message_as_read_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mark_all_message_as_read_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_permission_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_permission_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_permission_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_permission_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_permission_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_permission_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_pay_record_method_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $pay_record_id = null;
  public $method_json = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'method_json',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_pay_record_method_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_pay_record_method_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_pay_record_method_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_pay_record_method_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_pay_record_method_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_pay_record_method_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_pay_record_method_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_feedback_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $content = null;
  public $comment_type = null;
  public $entry_id = null;
  public $zone_id = null;
  public $district_id = null;
  public $city_id = null;
  public $geohash = null;
  public $user_agent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'comment_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'zone_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'district_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'user_agent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_feedback_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_feedback_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_feedback_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_feedback_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_feedback_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_feedback_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_feedback_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_feedback_args extends TBase {
  static $_TSPEC;

  public $feedback_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedback_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_feedback_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_feedback_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_feedback_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_feedback_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TFeedback',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_feedback_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_feedback_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_feedback_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_feedback_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFeedbackQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_feedback_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_feedback_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_feedback_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_feedback_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_feedback_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_feedback_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_feedback_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_feedback_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFeedbackQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_feedback_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_feedback_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_feedback_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_feedback_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TFeedback',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_feedback_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_feedback_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_feedback_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_feedback_with_replies_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFeedbackQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_feedback_with_replies_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_feedback_with_replies_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_feedback_with_replies_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_feedback_with_replies_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCFeedbackWithReplies',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_feedback_with_replies_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_feedback_with_replies_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_feedback_with_replies_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_feedback_reply_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFeedbackReplyQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_feedback_reply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_feedback_reply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_feedback_reply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_feedback_reply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_feedback_reply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_feedback_reply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_feedback_reply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_feedback_reply_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFeedbackReplyQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_feedback_reply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_feedback_reply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_feedback_reply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_feedback_reply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TFeedbackReply',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_feedback_reply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_feedback_reply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_feedback_reply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_feedback_reply_args extends TBase {
  static $_TSPEC;

  public $feedback_id = null;
  public $user_id = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedback_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_feedback_reply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_feedback_reply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_feedback_reply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_feedback_reply_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_feedback_reply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_feedback_reply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_feedback_reply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_restaurant_admin_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_restaurant_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_restaurant_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_restaurant_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_restaurant_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_restaurant_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_restaurant_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_restaurant_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_restaurant_admin_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_restaurant_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_restaurant_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_restaurant_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_restaurant_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_restaurant_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_restaurant_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_restaurant_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_modify_payment_quota_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $payment_quota = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'payment_quota',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_modify_payment_quota_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_modify_payment_quota_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_modify_payment_quota_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_modify_payment_quota_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_modify_payment_quota_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_modify_payment_quota_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_modify_payment_quota_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_email_validate_str_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_email_validate_str_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_email_validate_str_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_email_validate_str_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_email_validate_str_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_email_validate_str_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_email_validate_str_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_email_validate_str_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_validate_old_mobile_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_validate_old_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_validate_old_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_validate_old_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_validate_old_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_validate_old_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_validate_old_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_validate_old_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_validate_code_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $terminal = null;
  public $terminal_type = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'terminal',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'terminal_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_validate_code_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_validate_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_validate_code_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_validate_code_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_validate_code_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_validate_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_validate_code_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_validate_terminal_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $terminal = null;
  public $terminal_type = null;
  public $validate_code = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'terminal',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'terminal_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'validate_code',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_validate_terminal_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_validate_terminal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_validate_terminal_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_validate_terminal_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_validate_terminal_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_validate_terminal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_validate_terminal_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unbind_terminal_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $terminal_type = null;
  public $validate_code = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'terminal_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'validate_code',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unbind_terminal_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unbind_terminal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unbind_terminal_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unbind_terminal_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unbind_terminal_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unbind_terminal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unbind_terminal_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_notice_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $type_code = null;
  public $title = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type_code',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_notice_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_notice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_notice_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_notice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_notice_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_notice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_notice_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_unsent_notice_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_send_unsent_notice_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_unsent_notice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_unsent_notice_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_unsent_notice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_unsent_notice_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_unsent_notice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_unsent_notice_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_unsent_notice_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_unsent_notice_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_unsent_notice_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_unsent_notice_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_unsent_notice_by_user_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_unsent_notice_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_unsent_notice_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_unsent_notice_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_coupon_by_sms_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_coupon_by_sms_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_coupon_by_sms_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_coupon_by_sms_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_coupon_by_sms_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_coupon_by_sms_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_coupon_by_sms_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_coupon_by_sms_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_coupon_by_sms2_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_coupon_by_sms2_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_coupon_by_sms2_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_coupon_by_sms2_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_coupon_by_sms2_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_coupon_by_sms2_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_coupon_by_sms2_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_coupon_by_sms2_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_active_email_args extends TBase {
  static $_TSPEC;

  public $active_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'active_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_active_email_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_active_email_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_active_email_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_active_email_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_active_email_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_active_email_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_active_email_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_retrieval_password_final_token_args extends TBase {
  static $_TSPEC;

  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_retrieval_password_final_token_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_retrieval_password_final_token_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_retrieval_password_final_token_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_retrieval_password_final_token_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_retrieval_password_final_token_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_retrieval_password_final_token_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_retrieval_password_final_token_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_reset_forgetted_password_args extends TBase {
  static $_TSPEC;

  public $final_token = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'final_token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_reset_forgetted_password_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_reset_forgetted_password_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_reset_forgetted_password_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_reset_forgetted_password_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_reset_forgetted_password_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_reset_forgetted_password_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_reset_forgetted_password_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_password_retrieval_token_args extends TBase {
  static $_TSPEC;

  public $final_token = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'final_token',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_password_retrieval_token_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_password_retrieval_token_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_password_retrieval_token_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_password_retrieval_token_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_password_retrieval_token_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_password_retrieval_token_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_password_retrieval_token_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_point_change_except_order_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_point_change_except_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_point_change_except_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_point_change_except_order_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_point_change_except_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_point_change_except_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_point_change_except_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_point_change_except_order_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_pay_error_args extends TBase {
  static $_TSPEC;

  public $error_id = null;
  public $t_error = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 't_error',
          'type' => TType::STRUCT,
          'class' => '\EUS\TPayError',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_pay_error_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_pay_error_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_pay_error_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_pay_error_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_pay_error_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_pay_error_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_pay_error_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_args extends TBase {
  static $_TSPEC;

  public $record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TPayRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_by_unique_id_args extends TBase {
  static $_TSPEC;

  public $unique_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unique_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_by_unique_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_by_unique_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_by_unique_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_by_unique_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TPayRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_by_unique_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_by_unique_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_by_unique_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_id_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_id_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_id_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_id_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_id_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_id_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_id_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_id_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_order_id_by_pay_record_id_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_order_id_by_pay_record_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_order_id_by_pay_record_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_order_id_by_pay_record_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_order_id_by_pay_record_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_order_id_by_pay_record_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_order_id_by_pay_record_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_order_id_by_pay_record_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_function_blocked_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $func = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'func',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_function_blocked_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_function_blocked_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_function_blocked_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_function_blocked_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_function_blocked_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_function_blocked_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_function_blocked_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_trade_record_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TTradeRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_trade_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_trade_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_trade_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_trade_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_trade_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_trade_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_trade_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_parse_ip_args extends TBase {
  static $_TSPEC;

  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_parse_ip_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_parse_ip_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_parse_ip_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_parse_ip_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_parse_ip_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_parse_ip_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_parse_ip_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sum_balance_change_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserBalanceChangeQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sum_balance_change_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sum_balance_change_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sum_balance_change_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sum_balance_change_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sum_balance_change_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sum_balance_change_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sum_balance_change_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_user_place_args extends TBase {
  static $_TSPEC;

  public $set_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'set_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserPlace',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_user_place_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_user_place_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_user_place_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_user_place_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_user_place_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_user_place_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_user_place_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_user_place_args extends TBase {
  static $_TSPEC;

  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_user_place_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_user_place_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_user_place_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_delete_user_place_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_delete_user_place_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_delete_user_place_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_delete_user_place_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_account_get_stats_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $begin_datetime = null;
  public $end_datetime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'begin_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'end_datetime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_account_get_stats_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_account_get_stats_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_account_get_stats_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_account_get_stats_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCAccountDailyStats',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_account_get_stats_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_account_get_stats_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_account_get_stats_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_account_get_stats_by_type_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $type_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'type_code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_account_get_stats_by_type_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_account_get_stats_by_type_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_account_get_stats_by_type_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_account_get_stats_by_type_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_account_get_stats_by_type_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_account_get_stats_by_type_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_account_get_stats_by_type_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_all_groups_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_all_groups_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_all_groups_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_all_groups_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_all_groups_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TGroup',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_all_groups_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_all_groups_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_all_groups_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_all_permissions_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_all_permissions_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_all_permissions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_all_permissions_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_all_permissions_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TPermission',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_all_permissions_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_all_permissions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_all_permissions_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_all_group_permissions_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_all_group_permissions_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_all_group_permissions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_all_group_permissions_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_all_group_permissions_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TGroupPermission',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_all_group_permissions_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_all_group_permissions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_all_group_permissions_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_add_group_permission_args extends TBase {
  static $_TSPEC;

  public $group_id = null;
  public $permission_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'permission_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_add_group_permission_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_add_group_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_add_group_permission_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_add_group_permission_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_add_group_permission_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_add_group_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_add_group_permission_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_remove_group_permission_args extends TBase {
  static $_TSPEC;

  public $group_id = null;
  public $permission_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'permission_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_remove_group_permission_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_remove_group_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_remove_group_permission_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_remove_group_permission_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_remove_group_permission_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_remove_group_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_remove_group_permission_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_save_group_args extends TBase {
  static $_TSPEC;

  public $group_id = null;
  public $group_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'group_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TGroup',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_save_group_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_save_group_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_save_group_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_save_group_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_save_group_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_save_group_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_save_group_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_save_permission_args extends TBase {
  static $_TSPEC;

  public $permission_id = null;
  public $permission_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'permission_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'permission_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TPermission',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_save_permission_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_save_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_save_permission_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_save_permission_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_save_permission_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_save_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_save_permission_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_balance_change_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleBalanceChangeQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_balance_change_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_balance_change_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_balance_change_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_balance_change_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_balance_change_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_balance_change_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_balance_change_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_balance_change_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleBalanceChangeQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_balance_change_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_balance_change_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_balance_change_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_balance_change_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCWalleBalanceChange',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_balance_change_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_balance_change_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_balance_change_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_withdraw_apply_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleWithdrawApplyQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_withdraw_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_withdraw_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_withdraw_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_withdraw_apply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_withdraw_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_withdraw_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_withdraw_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_withdraw_apply_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleWithdrawApplyQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_withdraw_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_withdraw_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_withdraw_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_withdraw_apply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCWalleWithdrawApply',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_withdraw_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_withdraw_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_withdraw_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_withdraw_record_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleWithdrawRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_withdraw_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_withdraw_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_withdraw_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_withdraw_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_withdraw_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_withdraw_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_withdraw_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_withdraw_process_record_batch_id_args extends TBase {
  static $_TSPEC;

  public $ids = null;
  public $batch_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'batch_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_withdraw_process_record_batch_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_withdraw_process_record_batch_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_withdraw_process_record_batch_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_withdraw_process_record_batch_id_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_withdraw_process_record_batch_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_withdraw_process_record_batch_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_withdraw_process_record_batch_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_withdraw_record_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleWithdrawRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_withdraw_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_withdraw_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_withdraw_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_withdraw_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TWithdrawRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_withdraw_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_withdraw_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_withdraw_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mget_withdraw_record_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mget_withdraw_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mget_withdraw_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mget_withdraw_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mget_withdraw_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TWithdrawRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mget_withdraw_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mget_withdraw_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mget_withdraw_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_withdraw_record_status_args extends TBase {
  static $_TSPEC;

  public $ids = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_withdraw_record_status_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_withdraw_record_status_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_withdraw_record_status_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_withdraw_record_status_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_withdraw_record_status_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_withdraw_record_status_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_withdraw_record_status_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_args extends TBase {
  static $_TSPEC;

  public $withdraw_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'withdraw_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWithdrawProcessRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_latest_withdraw_process_record_by_withdraw_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_bind_email_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $admin_user_id = null;
  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_bind_email_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_bind_email_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_bind_email_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_bind_email_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_bind_email_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_bind_email_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_bind_email_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_online_sev_args extends TBase {
  static $_TSPEC;

  public $process_types = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'process_types',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_online_sev_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_online_sev_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_online_sev_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_online_sev_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TDopUser',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_online_sev_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_online_sev_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_online_sev_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_point_change_list_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TPointChangeRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_point_change_list_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_point_change_list_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_point_change_list_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_point_change_list_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_point_change_list_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_point_change_list_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_point_change_list_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_user_list_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_user_list_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_user_list_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_user_list_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_user_list_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_user_list_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_user_list_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_user_list_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_user_gift_list_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserGiftQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_user_gift_list_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_user_gift_list_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_user_gift_list_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_user_gift_list_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_user_gift_list_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_user_gift_list_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_user_gift_list_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_user_gift_list_by_ids_args extends TBase {
  static $_TSPEC;

  public $user_gift_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_user_gift_list_by_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_user_gift_list_by_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_user_gift_list_by_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_user_gift_list_by_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_user_gift_list_by_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_user_gift_list_by_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_user_gift_list_by_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_active_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $is_active = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_active',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_active_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_active_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_active_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_active_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_active_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_active_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_active_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_user_active_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $admin_user_id = null;
  public $is_active = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'is_active',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_user_active_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_user_active_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_user_active_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_user_active_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_user_active_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_user_active_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_user_active_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_name_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_name_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_name_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_name_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_name_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_name_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_name_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_name_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_super_admin_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $is_super_admin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_super_admin',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_super_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_super_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_super_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_set_super_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_set_super_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_set_super_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_set_super_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_unbind_email_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_unbind_email_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_unbind_email_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_unbind_email_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_unbind_email_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_unbind_email_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_unbind_email_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_unbind_email_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_unbind_mobile_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_unbind_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_unbind_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_unbind_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_unbind_mobile_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_unbind_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_unbind_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_unbind_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_change_mobile_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $admin_user_id = null;
  public $new_mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'new_mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_change_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_change_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_change_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_change_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_change_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_change_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_change_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_online_payment_apply_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleOnlinePaymentApplyQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_online_payment_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_online_payment_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_online_payment_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_online_payment_apply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_online_payment_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_online_payment_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_online_payment_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_online_payment_apply_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWalleOnlinePaymentApplyQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_online_payment_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_online_payment_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_online_payment_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_online_payment_apply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCWalleOnlinePaymentApply',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_online_payment_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_online_payment_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_online_payment_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_point_change_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWallePointChangeQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_point_change_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_point_change_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_point_change_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_point_change_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TPointChangeRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_point_change_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_point_change_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_point_change_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_point_change_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWallePointChangeQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_point_change_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_point_change_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_point_change_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_point_change_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_point_change_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_point_change_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_point_change_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_pay_stats_detail_count_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWallePayStatsQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_pay_stats_detail_count_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_pay_stats_detail_count_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_pay_stats_detail_count_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_pay_stats_detail_count_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_pay_stats_detail_count_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_pay_stats_detail_count_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_pay_stats_detail_count_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_pay_stats_overview_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWallePayStatsQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_pay_stats_overview_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_pay_stats_overview_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_pay_stats_overview_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_pay_stats_overview_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TCWallePayStatsOverview',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_pay_stats_overview_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_pay_stats_overview_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_pay_stats_overview_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_pay_stats_detail_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWallePayStatsQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_pay_stats_detail_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_pay_stats_detail_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_pay_stats_detail_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_pay_stats_detail_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCWallePayStatsDetail',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_pay_stats_detail_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_pay_stats_detail_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_pay_stats_detail_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_feedback_processed_args extends TBase {
  static $_TSPEC;

  public $feedback_ids = null;
  public $is_processed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedback_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'is_processed',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_feedback_processed_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_feedback_processed_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_feedback_processed_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_feedback_processed_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_feedback_processed_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_feedback_processed_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_feedback_processed_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_withdraw_process_batch_args extends TBase {
  static $_TSPEC;

  public $statuses = null;
  public $batch_id = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        2 => array(
          'var' => 'batch_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_withdraw_process_batch_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_withdraw_process_batch_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_withdraw_process_batch_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_query_withdraw_process_batch_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCWithdrawProcessBatch',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_query_withdraw_process_batch_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_query_withdraw_process_batch_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_query_withdraw_process_batch_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_feedback_valid_args extends TBase {
  static $_TSPEC;

  public $feedback_ids = null;
  public $is_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedback_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_feedback_valid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_feedback_valid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_feedback_valid_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_mset_feedback_valid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_mset_feedback_valid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_mset_feedback_valid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_mset_feedback_valid_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_withdraw_process_batch_args extends TBase {
  static $_TSPEC;

  public $statuses = null;
  public $batch_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        2 => array(
          'var' => 'batch_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_withdraw_process_batch_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_withdraw_process_batch_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_withdraw_process_batch_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_count_withdraw_process_batch_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_count_withdraw_process_batch_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_count_withdraw_process_batch_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_count_withdraw_process_batch_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_withdraw_process_record_by_batch_id_args extends TBase {
  static $_TSPEC;

  public $batch_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_withdraw_process_record_by_batch_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_withdraw_process_record_by_batch_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_withdraw_process_record_by_batch_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_get_withdraw_process_record_by_batch_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TWithdrawProcessRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_get_withdraw_process_record_by_batch_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_get_withdraw_process_record_by_batch_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_get_withdraw_process_record_by_batch_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_dms_get_dop_user_list_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_dms_get_dop_user_list_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_dms_get_dop_user_list_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_dms_get_dop_user_list_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_dms_get_dop_user_list_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_dms_get_dop_user_list_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_dms_get_dop_user_list_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_dms_get_dop_user_list_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_third_signup_args extends TBase {
  static $_TSPEC;

  public $third_user_id = null;
  public $session_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'third_user_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_third_signup_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_third_signup_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_third_signup_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_third_signup_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_third_signup_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_third_signup_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_third_signup_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_device_user_args extends TBase {
  static $_TSPEC;

  public $query = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query',
          'type' => TType::STRUCT,
          'class' => '\EUS\TDeviceUserQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_device_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_device_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_device_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_device_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TDeviceUser',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_device_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_device_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_device_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_query_blocked_device_user_list_args extends TBase {
  static $_TSPEC;

  public $query = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query',
          'type' => TType::STRUCT,
          'class' => '\EUS\TBlockedDeviceUserQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_query_blocked_device_user_list_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_query_blocked_device_user_list_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_query_blocked_device_user_list_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_query_blocked_device_user_list_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TBlockedDeviceUser',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_query_blocked_device_user_list_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_query_blocked_device_user_list_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_query_blocked_device_user_list_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_get_sns_map_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_get_sns_map_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_get_sns_map_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_get_sns_map_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_get_sns_map_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TSNSMapStruct',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_get_sns_map_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_get_sns_map_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_get_sns_map_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_get_sns_map_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_get_sns_map_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_get_sns_map_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_get_sns_map_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_get_sns_map_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TSNSMapStructNew',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_get_sns_map_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_get_sns_map_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_get_sns_map_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_save_food_image_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $food_id = null;
  public $image_hash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'image_hash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_save_food_image_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_save_food_image_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_save_food_image_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_save_food_image_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_save_food_image_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_save_food_image_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_save_food_image_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_add_feedback_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $username = null;
  public $content = null;
  public $feedback_type = null;
  public $version = null;
  public $description = null;
  public $contact = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'feedback_type',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'contact',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_add_feedback_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_add_feedback_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_add_feedback_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mobile_add_feedback_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mobile_add_feedback_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mobile_add_feedback_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mobile_add_feedback_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_upload_alipay_accounts_args extends TBase {
  static $_TSPEC;

  public $raw_accounts_str = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'raw_accounts_str',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_upload_alipay_accounts_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_upload_alipay_accounts_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_upload_alipay_accounts_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_upload_alipay_accounts_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_upload_alipay_accounts_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_upload_alipay_accounts_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_upload_alipay_accounts_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_upload_cgb_accounts_args extends TBase {
  static $_TSPEC;

  public $raw_accounts_str = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'raw_accounts_str',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_upload_cgb_accounts_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_upload_cgb_accounts_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_upload_cgb_accounts_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_upload_cgb_accounts_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_upload_cgb_accounts_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_upload_cgb_accounts_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_upload_cgb_accounts_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_for_order_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $order_id = null;
  public $pay_company_id = null;
  public $come_from = null;
  public $pay_bank = null;
  public $hongbao_sn = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'pay_company_id',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'come_from',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'pay_bank',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'hongbao_sn',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_for_order_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_for_order_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_for_order_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_for_order_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_for_order_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_for_order_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_for_order_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_pay_method_for_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $pay_company_id = null;
  public $come_from = null;
  public $pay_bank = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'pay_company_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'come_from',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'pay_bank',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_pay_method_for_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_pay_method_for_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_pay_method_for_order_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_pay_method_for_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_pay_method_for_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_pay_method_for_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_pay_method_for_order_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_pay_for_order_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $order_id = null;
  public $original_total = null;
  public $hongbao_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'original_total',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'hongbao_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_pay_for_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_pay_for_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_pay_for_order_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_walle_pay_for_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_walle_pay_for_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_walle_pay_for_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_walle_pay_for_order_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_for_contract_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $contract_sn = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'contract_sn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_for_contract_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_for_contract_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_for_contract_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_for_contract_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_for_contract_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_for_contract_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_for_contract_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_for_contract_direct_args extends TBase {
  static $_TSPEC;

  public $contract_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'contract_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_for_contract_direct_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_for_contract_direct_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_for_contract_direct_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_for_contract_direct_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_for_contract_direct_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_for_contract_direct_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_for_contract_direct_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_success_args extends TBase {
  static $_TSPEC;

  public $pay_return_info = null;
  public $from_action = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_return_info',
          'type' => TType::STRUCT,
          'class' => '\EUS\TCPayReturnInfo',
          ),
        2 => array(
          'var' => 'from_action',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_success_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_success_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_success_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_success_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_success_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_success_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_success_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_manually_success_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;
  public $user_id = null;
  public $admin_user_id = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_manually_success_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_manually_success_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_manually_success_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_manually_success_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_manually_success_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_manually_success_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_manually_success_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_record_make_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $pay_co_id = null;
  public $total_fee = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pay_co_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'total_fee',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_record_make_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_record_make_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_record_make_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_record_make_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_record_make_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_record_make_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_record_make_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_record_make_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $pay_company_id = null;
  public $come_from = null;
  public $pay_bank = null;
  public $total_fee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pay_company_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'come_from',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'pay_bank',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'total_fee',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_record_make_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_record_make_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_record_make_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_record_make_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_record_make_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_record_make_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_record_make_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_record_fail_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_record_fail_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_record_fail_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_record_fail_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_record_fail_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_record_fail_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_record_fail_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_record_fail_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_direct_order_pay_fail_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_direct_order_pay_fail_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_direct_order_pay_fail_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_direct_order_pay_fail_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_direct_order_pay_fail_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_direct_order_pay_fail_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_direct_order_pay_fail_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_direct_order_pay_fail_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_direct_order_pay_fail_new_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_direct_order_pay_fail_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_direct_order_pay_fail_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_direct_order_pay_fail_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_direct_order_pay_fail_new_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_direct_order_pay_fail_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_direct_order_pay_fail_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_direct_order_pay_fail_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_is_success_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_is_success_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_is_success_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_is_success_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_is_success_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_is_success_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_is_success_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_is_success_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_get_alipay_info_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_get_alipay_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_get_alipay_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_get_alipay_info_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_get_alipay_info_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TAlipayInfo',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_get_alipay_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_get_alipay_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_get_alipay_info_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_get_today_payment_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_get_today_payment_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_get_today_payment_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_get_today_payment_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_pay_get_today_payment_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_pay_get_today_payment_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_pay_get_today_payment_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_pay_get_today_payment_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_set_fatal_args extends TBase {
  static $_TSPEC;

  public $withdraw_id = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'withdraw_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_set_fatal_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_set_fatal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_set_fatal_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_set_fatal_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_set_fatal_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_set_fatal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_set_fatal_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_get_apply_records_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_get_apply_records_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_get_apply_records_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_get_apply_records_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_get_apply_records_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCWithdrawRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_get_apply_records_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_get_apply_records_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_get_apply_records_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_restaurant_apply_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $process_user_id = null;
  public $amount = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'process_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_restaurant_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_restaurant_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_restaurant_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_restaurant_apply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_restaurant_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_restaurant_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_restaurant_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_submit_withdraw_record_args extends TBase {
  static $_TSPEC;

  public $withdraw_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'withdraw_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_submit_withdraw_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_submit_withdraw_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_submit_withdraw_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_submit_withdraw_record_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_submit_withdraw_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_submit_withdraw_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_submit_withdraw_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_withdraw_record_args extends TBase {
  static $_TSPEC;

  public $withdraw_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'withdraw_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_withdraw_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_withdraw_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_withdraw_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_withdraw_record_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_withdraw_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_withdraw_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_withdraw_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_user_drawback_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $process_user_id = null;
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'process_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_user_drawback_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_user_drawback_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_user_drawback_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_withdraw_user_drawback_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_withdraw_user_drawback_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_withdraw_user_drawback_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_withdraw_user_drawback_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_anonymous_user_drawback_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_anonymous_user_drawback_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_anonymous_user_drawback_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_anonymous_user_drawback_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_anonymous_user_drawback_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_anonymous_user_drawback_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_anonymous_user_drawback_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_anonymous_user_drawback_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_alipay_refund_apply_info_args extends TBase {
  static $_TSPEC;

  public $batch_no = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_no',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_alipay_refund_apply_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_alipay_refund_apply_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_alipay_refund_apply_info_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_alipay_refund_apply_info_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TCAlipayRefundApplyInfo',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_alipay_refund_apply_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_alipay_refund_apply_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_alipay_refund_apply_info_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_alipay_unprocessed_batch_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_query_alipay_unprocessed_batch_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_alipay_unprocessed_batch_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_alipay_unprocessed_batch_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_alipay_unprocessed_batch_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCAlipayBatchInfo',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_alipay_unprocessed_batch_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_alipay_unprocessed_batch_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_alipay_unprocessed_batch_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_alipay_drawback_process_notify_args extends TBase {
  static $_TSPEC;

  public $drawback_process_notify = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'drawback_process_notify',
          'type' => TType::STRUCT,
          'class' => '\EUS\TCDrawbackProcessNotify',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_alipay_drawback_process_notify_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_alipay_drawback_process_notify_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_alipay_drawback_process_notify_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_alipay_drawback_process_notify_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_alipay_drawback_process_notify_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_alipay_drawback_process_notify_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_alipay_drawback_process_notify_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_drawback_process_record_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TDrawbackProcessRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_drawback_process_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_drawback_process_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_drawback_process_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_drawback_process_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCDrawbackProcessRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_drawback_process_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_drawback_process_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_drawback_process_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_retry_drawback_process_args extends TBase {
  static $_TSPEC;

  public $drawback_process_id = null;
  public $process_user_id = null;
  public $pay_platform = null;
  public $pay_account = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'drawback_process_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'process_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pay_platform',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'pay_account',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_retry_drawback_process_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_retry_drawback_process_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_retry_drawback_process_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_retry_drawback_process_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_retry_drawback_process_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_retry_drawback_process_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_retry_drawback_process_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_drawback_process_manually_success_args extends TBase {
  static $_TSPEC;

  public $drawback_process_id = null;
  public $image_hash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'drawback_process_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'image_hash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_drawback_process_manually_success_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_drawback_process_manually_success_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_drawback_process_manually_success_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_drawback_process_manually_success_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_drawback_process_manually_success_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_drawback_process_manually_success_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_drawback_process_manually_success_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_alipay_refund_url_args extends TBase {
  static $_TSPEC;

  public $batch_no = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_no',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_alipay_refund_url_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_alipay_refund_url_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_alipay_refund_url_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_alipay_refund_url_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_alipay_refund_url_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_alipay_refund_url_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_alipay_refund_url_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_drawback_report_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_get_drawback_report_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_drawback_report_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_drawback_report_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_drawback_report_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TCDrawbackReport',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_drawback_report_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_drawback_report_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_drawback_report_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_drawback_result_info_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_drawback_result_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_drawback_result_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_drawback_result_info_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_drawback_result_info_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TCDrawbackResultInfo',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_drawback_result_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_drawback_result_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_drawback_result_info_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_drawback_result_info_new_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_drawback_result_info_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_drawback_result_info_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_drawback_result_info_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_drawback_result_info_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TCDrawbackResultInfoNew',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_drawback_result_info_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_drawback_result_info_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_drawback_result_info_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_apply_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_apply_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_update_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_update_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_update_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_update_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_update_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_update_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_update_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_update_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_approve_args extends TBase {
  static $_TSPEC;

  public $record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_approve_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_approve_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_approve_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_approve_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_approve_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_approve_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_approve_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_overrule_args extends TBase {
  static $_TSPEC;

  public $record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_overrule_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_overrule_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_overrule_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_overrule_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_overrule_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_overrule_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_overrule_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bankcard_bind_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bankcard_bind_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bankcard_bind_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bankcard_bind_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_balance_reconciliation_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_balance_reconciliation_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_balance_reconciliation_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_balance_reconciliation_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_balance_reconciliation_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_balance_reconciliation_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_balance_reconciliation_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_balance_reconciliation_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_hongbao_exchange_args extends TBase {
  static $_TSPEC;

  public $batch_sn = null;
  public $count = null;
  public $value = null;
  public $sum_condition = null;
  public $duration = null;
  public $expire_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'value',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'sum_condition',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'duration',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'expire_date',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_hongbao_exchange_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_hongbao_exchange_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_hongbao_exchange_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_hongbao_exchange_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_hongbao_exchange_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_hongbao_exchange_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_hongbao_exchange_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_hongbao_args extends TBase {
  static $_TSPEC;

  public $user_ids = null;
  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\THongbao',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_restaurant_activity_hongbao_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_restaurant_activity_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_restaurant_activity_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_restaurant_activity_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_generate_restaurant_activity_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_generate_restaurant_activity_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_generate_restaurant_activity_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_generate_restaurant_activity_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_exchange_hongbao_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $exchange_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'exchange_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_exchange_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_exchange_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_exchange_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_exchange_hongbao_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_exchange_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_exchange_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_exchange_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_charge_hongbao_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_charge_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_charge_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_charge_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_charge_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_charge_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_charge_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_charge_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_new_user_hongbao_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_new_user_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_new_user_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_new_user_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_new_user_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_new_user_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_new_user_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_new_user_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_mobile_hongbao_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_mobile_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_mobile_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_mobile_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_bind_mobile_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_bind_mobile_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_bind_mobile_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_bind_mobile_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_award_refer_hongbao_args extends TBase {
  static $_TSPEC;

  public $refer_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'refer_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_award_refer_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_award_refer_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_award_refer_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_award_refer_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_award_refer_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_award_refer_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_award_refer_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_punish_refers_args extends TBase {
  static $_TSPEC;

  public $refer_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'refer_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_punish_refers_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_punish_refers_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_punish_refers_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_punish_refers_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_punish_refers_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_punish_refers_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_punish_refers_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_award_refer_bind_mobile_hongbao_args extends TBase {
  static $_TSPEC;

  public $refer_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'refer_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_award_refer_bind_mobile_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_award_refer_bind_mobile_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_award_refer_bind_mobile_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_award_refer_bind_mobile_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_award_refer_bind_mobile_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_award_refer_bind_mobile_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_award_refer_bind_mobile_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_user_certification_apply_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $user_certification_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_certification_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserCertificationApply',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_user_certification_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_user_certification_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_user_certification_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_user_certification_apply_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_user_certification_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_user_certification_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_user_certification_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_user_certification_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $to_status = null;
  public $remark = null;
  public $process_user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'to_status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'process_user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_user_certification_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_user_certification_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_user_certification_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_user_certification_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_user_certification_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_user_certification_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_user_certification_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_certification_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_certification_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_certification_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_certification_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_certification_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserCertification',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_certification_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_certification_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_certification_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_certification_process_records_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_certification_process_records_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_certification_process_records_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_certification_process_records_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_certification_process_records_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCUserCertificationProcessRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_certification_process_records_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_certification_process_records_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_certification_process_records_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_post_process_user_certification_args extends TBase {
  static $_TSPEC;

  public $record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_post_process_user_certification_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_post_process_user_certification_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_post_process_user_certification_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_post_process_user_certification_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_post_process_user_certification_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_post_process_user_certification_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_post_process_user_certification_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_new_user_bankcard_apply_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $city_name = null;
  public $branch_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'city_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'branch_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_new_user_bankcard_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_new_user_bankcard_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_new_user_bankcard_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_new_user_bankcard_apply_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_new_user_bankcard_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_new_user_bankcard_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_new_user_bankcard_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_bankcard_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $city_name = null;
  public $branch_name = null;
  public $process_user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'city_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'branch_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'process_user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_bankcard_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_bankcard_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_bankcard_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_bankcard_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_bankcard_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_bankcard_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_bankcard_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_bankcard_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $city_name = null;
  public $branch_name = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'city_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'branch_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_bankcard_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_bankcard_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_bankcard_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_update_user_bankcard_by_user_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_update_user_bankcard_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_update_user_bankcard_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_update_user_bankcard_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_certification_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserCertificationQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_certification_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_certification_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_certification_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_certification_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserCertification',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_certification_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_certification_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_certification_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_user_certification_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserCertificationQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_user_certification_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_user_certification_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_user_certification_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_user_certification_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_user_certification_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_user_certification_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_user_certification_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_create_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $sso_type = null;
  public $info_raw = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sso_type',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'info_raw',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_create_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_create_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_create_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_create_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_create_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_create_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_create_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_is_tfauthed_args extends TBase {
  static $_TSPEC;

  public $sso_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sso_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_is_tfauthed_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_is_tfauthed_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_is_tfauthed_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_is_tfauthed_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_is_tfauthed_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_is_tfauthed_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_is_tfauthed_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_tfauth_args extends TBase {
  static $_TSPEC;

  public $sso_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sso_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_tfauth_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_tfauth_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_tfauth_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_tfauth_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_tfauth_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_tfauth_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_tfauth_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_destroy_args extends TBase {
  static $_TSPEC;

  public $sso_id = null;
  public $action = null;
  public $user_id = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sso_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_destroy_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_destroy_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_destroy_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_destroy_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_destroy_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_destroy_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_destroy_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_destroy_admin_args extends TBase {
  static $_TSPEC;

  public $sso_id = null;
  public $action = null;
  public $op_user_id = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sso_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'op_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_destroy_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_destroy_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_destroy_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_destroy_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_destroy_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_destroy_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_destroy_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_destroy_system_args extends TBase {
  static $_TSPEC;

  public $sso_id = null;
  public $action = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sso_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_destroy_system_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_destroy_system_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_destroy_system_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_destroy_system_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_destroy_system_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_destroy_system_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_destroy_system_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_check_args extends TBase {
  static $_TSPEC;

  public $sso_id = null;
  public $sso_app = null;
  public $info_raw = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sso_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sso_app',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'info_raw',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_check_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_check_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_check_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_check_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_check_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_check_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_check_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_count_valid_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_count_valid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_count_valid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_count_valid_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_count_valid_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_count_valid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_count_valid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_count_valid_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_mget_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $is_valid = null;
  public $start_date = null;
  public $end_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'start_date',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'end_date',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_mget_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_mget_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_mget_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sso_mget_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sso_mget_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sso_mget_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sso_mget_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_create_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $info_raw = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'info_raw',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_create_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_create_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_create_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_create_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_create_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_create_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_create_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_destroy_args extends TBase {
  static $_TSPEC;

  public $ucb_id = null;
  public $action = null;
  public $user_id = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ucb_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_destroy_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_destroy_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_destroy_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_destroy_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_destroy_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_destroy_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_destroy_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_destroy_admin_args extends TBase {
  static $_TSPEC;

  public $ucb_id = null;
  public $action = null;
  public $admin_user_id = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ucb_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_destroy_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_destroy_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_destroy_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_destroy_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_destroy_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_destroy_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_destroy_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_destroy_system_args extends TBase {
  static $_TSPEC;

  public $ucb_id = null;
  public $action = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ucb_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_destroy_system_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_destroy_system_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_destroy_system_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_destroy_system_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_destroy_system_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_destroy_system_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_destroy_system_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_check_args extends TBase {
  static $_TSPEC;

  public $ucb_ids = null;
  public $user_id = null;
  public $info_raw = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ucb_ids',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'info_raw',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_check_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_check_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_check_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_check_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_check_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_check_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_check_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_mget_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $is_valid = null;
  public $start_date = null;
  public $end_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'start_date',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'end_date',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_mget_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_mget_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_mget_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_ucb_mget_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_ucb_mget_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_ucb_mget_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_ucb_mget_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umcb_create_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mobile = null;
  public $info_raw = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'info_raw',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umcb_create_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umcb_create_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umcb_create_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umcb_create_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umcb_create_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umcb_create_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umcb_create_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umcb_check_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mobile = null;
  public $info_raw = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'info_raw',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umcb_check_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umcb_check_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umcb_check_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umcb_check_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umcb_check_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umcb_check_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umcb_check_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umb_create_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umb_create_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umb_create_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umb_create_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umb_create_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umb_create_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umb_create_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umb_create_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umb_destroy_admin_args extends TBase {
  static $_TSPEC;

  public $umb_id = null;
  public $action = null;
  public $admin_user_id = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'umb_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umb_destroy_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umb_destroy_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umb_destroy_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umb_destroy_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umb_destroy_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umb_destroy_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umb_destroy_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umb_mget_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $mobile = null;
  public $is_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umb_mget_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umb_mget_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umb_mget_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_umb_mget_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_umb_mget_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_umb_mget_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_umb_mget_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mcb_destroy_admin_args extends TBase {
  static $_TSPEC;

  public $mcb_id = null;
  public $action = null;
  public $admin_user_id = null;
  public $ip_addr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mcb_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ip_addr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mcb_destroy_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mcb_destroy_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mcb_destroy_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mcb_destroy_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mcb_destroy_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mcb_destroy_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mcb_destroy_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mcb_destroy_system_args extends TBase {
  static $_TSPEC;

  public $mcb_id = null;
  public $action = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mcb_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mcb_destroy_system_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mcb_destroy_system_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mcb_destroy_system_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mcb_destroy_system_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mcb_destroy_system_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mcb_destroy_system_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mcb_destroy_system_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mcb_mget_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $is_valid = null;
  public $start_date = null;
  public $end_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'start_date',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'end_date',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mcb_mget_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mcb_mget_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mcb_mget_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mcb_mget_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mcb_mget_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mcb_mget_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mcb_mget_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_blocked_device_args extends TBase {
  static $_TSPEC;

  public $eleme_device_id = null;
  public $user_id = null;
  public $operator_user_id = null;
  public $reason = null;
  public $come_from = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eleme_device_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'operator_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'come_from',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_blocked_device_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_blocked_device_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_blocked_device_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_add_blocked_device_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_add_blocked_device_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_add_blocked_device_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_add_blocked_device_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_discount_map_args extends TBase {
  static $_TSPEC;

  public $come_from = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'come_from',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_discount_map_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_discount_map_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_discount_map_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_discount_map_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I16,
          'vtype' => TType::DOUBLE,
          'key' => array(
            'type' => TType::I16,
          ),
          'val' => array(
            'type' => TType::DOUBLE,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_discount_map_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_discount_map_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_discount_map_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_timeout_message_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_timeout_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_timeout_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_timeout_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_timeout_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_timeout_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_timeout_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_timeout_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_outofdate_message_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_outofdate_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_outofdate_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_outofdate_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_outofdate_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_outofdate_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_outofdate_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_outofdate_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_back_up_mysql_task_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_back_up_mysql_task_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_back_up_mysql_task_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_back_up_mysql_task_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_back_up_mysql_task_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_back_up_mysql_task_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_back_up_mysql_task_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_back_up_mysql_task_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_timeout_mysql_task_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_timeout_mysql_task_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_timeout_mysql_task_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_timeout_mysql_task_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_timeout_mysql_task_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_timeout_mysql_task_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_timeout_mysql_task_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_timeout_mysql_task_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_signal_post_make_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_signal_post_make_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_signal_post_make_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_signal_post_make_order_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_signal_post_make_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_signal_post_make_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_signal_post_make_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_signal_post_make_order_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_signal_post_process_order_args extends TBase {
  static $_TSPEC;

  public $order_process_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_process_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_signal_post_process_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_signal_post_process_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_signal_post_process_order_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_signal_post_process_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_signal_post_process_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_signal_post_process_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_signal_post_process_order_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_claim_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_claim_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_claim_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_claim_order_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_claim_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_claim_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_claim_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_claim_order_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_push_android_message_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_push_android_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_push_android_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_push_android_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_push_android_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_push_android_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_push_android_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_push_android_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_push_ios_message_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_push_ios_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_push_ios_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_push_ios_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_push_ios_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_push_ios_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_push_ios_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_push_ios_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_add_user_message_args extends TBase {
  static $_TSPEC;

  public $message_type = null;
  public $target_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'target_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_add_user_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_add_user_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_add_user_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_add_user_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_add_user_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_add_user_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_add_user_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_quit_online_payment_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $user_id = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_quit_online_payment_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_quit_online_payment_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_quit_online_payment_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_quit_online_payment_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_quit_online_payment_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_quit_online_payment_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_quit_online_payment_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_post_refund_apply_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_post_refund_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_post_refund_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_post_refund_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_post_refund_apply_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_post_refund_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_post_refund_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_post_refund_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_post_settle_up_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_post_settle_up_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_post_settle_up_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_post_settle_up_order_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_post_settle_up_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_post_settle_up_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_post_settle_up_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_post_settle_up_order_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unsubscribe_order_sms_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unsubscribe_order_sms_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unsubscribe_order_sms_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unsubscribe_order_sms_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_unsubscribe_order_sms_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_unsubscribe_order_sms_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_unsubscribe_order_sms_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_unsubscribe_order_sms_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_order_refund_fail_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_order_refund_fail_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_order_refund_fail_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_order_refund_fail_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_order_refund_fail_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_order_refund_fail_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_order_refund_fail_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_order_refund_fail_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_order_refund_success_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_order_refund_success_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_order_refund_success_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_order_refund_success_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_process_order_refund_success_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_process_order_refund_success_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_process_order_refund_success_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_process_order_refund_success_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_invalid_order_income_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_invalid_order_income_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_invalid_order_income_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_invalid_order_income_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_invalid_order_income_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_invalid_order_income_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_invalid_order_income_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_invalid_order_income_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_filter_drawbacked_anonymous_order_ids_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_filter_drawbacked_anonymous_order_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_filter_drawbacked_anonymous_order_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_filter_drawbacked_anonymous_order_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_filter_drawbacked_anonymous_order_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_filter_drawbacked_anonymous_order_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_filter_drawbacked_anonymous_order_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_filter_drawbacked_anonymous_order_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_has_permissions_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $permissions = null;
  public $is_strict = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'permissions',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'is_strict',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_has_permissions_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_has_permissions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_has_permissions_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_has_permissions_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_has_permissions_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_has_permissions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_has_permissions_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_has_groups_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $groups = null;
  public $is_strict = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groups',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'is_strict',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_has_groups_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_has_groups_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_has_groups_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_has_groups_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_has_groups_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_has_groups_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_has_groups_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_timout_message_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_timout_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_timout_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_timout_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_clean_timout_message_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_clean_timout_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_clean_timout_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_clean_timout_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_restaurant_daily_balance_report_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_restaurant_daily_balance_report_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_restaurant_daily_balance_report_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_restaurant_daily_balance_report_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_restaurant_daily_balance_report_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_restaurant_daily_balance_report_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_restaurant_daily_balance_report_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_restaurant_daily_balance_report_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_refer_rank_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_refer_rank_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_refer_rank_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_refer_rank_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_refer_rank_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserReferRank',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_refer_rank_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_refer_rank_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_refer_rank_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_ecredit_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;
  public $phone = null;
  public $ecredit_amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ecredit_amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_ecredit_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_ecredit_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_ecredit_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_send_ecredit_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_send_ecredit_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_send_ecredit_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_send_ecredit_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_ecredit_ok_args extends TBase {
  static $_TSPEC;

  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_ecredit_ok_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_ecredit_ok_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_ecredit_ok_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_check_ecredit_ok_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_check_ecredit_ok_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_check_ecredit_ok_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_check_ecredit_ok_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_ecredit_amount_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_ecredit_amount_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_ecredit_amount_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_ecredit_amount_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_ecredit_amount_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_ecredit_amount_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_ecredit_amount_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_ecredit_amount_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_master_get_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_master_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_master_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_master_get_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_master_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_master_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_master_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_master_get_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_third_user_session_by_user_id_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_third_user_session_by_user_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_third_user_session_by_user_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_third_user_session_by_user_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_third_user_session_by_user_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TThirdUserSession',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_third_user_session_by_user_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_third_user_session_by_user_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_third_user_session_by_user_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_by_username_args extends TBase {
  static $_TSPEC;

  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_by_username_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_by_username_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_by_username_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_by_username_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_by_username_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_by_username_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_by_username_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_by_mobile_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_by_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_by_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_by_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_by_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_by_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_by_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_by_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_args extends TBase {
  static $_TSPEC;

  public $user_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUser',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_by_username_args extends TBase {
  static $_TSPEC;

  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_by_username_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_by_username_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_by_username_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_by_username_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUser',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_by_username_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_by_username_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_by_username_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bank_args extends TBase {
  static $_TSPEC;

  public $bank_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bank_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bank_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bank_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bank_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TBank',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bank_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bank_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bank_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bank_list_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bank_list_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bank_list_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bank_list_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bank_list_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TBank',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bank_list_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bank_list_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bank_list_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_bank_args extends TBase {
  static $_TSPEC;

  public $bank_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'bank_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_bank_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_bank_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_bank_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_bank_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TBank',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_bank_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_bank_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_bank_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bankcard_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bankcard_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bankcard_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bankcard_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bankcard_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserBankcard',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bankcard_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bankcard_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bankcard_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bankcard_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bankcard_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bankcard_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bankcard_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_bankcard_by_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserBankcard',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_bankcard_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_bankcard_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_bankcard_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_bankcard_by_restaurant_args extends TBase {
  static $_TSPEC;

  public $restaurant_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_bankcard_by_restaurant_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_bankcard_by_restaurant_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_bankcard_by_restaurant_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_bankcard_by_restaurant_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserBankcard',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_bankcard_by_restaurant_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_bankcard_by_restaurant_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_bankcard_by_restaurant_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_dop_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_dop_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_dop_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_dop_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_dop_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TDopUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_dop_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_dop_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_dop_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_dop_user_args extends TBase {
  static $_TSPEC;

  public $user_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_dop_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_dop_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_dop_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_dop_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TDopUser',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_dop_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_dop_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_dop_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_profile_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_profile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_profile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_profile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_profile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserProfile',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_profile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_profile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_profile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_master_get_profile_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_master_get_profile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_master_get_profile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_master_get_profile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_master_get_profile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserProfile',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_master_get_profile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_master_get_profile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_master_get_profile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_profile_args extends TBase {
  static $_TSPEC;

  public $user_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_profile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_profile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_profile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_profile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserProfile',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_profile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_profile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_profile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_profile_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserProfileQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_profile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_profile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_profile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_profile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserProfile',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_profile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_profile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_profile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_remember_key_args extends TBase {
  static $_TSPEC;

  public $remember_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'remember_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_remember_key_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_remember_key_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_remember_key_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_remember_key_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TSfGuardRememberKey',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_remember_key_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_remember_key_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_remember_key_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_full_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_full_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_full_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_full_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_full_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFullUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_full_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_full_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_full_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_full_by_valid_mobile_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_full_by_valid_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_full_by_valid_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_full_by_valid_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_full_by_valid_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFullUser',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_full_by_valid_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_full_by_valid_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_full_by_valid_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_full_args extends TBase {
  static $_TSPEC;

  public $qeury_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'qeury_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFullUserQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_full_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_full_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_full_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_full_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TFullUser',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_full_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_full_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_full_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_address_args extends TBase {
  static $_TSPEC;

  public $address_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'address_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_address_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_address_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_address_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_address_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TAddress',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_address_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_address_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_address_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_invoice_args extends TBase {
  static $_TSPEC;

  public $invoice_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'invoice_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_invoice_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_invoice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_invoice_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_invoice_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TInvoice',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_invoice_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_invoice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_invoice_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_gift_args extends TBase {
  static $_TSPEC;

  public $gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TGift',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_gift_args extends TBase {
  static $_TSPEC;

  public $gift_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'gift_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TGift',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_group_list_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_get_group_list_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_group_list_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_group_list_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_group_list_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TGroup',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_group_list_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_group_list_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_group_list_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_gift_args extends TBase {
  static $_TSPEC;

  public $user_gift_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserGift',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_user_gift_args extends TBase {
  static $_TSPEC;

  public $user_gift_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_gift_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_user_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_user_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_user_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_user_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserGift',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_user_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_user_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_user_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weibo_map_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weibo_map_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weibo_map_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weibo_map_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weibo_map_by_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWeiboUserMap',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weibo_map_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weibo_map_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weibo_map_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_renren_map_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_renren_map_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_renren_map_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_renren_map_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_renren_map_by_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TRenrenUserMap',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_renren_map_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_renren_map_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_renren_map_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weixin_map_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weixin_map_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weixin_map_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weixin_map_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weixin_map_by_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWeixinUserMap',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weixin_map_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weixin_map_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weixin_map_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_hongbao_args extends TBase {
  static $_TSPEC;

  public $hongbao_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hongbao_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_hongbao_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\THongbao',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_hongbao_by_sn_args extends TBase {
  static $_TSPEC;

  public $hongbao_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hongbao_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_hongbao_by_sn_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_hongbao_by_sn_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_hongbao_by_sn_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_hongbao_by_sn_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\THongbao',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_hongbao_by_sn_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_hongbao_by_sn_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_hongbao_by_sn_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_invalid_hongbao_args extends TBase {
  static $_TSPEC;

  public $hongbao_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'hongbao_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_invalid_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_invalid_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_invalid_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_invalid_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_invalid_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_invalid_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_invalid_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_invalid_restaurant_activity_hongbao_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_invalid_restaurant_activity_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_invalid_restaurant_activity_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_invalid_restaurant_activity_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_invalid_restaurant_activity_hongbao_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_invalid_restaurant_activity_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_invalid_restaurant_activity_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_invalid_restaurant_activity_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sum_hongbao_amount_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\THongbaoSum',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sum_hongbao_amount_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sum_hongbao_amount_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sum_hongbao_amount_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_sum_hongbao_amount_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_sum_hongbao_amount_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_sum_hongbao_amount_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_sum_hongbao_amount_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_hongbao_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\THongbaoQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_hongbao_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\THongbao',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_hongbao_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\THongbaoQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_hongbao_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_hongbao_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_hongbao_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_hongbao_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_hongbao_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_hongbao_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_hongbao_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_order_payment_constitution_map_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_order_payment_constitution_map_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_order_payment_constitution_map_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_order_payment_constitution_map_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_order_payment_constitution_map_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\EUS\TOrderPaymentConstitution',
              ),
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_order_payment_constitution_map_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_order_payment_constitution_map_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_order_payment_constitution_map_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_address_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_address_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_address_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_address_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_address_by_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TAddress',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_address_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_address_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_address_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_invoice_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_invoice_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_invoice_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_invoice_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_invoice_by_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TInvoice',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_invoice_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_invoice_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_invoice_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_gift_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserGift',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_group_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_group_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_group_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_group_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_group_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TGroup',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_group_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_group_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_group_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_gift_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TGiftQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_count_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_count_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_count_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_count_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_gift_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TGiftQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TGift',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_available_gift_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeUserService_query_available_gift_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_available_gift_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_available_gift_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_available_gift_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TGift',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_available_gift_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_available_gift_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_available_gift_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_unread_user_message_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_unread_user_message_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_unread_user_message_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_unread_user_message_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_unread_user_message_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserMessage',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_unread_user_message_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_unread_user_message_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_unread_user_message_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_place_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserPlaceQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_place_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_place_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_place_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_place_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserPlace',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_place_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_place_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_place_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_refer_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TReferQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_refer_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_refer_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_refer_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_refer_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TRefer',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_refer_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_refer_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_refer_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_master_get_refer_by_to_user_id_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_master_get_refer_by_to_user_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_master_get_refer_by_to_user_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_master_get_refer_by_to_user_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_master_get_refer_by_to_user_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TRefer',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_master_get_refer_by_to_user_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_master_get_refer_by_to_user_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_master_get_refer_by_to_user_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_terminal_validation_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TTerminalValidationQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_terminal_validation_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_terminal_validation_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_terminal_validation_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_terminal_validation_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TTerminalValidation',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_terminal_validation_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_terminal_validation_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_terminal_validation_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weibo_map_by_weibo_id_args extends TBase {
  static $_TSPEC;

  public $weibo_uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'weibo_uid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weibo_map_by_weibo_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weibo_map_by_weibo_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weibo_map_by_weibo_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weibo_map_by_weibo_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWeiboUserMap',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weibo_map_by_weibo_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weibo_map_by_weibo_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weibo_map_by_weibo_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_renren_map_by_renren_id_args extends TBase {
  static $_TSPEC;

  public $renren_uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'renren_uid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_renren_map_by_renren_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_renren_map_by_renren_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_renren_map_by_renren_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_renren_map_by_renren_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TRenrenUserMap',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_renren_map_by_renren_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_renren_map_by_renren_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_renren_map_by_renren_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weixin_map_by_weixin_id_args extends TBase {
  static $_TSPEC;

  public $weixin_uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'weixin_uid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weixin_map_by_weixin_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weixin_map_by_weixin_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weixin_map_by_weixin_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_weixin_map_by_weixin_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TWeixinUserMap',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_weixin_map_by_weixin_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_weixin_map_by_weixin_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_weixin_map_by_weixin_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_restaurant_admin_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_restaurant_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_restaurant_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_restaurant_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_restaurant_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TRestaurantAdmin',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_restaurant_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_restaurant_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_restaurant_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_restaurant_admin_by_admin_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_restaurant_admin_by_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_restaurant_admin_by_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_restaurant_admin_by_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_restaurant_admin_by_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TRestaurantAdmin',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_restaurant_admin_by_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_restaurant_admin_by_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_restaurant_admin_by_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_restaurant_admin_by_admin_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_restaurant_admin_by_admin_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_restaurant_admin_by_admin_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_restaurant_admin_by_admin_new_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_restaurant_admin_by_admin_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TRestaurantAdmin',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_restaurant_admin_by_admin_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_restaurant_admin_by_admin_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_restaurant_admin_by_admin_new_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_trade_record_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TTradeRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_trade_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_trade_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_trade_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_trade_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TTradeRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_trade_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_trade_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_trade_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_login_info_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TLoginInfoQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_login_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_login_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_login_info_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_login_info_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TLoginInfo',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_login_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_login_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_login_info_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_user_bankcard_args extends TBase {
  static $_TSPEC;

  public $record_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'record_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_user_bankcard_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_user_bankcard_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_user_bankcard_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_mget_user_bankcard_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCUserBankCard',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_mget_user_bankcard_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_mget_user_bankcard_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_mget_user_bankcard_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_meta_data_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_meta_data_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_meta_data_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_meta_data_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_meta_data_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserMetaData',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_meta_data_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_meta_data_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_meta_data_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_meta_data_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserMetaDataQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_meta_data_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_meta_data_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_meta_data_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_meta_data_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserMetaData',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_meta_data_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_meta_data_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_meta_data_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_change_record_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserChangeRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_change_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_change_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_change_record_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_user_change_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserChangeRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_user_change_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_user_change_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_user_change_record_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_custom_menu_by_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_custom_menu_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_custom_menu_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_custom_menu_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_user_custom_menu_by_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TUserCustomMenu',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_user_custom_menu_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_user_custom_menu_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_user_custom_menu_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_user_custom_menu_args extends TBase {
  static $_TSPEC;

  public $menu_id = null;
  public $menu = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'menu_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'menu',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserCustomMenu',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_user_custom_menu_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_user_custom_menu_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_user_custom_menu_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_save_user_custom_menu_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_save_user_custom_menu_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_save_user_custom_menu_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_save_user_custom_menu_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_user_manage_groups_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $group_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'group_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_user_manage_groups_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_user_manage_groups_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_user_manage_groups_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_set_user_manage_groups_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_set_user_manage_groups_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_set_user_manage_groups_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_set_user_manage_groups_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_managed_user_ids_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_managed_user_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_managed_user_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_managed_user_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_managed_user_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_managed_user_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_managed_user_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_managed_user_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_managed_group_ids_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_managed_group_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_managed_group_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_managed_group_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_managed_group_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_managed_group_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_managed_group_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_managed_group_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_record_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TPayRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_record_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_record_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_record_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_last_pay_record_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_last_pay_record_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_last_pay_record_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_last_pay_record_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_last_pay_record_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EUS\TPayRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_last_pay_record_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_last_pay_record_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_last_pay_record_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_failed_time_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_failed_time_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_failed_time_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_failed_time_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_get_pay_failed_time_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_get_pay_failed_time_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_get_pay_failed_time_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_get_pay_failed_time_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_pay_record_trade_no_args extends TBase {
  static $_TSPEC;

  public $pay_company_id = null;
  public $begin_at = null;
  public $end_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_company_id',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'begin_at',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'end_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_pay_record_trade_no_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_pay_record_trade_no_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_pay_record_trade_no_args', self::$_TSPEC, $output);
  }
}

class ElemeUserService_query_pay_record_trade_no_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EUS\EUSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeUserService_query_pay_record_trade_no_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeUserService_query_pay_record_trade_no_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeUserService_query_pay_record_trade_no_result', self::$_TSPEC, $output);
  }
}


