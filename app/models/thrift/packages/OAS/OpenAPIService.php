<?php
namespace OAS;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface OpenAPIServiceIf {
  public function ping();
  public function clear_cache($api_name, $params);
  public function check_openapi_permission($consumer_key, $permission_name);
  public function add_openapi_order($consumer_key, $order_id, $tp_order_id);
  public function check_api_permission($consumer_key, $permission_name);
  public function save_api_app_bind($api_app_bind_id, \OAS\TApiAppBind $save_struct);
  public function add_app_version(\OAS\TAppVersion $app_version);
  public function delete_api_app_bind($api_app_bind_id);
  public function get_app_url_by_type($type);
  public function mobile_get_app_permissions();
  public function mobile_get_app_binds();
  public function mobile_get_latest_app($app_type);
  public function notify_openapi_to_sync($restaurant_id);
  public function process_send_signal($app_id, $item_name, $item_id);
  public function send_order_signal($order_id);
  public function send_restaurant_signal($restaurant_id);
  public function send_food_signal($food_id);
  public function send_food_category_signal($food_category_id);
  public function dianping_send_order_signal($order_id);
  public function get_openapi_application($consumer_key);
  public function query_all_openapi_application();
  public function query_openapi_application_by_group($group_id);
  public function get_openapi_order($consumer_key, $tp_order_id);
  public function get($app_id);
  public function get_application($consumer_key);
  public function query_all_application();
  public function query_all_api_group_permission();
  public function get_api_group($api_group_id);
  public function mget_api_group($api_group_ids);
  public function get_api_permission($api_permission_id);
  public function mget_api_permission($api_permission_ids);
  public function query_app_bind_ids($app_id, $bind_type);
  public function count_api_app_bind(\OAS\TApiAppBindQuery $query_struct);
  public function query_api_app_bind(\OAS\TApiAppBindQuery $query_struct);
  public function signal_post_process_order($order_process_record_id);
}

class OpenAPIServiceClient implements \OAS\OpenAPIServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    return $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \OAS\OpenAPIService_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function clear_cache($api_name, $params)
  {
    $this->send_clear_cache($api_name, $params);
    $this->recv_clear_cache();
  }

  public function send_clear_cache($api_name, $params)
  {
    $args = new \OAS\OpenAPIService_clear_cache_args();
    $args->api_name = $api_name;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clear_cache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clear_cache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clear_cache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_clear_cache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_clear_cache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_openapi_permission($consumer_key, $permission_name)
  {
    $this->send_check_openapi_permission($consumer_key, $permission_name);
    return $this->recv_check_openapi_permission();
  }

  public function send_check_openapi_permission($consumer_key, $permission_name)
  {
    $args = new \OAS\OpenAPIService_check_openapi_permission_args();
    $args->consumer_key = $consumer_key;
    $args->permission_name = $permission_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_openapi_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_openapi_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_openapi_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_check_openapi_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_check_openapi_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("check_openapi_permission failed: unknown result");
  }

  public function add_openapi_order($consumer_key, $order_id, $tp_order_id)
  {
    $this->send_add_openapi_order($consumer_key, $order_id, $tp_order_id);
    $this->recv_add_openapi_order();
  }

  public function send_add_openapi_order($consumer_key, $order_id, $tp_order_id)
  {
    $args = new \OAS\OpenAPIService_add_openapi_order_args();
    $args->consumer_key = $consumer_key;
    $args->order_id = $order_id;
    $args->tp_order_id = $tp_order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_openapi_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_openapi_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_openapi_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_add_openapi_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_add_openapi_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_api_permission($consumer_key, $permission_name)
  {
    $this->send_check_api_permission($consumer_key, $permission_name);
    return $this->recv_check_api_permission();
  }

  public function send_check_api_permission($consumer_key, $permission_name)
  {
    $args = new \OAS\OpenAPIService_check_api_permission_args();
    $args->consumer_key = $consumer_key;
    $args->permission_name = $permission_name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_api_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_api_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_api_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_check_api_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_check_api_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("check_api_permission failed: unknown result");
  }

  public function save_api_app_bind($api_app_bind_id, \OAS\TApiAppBind $save_struct)
  {
    $this->send_save_api_app_bind($api_app_bind_id, $save_struct);
    return $this->recv_save_api_app_bind();
  }

  public function send_save_api_app_bind($api_app_bind_id, \OAS\TApiAppBind $save_struct)
  {
    $args = new \OAS\OpenAPIService_save_api_app_bind_args();
    $args->api_app_bind_id = $api_app_bind_id;
    $args->save_struct = $save_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_api_app_bind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_api_app_bind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_api_app_bind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_save_api_app_bind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_save_api_app_bind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("save_api_app_bind failed: unknown result");
  }

  public function add_app_version(\OAS\TAppVersion $app_version)
  {
    $this->send_add_app_version($app_version);
    $this->recv_add_app_version();
  }

  public function send_add_app_version(\OAS\TAppVersion $app_version)
  {
    $args = new \OAS\OpenAPIService_add_app_version_args();
    $args->app_version = $app_version;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_app_version', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_app_version', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_app_version()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_add_app_version_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_add_app_version_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function delete_api_app_bind($api_app_bind_id)
  {
    $this->send_delete_api_app_bind($api_app_bind_id);
    $this->recv_delete_api_app_bind();
  }

  public function send_delete_api_app_bind($api_app_bind_id)
  {
    $args = new \OAS\OpenAPIService_delete_api_app_bind_args();
    $args->api_app_bind_id = $api_app_bind_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'delete_api_app_bind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('delete_api_app_bind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_delete_api_app_bind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_delete_api_app_bind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_delete_api_app_bind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_app_url_by_type($type)
  {
    $this->send_get_app_url_by_type($type);
    return $this->recv_get_app_url_by_type();
  }

  public function send_get_app_url_by_type($type)
  {
    $args = new \OAS\OpenAPIService_get_app_url_by_type_args();
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_app_url_by_type', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_app_url_by_type', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_app_url_by_type()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_get_app_url_by_type_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_get_app_url_by_type_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_app_url_by_type failed: unknown result");
  }

  public function mobile_get_app_permissions()
  {
    $this->send_mobile_get_app_permissions();
    return $this->recv_mobile_get_app_permissions();
  }

  public function send_mobile_get_app_permissions()
  {
    $args = new \OAS\OpenAPIService_mobile_get_app_permissions_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_get_app_permissions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_get_app_permissions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_get_app_permissions()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_mobile_get_app_permissions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_mobile_get_app_permissions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mobile_get_app_permissions failed: unknown result");
  }

  public function mobile_get_app_binds()
  {
    $this->send_mobile_get_app_binds();
    return $this->recv_mobile_get_app_binds();
  }

  public function send_mobile_get_app_binds()
  {
    $args = new \OAS\OpenAPIService_mobile_get_app_binds_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_get_app_binds', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_get_app_binds', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_get_app_binds()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_mobile_get_app_binds_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_mobile_get_app_binds_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mobile_get_app_binds failed: unknown result");
  }

  public function mobile_get_latest_app($app_type)
  {
    $this->send_mobile_get_latest_app($app_type);
    return $this->recv_mobile_get_latest_app();
  }

  public function send_mobile_get_latest_app($app_type)
  {
    $args = new \OAS\OpenAPIService_mobile_get_latest_app_args();
    $args->app_type = $app_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_get_latest_app', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_get_latest_app', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_get_latest_app()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_mobile_get_latest_app_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_mobile_get_latest_app_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mobile_get_latest_app failed: unknown result");
  }

  public function notify_openapi_to_sync($restaurant_id)
  {
    $this->send_notify_openapi_to_sync($restaurant_id);
    $this->recv_notify_openapi_to_sync();
  }

  public function send_notify_openapi_to_sync($restaurant_id)
  {
    $args = new \OAS\OpenAPIService_notify_openapi_to_sync_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'notify_openapi_to_sync', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('notify_openapi_to_sync', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_notify_openapi_to_sync()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_notify_openapi_to_sync_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_notify_openapi_to_sync_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_send_signal($app_id, $item_name, $item_id)
  {
    $this->send_process_send_signal($app_id, $item_name, $item_id);
    $this->recv_process_send_signal();
  }

  public function send_process_send_signal($app_id, $item_name, $item_id)
  {
    $args = new \OAS\OpenAPIService_process_send_signal_args();
    $args->app_id = $app_id;
    $args->item_name = $item_name;
    $args->item_id = $item_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_send_signal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_send_signal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_send_signal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_process_send_signal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_process_send_signal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_order_signal($order_id)
  {
    $this->send_send_order_signal($order_id);
    $this->recv_send_order_signal();
  }

  public function send_send_order_signal($order_id)
  {
    $args = new \OAS\OpenAPIService_send_order_signal_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_order_signal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_order_signal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_order_signal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_send_order_signal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_send_order_signal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_restaurant_signal($restaurant_id)
  {
    $this->send_send_restaurant_signal($restaurant_id);
    $this->recv_send_restaurant_signal();
  }

  public function send_send_restaurant_signal($restaurant_id)
  {
    $args = new \OAS\OpenAPIService_send_restaurant_signal_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_restaurant_signal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_restaurant_signal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_restaurant_signal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_send_restaurant_signal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_send_restaurant_signal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_food_signal($food_id)
  {
    $this->send_send_food_signal($food_id);
    $this->recv_send_food_signal();
  }

  public function send_send_food_signal($food_id)
  {
    $args = new \OAS\OpenAPIService_send_food_signal_args();
    $args->food_id = $food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_food_signal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_food_signal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_food_signal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_send_food_signal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_send_food_signal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_food_category_signal($food_category_id)
  {
    $this->send_send_food_category_signal($food_category_id);
    $this->recv_send_food_category_signal();
  }

  public function send_send_food_category_signal($food_category_id)
  {
    $args = new \OAS\OpenAPIService_send_food_category_signal_args();
    $args->food_category_id = $food_category_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_food_category_signal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_food_category_signal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_food_category_signal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_send_food_category_signal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_send_food_category_signal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function dianping_send_order_signal($order_id)
  {
    $this->send_dianping_send_order_signal($order_id);
    $this->recv_dianping_send_order_signal();
  }

  public function send_dianping_send_order_signal($order_id)
  {
    $args = new \OAS\OpenAPIService_dianping_send_order_signal_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dianping_send_order_signal', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dianping_send_order_signal', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dianping_send_order_signal()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_dianping_send_order_signal_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_dianping_send_order_signal_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_openapi_application($consumer_key)
  {
    $this->send_get_openapi_application($consumer_key);
    return $this->recv_get_openapi_application();
  }

  public function send_get_openapi_application($consumer_key)
  {
    $args = new \OAS\OpenAPIService_get_openapi_application_args();
    $args->consumer_key = $consumer_key;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_openapi_application', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_openapi_application', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_openapi_application()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_get_openapi_application_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_get_openapi_application_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_openapi_application failed: unknown result");
  }

  public function query_all_openapi_application()
  {
    $this->send_query_all_openapi_application();
    return $this->recv_query_all_openapi_application();
  }

  public function send_query_all_openapi_application()
  {
    $args = new \OAS\OpenAPIService_query_all_openapi_application_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_all_openapi_application', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_all_openapi_application', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_all_openapi_application()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_query_all_openapi_application_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_query_all_openapi_application_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_all_openapi_application failed: unknown result");
  }

  public function query_openapi_application_by_group($group_id)
  {
    $this->send_query_openapi_application_by_group($group_id);
    return $this->recv_query_openapi_application_by_group();
  }

  public function send_query_openapi_application_by_group($group_id)
  {
    $args = new \OAS\OpenAPIService_query_openapi_application_by_group_args();
    $args->group_id = $group_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_openapi_application_by_group', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_openapi_application_by_group', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_openapi_application_by_group()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_query_openapi_application_by_group_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_query_openapi_application_by_group_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_openapi_application_by_group failed: unknown result");
  }

  public function get_openapi_order($consumer_key, $tp_order_id)
  {
    $this->send_get_openapi_order($consumer_key, $tp_order_id);
    return $this->recv_get_openapi_order();
  }

  public function send_get_openapi_order($consumer_key, $tp_order_id)
  {
    $args = new \OAS\OpenAPIService_get_openapi_order_args();
    $args->consumer_key = $consumer_key;
    $args->tp_order_id = $tp_order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_openapi_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_openapi_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_openapi_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_get_openapi_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_get_openapi_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_openapi_order failed: unknown result");
  }

  public function get($app_id)
  {
    $this->send_get($app_id);
    return $this->recv_get();
  }

  public function send_get($app_id)
  {
    $args = new \OAS\OpenAPIService_get_args();
    $args->app_id = $app_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get failed: unknown result");
  }

  public function get_application($consumer_key)
  {
    $this->send_get_application($consumer_key);
    return $this->recv_get_application();
  }

  public function send_get_application($consumer_key)
  {
    $args = new \OAS\OpenAPIService_get_application_args();
    $args->consumer_key = $consumer_key;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_application', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_application', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_application()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_get_application_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_get_application_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_application failed: unknown result");
  }

  public function query_all_application()
  {
    $this->send_query_all_application();
    return $this->recv_query_all_application();
  }

  public function send_query_all_application()
  {
    $args = new \OAS\OpenAPIService_query_all_application_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_all_application', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_all_application', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_all_application()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_query_all_application_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_query_all_application_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_all_application failed: unknown result");
  }

  public function query_all_api_group_permission()
  {
    $this->send_query_all_api_group_permission();
    return $this->recv_query_all_api_group_permission();
  }

  public function send_query_all_api_group_permission()
  {
    $args = new \OAS\OpenAPIService_query_all_api_group_permission_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_all_api_group_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_all_api_group_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_all_api_group_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_query_all_api_group_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_query_all_api_group_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_all_api_group_permission failed: unknown result");
  }

  public function get_api_group($api_group_id)
  {
    $this->send_get_api_group($api_group_id);
    return $this->recv_get_api_group();
  }

  public function send_get_api_group($api_group_id)
  {
    $args = new \OAS\OpenAPIService_get_api_group_args();
    $args->api_group_id = $api_group_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_api_group', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_api_group', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_api_group()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_get_api_group_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_get_api_group_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_api_group failed: unknown result");
  }

  public function mget_api_group($api_group_ids)
  {
    $this->send_mget_api_group($api_group_ids);
    return $this->recv_mget_api_group();
  }

  public function send_mget_api_group($api_group_ids)
  {
    $args = new \OAS\OpenAPIService_mget_api_group_args();
    $args->api_group_ids = $api_group_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_api_group', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_api_group', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_api_group()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_mget_api_group_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_mget_api_group_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_api_group failed: unknown result");
  }

  public function get_api_permission($api_permission_id)
  {
    $this->send_get_api_permission($api_permission_id);
    return $this->recv_get_api_permission();
  }

  public function send_get_api_permission($api_permission_id)
  {
    $args = new \OAS\OpenAPIService_get_api_permission_args();
    $args->api_permission_id = $api_permission_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_api_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_api_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_api_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_get_api_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_get_api_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_api_permission failed: unknown result");
  }

  public function mget_api_permission($api_permission_ids)
  {
    $this->send_mget_api_permission($api_permission_ids);
    return $this->recv_mget_api_permission();
  }

  public function send_mget_api_permission($api_permission_ids)
  {
    $args = new \OAS\OpenAPIService_mget_api_permission_args();
    $args->api_permission_ids = $api_permission_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_api_permission', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_api_permission', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_api_permission()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_mget_api_permission_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_mget_api_permission_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_api_permission failed: unknown result");
  }

  public function query_app_bind_ids($app_id, $bind_type)
  {
    $this->send_query_app_bind_ids($app_id, $bind_type);
    return $this->recv_query_app_bind_ids();
  }

  public function send_query_app_bind_ids($app_id, $bind_type)
  {
    $args = new \OAS\OpenAPIService_query_app_bind_ids_args();
    $args->app_id = $app_id;
    $args->bind_type = $bind_type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_app_bind_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_app_bind_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_app_bind_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_query_app_bind_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_query_app_bind_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_app_bind_ids failed: unknown result");
  }

  public function count_api_app_bind(\OAS\TApiAppBindQuery $query_struct)
  {
    $this->send_count_api_app_bind($query_struct);
    return $this->recv_count_api_app_bind();
  }

  public function send_count_api_app_bind(\OAS\TApiAppBindQuery $query_struct)
  {
    $args = new \OAS\OpenAPIService_count_api_app_bind_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_api_app_bind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_api_app_bind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_api_app_bind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_count_api_app_bind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_count_api_app_bind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_api_app_bind failed: unknown result");
  }

  public function query_api_app_bind(\OAS\TApiAppBindQuery $query_struct)
  {
    $this->send_query_api_app_bind($query_struct);
    return $this->recv_query_api_app_bind();
  }

  public function send_query_api_app_bind(\OAS\TApiAppBindQuery $query_struct)
  {
    $args = new \OAS\OpenAPIService_query_api_app_bind_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_api_app_bind', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_api_app_bind', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_api_app_bind()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_query_api_app_bind_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_query_api_app_bind_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_api_app_bind failed: unknown result");
  }

  public function signal_post_process_order($order_process_record_id)
  {
    $this->send_signal_post_process_order($order_process_record_id);
    $this->recv_signal_post_process_order();
  }

  public function send_signal_post_process_order($order_process_record_id)
  {
    $args = new \OAS\OpenAPIService_signal_post_process_order_args();
    $args->order_process_record_id = $order_process_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_post_process_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_post_process_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_post_process_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\OAS\OpenAPIService_signal_post_process_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \OAS\OpenAPIService_signal_post_process_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class OpenAPIService_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OpenAPIService_ping_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_ping_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_ping_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_ping_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_ping_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_clear_cache_args extends TBase {
  static $_TSPEC;

  public $api_name = null;
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_clear_cache_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_clear_cache_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_clear_cache_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_clear_cache_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_clear_cache_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_clear_cache_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_clear_cache_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_check_openapi_permission_args extends TBase {
  static $_TSPEC;

  public $consumer_key = null;
  public $permission_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumer_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'permission_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_check_openapi_permission_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_check_openapi_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_check_openapi_permission_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_check_openapi_permission_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_check_openapi_permission_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_check_openapi_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_check_openapi_permission_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_add_openapi_order_args extends TBase {
  static $_TSPEC;

  public $consumer_key = null;
  public $order_id = null;
  public $tp_order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumer_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tp_order_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_add_openapi_order_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_add_openapi_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_add_openapi_order_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_add_openapi_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_add_openapi_order_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_add_openapi_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_add_openapi_order_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_check_api_permission_args extends TBase {
  static $_TSPEC;

  public $consumer_key = null;
  public $permission_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumer_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'permission_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_check_api_permission_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_check_api_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_check_api_permission_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_check_api_permission_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_check_api_permission_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_check_api_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_check_api_permission_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_save_api_app_bind_args extends TBase {
  static $_TSPEC;

  public $api_app_bind_id = null;
  public $save_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_app_bind_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'save_struct',
          'type' => TType::STRUCT,
          'class' => '\OAS\TApiAppBind',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_save_api_app_bind_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_save_api_app_bind_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_save_api_app_bind_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_save_api_app_bind_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_save_api_app_bind_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_save_api_app_bind_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_save_api_app_bind_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_add_app_version_args extends TBase {
  static $_TSPEC;

  public $app_version = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'app_version',
          'type' => TType::STRUCT,
          'class' => '\OAS\TAppVersion',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_add_app_version_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_add_app_version_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_add_app_version_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_add_app_version_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_add_app_version_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_add_app_version_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_add_app_version_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_delete_api_app_bind_args extends TBase {
  static $_TSPEC;

  public $api_app_bind_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_app_bind_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_delete_api_app_bind_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_delete_api_app_bind_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_delete_api_app_bind_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_delete_api_app_bind_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_delete_api_app_bind_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_delete_api_app_bind_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_delete_api_app_bind_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_app_url_by_type_args extends TBase {
  static $_TSPEC;

  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_app_url_by_type_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_app_url_by_type_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_app_url_by_type_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_app_url_by_type_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_app_url_by_type_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_app_url_by_type_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_app_url_by_type_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mobile_get_app_permissions_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OpenAPIService_mobile_get_app_permissions_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mobile_get_app_permissions_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mobile_get_app_permissions_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mobile_get_app_permissions_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mobile_get_app_permissions_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mobile_get_app_permissions_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mobile_get_app_permissions_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mobile_get_app_binds_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OpenAPIService_mobile_get_app_binds_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mobile_get_app_binds_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mobile_get_app_binds_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mobile_get_app_binds_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mobile_get_app_binds_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mobile_get_app_binds_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mobile_get_app_binds_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mobile_get_latest_app_args extends TBase {
  static $_TSPEC;

  public $app_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'app_type',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mobile_get_latest_app_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mobile_get_latest_app_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mobile_get_latest_app_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mobile_get_latest_app_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OAS\TAppVersion',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mobile_get_latest_app_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mobile_get_latest_app_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mobile_get_latest_app_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_notify_openapi_to_sync_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_notify_openapi_to_sync_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_notify_openapi_to_sync_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_notify_openapi_to_sync_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_notify_openapi_to_sync_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_notify_openapi_to_sync_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_notify_openapi_to_sync_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_notify_openapi_to_sync_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_process_send_signal_args extends TBase {
  static $_TSPEC;

  public $app_id = null;
  public $item_name = null;
  public $item_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'app_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'item_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'item_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_process_send_signal_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_process_send_signal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_process_send_signal_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_process_send_signal_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_process_send_signal_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_process_send_signal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_process_send_signal_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_order_signal_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_order_signal_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_order_signal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_order_signal_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_order_signal_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_order_signal_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_order_signal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_order_signal_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_restaurant_signal_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_restaurant_signal_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_restaurant_signal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_restaurant_signal_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_restaurant_signal_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_restaurant_signal_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_restaurant_signal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_restaurant_signal_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_food_signal_args extends TBase {
  static $_TSPEC;

  public $food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_food_signal_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_food_signal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_food_signal_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_food_signal_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_food_signal_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_food_signal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_food_signal_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_food_category_signal_args extends TBase {
  static $_TSPEC;

  public $food_category_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'food_category_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_food_category_signal_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_food_category_signal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_food_category_signal_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_send_food_category_signal_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_send_food_category_signal_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_send_food_category_signal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_send_food_category_signal_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_dianping_send_order_signal_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_dianping_send_order_signal_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_dianping_send_order_signal_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_dianping_send_order_signal_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_dianping_send_order_signal_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_dianping_send_order_signal_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_dianping_send_order_signal_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_dianping_send_order_signal_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_openapi_application_args extends TBase {
  static $_TSPEC;

  public $consumer_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumer_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_openapi_application_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_openapi_application_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_openapi_application_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_openapi_application_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OAS\TOpenapiApplication',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_openapi_application_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_openapi_application_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_openapi_application_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_all_openapi_application_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OpenAPIService_query_all_openapi_application_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_all_openapi_application_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_all_openapi_application_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_all_openapi_application_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OAS\TOpenapiApplication',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_all_openapi_application_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_all_openapi_application_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_all_openapi_application_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_openapi_application_by_group_args extends TBase {
  static $_TSPEC;

  public $group_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_openapi_application_by_group_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_openapi_application_by_group_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_openapi_application_by_group_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_openapi_application_by_group_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OAS\TOpenapiApplication',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_openapi_application_by_group_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_openapi_application_by_group_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_openapi_application_by_group_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_openapi_order_args extends TBase {
  static $_TSPEC;

  public $consumer_key = null;
  public $tp_order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumer_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tp_order_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_openapi_order_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_openapi_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_openapi_order_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_openapi_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OAS\TOpenapiOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_openapi_order_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_openapi_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_openapi_order_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_args extends TBase {
  static $_TSPEC;

  public $app_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'app_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OAS\TApplication',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_application_args extends TBase {
  static $_TSPEC;

  public $consumer_key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'consumer_key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_application_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_application_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_application_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_application_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OAS\TApplication',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_application_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_application_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_application_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_all_application_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OpenAPIService_query_all_application_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_all_application_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_all_application_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_all_application_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OAS\TApplication',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_all_application_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_all_application_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_all_application_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_all_api_group_permission_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'OpenAPIService_query_all_api_group_permission_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_all_api_group_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_all_api_group_permission_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_all_api_group_permission_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OAS\TApiGroupPermission',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_all_api_group_permission_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_all_api_group_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_all_api_group_permission_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_api_group_args extends TBase {
  static $_TSPEC;

  public $api_group_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_group_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_api_group_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_api_group_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_api_group_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_api_group_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OAS\TApiGroup',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_api_group_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_api_group_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_api_group_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mget_api_group_args extends TBase {
  static $_TSPEC;

  public $api_group_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_group_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mget_api_group_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mget_api_group_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mget_api_group_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mget_api_group_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OAS\TApiGroup',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mget_api_group_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mget_api_group_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mget_api_group_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_api_permission_args extends TBase {
  static $_TSPEC;

  public $api_permission_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_permission_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_api_permission_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_api_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_api_permission_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_get_api_permission_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\OAS\TApiPermission',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_get_api_permission_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_get_api_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_get_api_permission_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mget_api_permission_args extends TBase {
  static $_TSPEC;

  public $api_permission_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_permission_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mget_api_permission_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mget_api_permission_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mget_api_permission_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_mget_api_permission_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OAS\TApiPermission',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_mget_api_permission_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_mget_api_permission_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_mget_api_permission_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_app_bind_ids_args extends TBase {
  static $_TSPEC;

  public $app_id = null;
  public $bind_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'app_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'bind_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_app_bind_ids_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_app_bind_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_app_bind_ids_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_app_bind_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_app_bind_ids_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_app_bind_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_app_bind_ids_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_count_api_app_bind_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\OAS\TApiAppBindQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_count_api_app_bind_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_count_api_app_bind_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_count_api_app_bind_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_count_api_app_bind_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_count_api_app_bind_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_count_api_app_bind_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_count_api_app_bind_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_api_app_bind_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\OAS\TApiAppBindQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_api_app_bind_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_api_app_bind_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_api_app_bind_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_query_api_app_bind_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\OAS\TApiAppBind',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_query_api_app_bind_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_query_api_app_bind_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_query_api_app_bind_result', self::$_TSPEC, $output);
  }
}

class OpenAPIService_signal_post_process_order_args extends TBase {
  static $_TSPEC;

  public $order_process_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_process_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_signal_post_process_order_args';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_signal_post_process_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_signal_post_process_order_args', self::$_TSPEC, $output);
  }
}

class OpenAPIService_signal_post_process_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\OAS\OASUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'OpenAPIService_signal_post_process_order_result';
  }

  public function read($input)
  {
    return $this->_read('OpenAPIService_signal_post_process_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('OpenAPIService_signal_post_process_order_result', self::$_TSPEC, $output);
  }
}


