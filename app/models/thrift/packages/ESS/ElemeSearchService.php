<?php
namespace ESS;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ElemeSearchServiceIf {
  public function ping();
  public function search($index, $query);
  public function search2($index, $doc_type, $query);
  public function simple_search($index, $query);
  public function search_full_result($index, $query);
  public function index_eleme_order($order_id);
  public function index_napos_order($order_id);
  public function index_sms_admin($sms_admin_id);
  public function index_restaurant($restaurant_id);
  public function index_food($food_id);
  public function signal_update_eleme_order($ids);
  public function signal_update_napos_order($ids);
  public function signal_update_sms_admin($ids);
  public function signal_update_restaurant($ids);
  public function signal_update_food($ids);
}

class ElemeSearchServiceClient implements \ESS\ElemeSearchServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    return $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \ESS\ElemeSearchService_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function search($index, $query)
  {
    $this->send_search($index, $query);
    return $this->recv_search();
  }

  public function send_search($index, $query)
  {
    $args = new \ESS\ElemeSearchService_search_args();
    $args->index = $index;
    $args->query = $query;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_search_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_search_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("search failed: unknown result");
  }

  public function search2($index, $doc_type, $query)
  {
    $this->send_search2($index, $doc_type, $query);
    return $this->recv_search2();
  }

  public function send_search2($index, $doc_type, $query)
  {
    $args = new \ESS\ElemeSearchService_search2_args();
    $args->index = $index;
    $args->doc_type = $doc_type;
    $args->query = $query;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_search2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_search2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("search2 failed: unknown result");
  }

  public function simple_search($index, $query)
  {
    $this->send_simple_search($index, $query);
    return $this->recv_simple_search();
  }

  public function send_simple_search($index, $query)
  {
    $args = new \ESS\ElemeSearchService_simple_search_args();
    $args->index = $index;
    $args->query = $query;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'simple_search', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('simple_search', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_simple_search()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_simple_search_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_simple_search_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("simple_search failed: unknown result");
  }

  public function search_full_result($index, $query)
  {
    $this->send_search_full_result($index, $query);
    return $this->recv_search_full_result();
  }

  public function send_search_full_result($index, $query)
  {
    $args = new \ESS\ElemeSearchService_search_full_result_args();
    $args->index = $index;
    $args->query = $query;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search_full_result', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search_full_result', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search_full_result()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_search_full_result_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_search_full_result_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("search_full_result failed: unknown result");
  }

  public function index_eleme_order($order_id)
  {
    $this->send_index_eleme_order($order_id);
    $this->recv_index_eleme_order();
  }

  public function send_index_eleme_order($order_id)
  {
    $args = new \ESS\ElemeSearchService_index_eleme_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'index_eleme_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('index_eleme_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_index_eleme_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_index_eleme_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_index_eleme_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function index_napos_order($order_id)
  {
    $this->send_index_napos_order($order_id);
    $this->recv_index_napos_order();
  }

  public function send_index_napos_order($order_id)
  {
    $args = new \ESS\ElemeSearchService_index_napos_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'index_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('index_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_index_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_index_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_index_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function index_sms_admin($sms_admin_id)
  {
    $this->send_index_sms_admin($sms_admin_id);
    $this->recv_index_sms_admin();
  }

  public function send_index_sms_admin($sms_admin_id)
  {
    $args = new \ESS\ElemeSearchService_index_sms_admin_args();
    $args->sms_admin_id = $sms_admin_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'index_sms_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('index_sms_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_index_sms_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_index_sms_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_index_sms_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function index_restaurant($restaurant_id)
  {
    $this->send_index_restaurant($restaurant_id);
    $this->recv_index_restaurant();
  }

  public function send_index_restaurant($restaurant_id)
  {
    $args = new \ESS\ElemeSearchService_index_restaurant_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'index_restaurant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('index_restaurant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_index_restaurant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_index_restaurant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_index_restaurant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function index_food($food_id)
  {
    $this->send_index_food($food_id);
    $this->recv_index_food();
  }

  public function send_index_food($food_id)
  {
    $args = new \ESS\ElemeSearchService_index_food_args();
    $args->food_id = $food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'index_food', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('index_food', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_index_food()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_index_food_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_index_food_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_update_eleme_order($ids)
  {
    $this->send_signal_update_eleme_order($ids);
    $this->recv_signal_update_eleme_order();
  }

  public function send_signal_update_eleme_order($ids)
  {
    $args = new \ESS\ElemeSearchService_signal_update_eleme_order_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_eleme_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_eleme_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_eleme_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_signal_update_eleme_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_signal_update_eleme_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_update_napos_order($ids)
  {
    $this->send_signal_update_napos_order($ids);
    $this->recv_signal_update_napos_order();
  }

  public function send_signal_update_napos_order($ids)
  {
    $args = new \ESS\ElemeSearchService_signal_update_napos_order_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_signal_update_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_signal_update_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_update_sms_admin($ids)
  {
    $this->send_signal_update_sms_admin($ids);
    $this->recv_signal_update_sms_admin();
  }

  public function send_signal_update_sms_admin($ids)
  {
    $args = new \ESS\ElemeSearchService_signal_update_sms_admin_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_sms_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_sms_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_sms_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_signal_update_sms_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_signal_update_sms_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_update_restaurant($ids)
  {
    $this->send_signal_update_restaurant($ids);
    $this->recv_signal_update_restaurant();
  }

  public function send_signal_update_restaurant($ids)
  {
    $args = new \ESS\ElemeSearchService_signal_update_restaurant_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_restaurant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_restaurant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_restaurant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_signal_update_restaurant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_signal_update_restaurant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_update_food($ids)
  {
    $this->send_signal_update_food($ids);
    $this->recv_signal_update_food();
  }

  public function send_signal_update_food($ids)
  {
    $args = new \ESS\ElemeSearchService_signal_update_food_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_food', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_food', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_food()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ESS\ElemeSearchService_signal_update_food_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ESS\ElemeSearchService_signal_update_food_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ElemeSearchService_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeSearchService_ping_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_ping_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_ping_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_ping_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_ping_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_search_args extends TBase {
  static $_TSPEC;

  public $index = null;
  public $query = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_search_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_search_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_search_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_search_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_search_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_search_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_search_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_search2_args extends TBase {
  static $_TSPEC;

  public $index = null;
  public $doc_type = null;
  public $query = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'doc_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_search2_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_search2_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_search2_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_search2_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_search2_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_search2_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_search2_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_simple_search_args extends TBase {
  static $_TSPEC;

  public $index = null;
  public $query = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_simple_search_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_simple_search_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_simple_search_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_simple_search_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_simple_search_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_simple_search_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_simple_search_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_search_full_result_args extends TBase {
  static $_TSPEC;

  public $index = null;
  public $query = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'index',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'query',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_search_full_result_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_search_full_result_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_search_full_result_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_search_full_result_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_search_full_result_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_search_full_result_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_search_full_result_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_eleme_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_eleme_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_eleme_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_eleme_order_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_eleme_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_eleme_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_eleme_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_eleme_order_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_napos_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_napos_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_sms_admin_args extends TBase {
  static $_TSPEC;

  public $sms_admin_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sms_admin_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_sms_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_sms_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_sms_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_sms_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_sms_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_sms_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_sms_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_restaurant_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_restaurant_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_restaurant_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_restaurant_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_restaurant_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_restaurant_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_restaurant_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_restaurant_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_food_args extends TBase {
  static $_TSPEC;

  public $food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_food_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_food_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_food_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_index_food_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_index_food_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_index_food_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_index_food_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_eleme_order_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_eleme_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_eleme_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_eleme_order_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_eleme_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_eleme_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_eleme_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_eleme_order_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_napos_order_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_napos_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_sms_admin_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_sms_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_sms_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_sms_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_sms_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_sms_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_sms_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_sms_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_restaurant_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_restaurant_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_restaurant_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_restaurant_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_restaurant_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_restaurant_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_restaurant_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_restaurant_result', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_food_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_food_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_food_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_food_args', self::$_TSPEC, $output);
  }
}

class ElemeSearchService_signal_update_food_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\ESS\ESSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeSearchService_signal_update_food_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeSearchService_signal_update_food_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeSearchService_signal_update_food_result', self::$_TSPEC, $output);
  }
}


