<?php
namespace EUS;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class DrawbackProcessStatusConst {
  const STATUS_UNPROCESSED = 0;
  const STATUS_PROCESSING = 1;
  const STATUS_SUCCESS = 2;
  const STATUS_FAIL = 3;
  const STATUS_RETRY = 4;
  const STATUS_MANUAL_SUCCESS = 5;
  static public $__names = array(
    0 => 'STATUS_UNPROCESSED',
    1 => 'STATUS_PROCESSING',
    2 => 'STATUS_SUCCESS',
    3 => 'STATUS_FAIL',
    4 => 'STATUS_RETRY',
    5 => 'STATUS_MANUAL_SUCCESS',
  );
}

final class DrawbackPlatformConst {
  const PAY_PLATFORM_ALIPAY = 1;
  const PAY_PLATFORM_TENPAY_WEB = 2;
  const PAY_PLATFORM_TENPAY_APP = 3;
  const PAY_PLATFORM_QQPAY = 4;
  static public $__names = array(
    1 => 'PAY_PLATFORM_ALIPAY',
    2 => 'PAY_PLATFORM_TENPAY_WEB',
    3 => 'PAY_PLATFORM_TENPAY_APP',
    4 => 'PAY_PLATFORM_QQPAY',
  );
}

final class PayCompanyIdConst {
  const PAY_COMPANY_ID_ALIPAY_WEB = 1;
  const PAY_COMPANY_ID_ALIPAY_APP = 2;
  const PAY_COMPANY_ID_TENPAY_WEB = 3;
  const PAY_COMPANY_ID_TENPAY_APP = 4;
  const PAY_COMPANY_ID_ALIPAY_BANK = 5;
  const PAY_COMPANY_ID_QQPAY = 10;
  static public $__names = array(
    1 => 'PAY_COMPANY_ID_ALIPAY_WEB',
    2 => 'PAY_COMPANY_ID_ALIPAY_APP',
    3 => 'PAY_COMPANY_ID_TENPAY_WEB',
    4 => 'PAY_COMPANY_ID_TENPAY_APP',
    5 => 'PAY_COMPANY_ID_ALIPAY_BANK',
    10 => 'PAY_COMPANY_ID_QQPAY',
  );
}

final class PayComeFromConst {
  const COME_FROM_WEB = 1;
  const COME_FROM_WEB_MOBILE = 2;
  const COME_FROM_APP_IOS = 3;
  const COME_FROM_APP_ANDROID = 4;
  static public $__names = array(
    1 => 'COME_FROM_WEB',
    2 => 'COME_FROM_WEB_MOBILE',
    3 => 'COME_FROM_APP_IOS',
    4 => 'COME_FROM_APP_ANDROID',
  );
}

final class UserNoticeConst {
  const TYPE_EMAIL = 1;
  const TYPE_SMS = 2;
  static public $__names = array(
    1 => 'TYPE_EMAIL',
    2 => 'TYPE_SMS',
  );
}

final class SNSType {
  const WEIBO = 1;
  const RENREN = 2;
  const WEIXIN = 3;
  static public $__names = array(
    1 => 'WEIBO',
    2 => 'RENREN',
    3 => 'WEIXIN',
  );
}

final class DeviceType {
  const IOS = 1;
  const ANDROID = 2;
  static public $__names = array(
    1 => 'IOS',
    2 => 'ANDROID',
  );
}

final class DopUserProcessType {
  const NO_ORDER = 0;
  const NORMAL_ORDER = 1;
  const TPD_ORDER = 2;
  const TERMINAL_ORDER = 3;
  const ELEME_ORDER = 4;
  const REFUND_ORDER = 5;
  const NONE_REFUND_ORDER = 6;
  const TPD_ELEME = 7;
  static public $__names = array(
    0 => 'NO_ORDER',
    1 => 'NORMAL_ORDER',
    2 => 'TPD_ORDER',
    3 => 'TERMINAL_ORDER',
    4 => 'ELEME_ORDER',
    5 => 'REFUND_ORDER',
    6 => 'NONE_REFUND_ORDER',
    7 => 'TPD_ELEME',
  );
}

final class DopUserCallType {
  const GATEWAY = 1;
  const SIP = 2;
  static public $__names = array(
    1 => 'GATEWAY',
    2 => 'SIP',
  );
}

final class HongbaoConst {
  const STATUS_UNUSED = 0;
  const STATUS_USED = 1;
  const STATUS_ORDER_CANCEL = 2;
  static public $__names = array(
    0 => 'STATUS_UNUSED',
    1 => 'STATUS_USED',
    2 => 'STATUS_ORDER_CANCEL',
  );
}

final class ReferConst {
  const STATUS_WAITING = 0;
  const STATUS_VALID = 1;
  const STATUS_AWARDED = 2;
  const STATUS_INVALID = 3;
  const STATUS_REFERER_AWARDED = 4;
  static public $__names = array(
    0 => 'STATUS_WAITING',
    1 => 'STATUS_VALID',
    2 => 'STATUS_AWARDED',
    3 => 'STATUS_INVALID',
    4 => 'STATUS_REFERER_AWARDED',
  );
}

final class UserMessageConst {
  const TYPE_ORDER_PROCESS = 0;
  const TYPE_ORDER_RATE = 1;
  const TYPE_ORDER_INVALID = 2;
  const TYPE_FEEDBACK_REPLY = 101;
  const TYPE_COMMENT_REPLY = 102;
  const TYPE_REFUND_SUCCESS = 201;
  const TYPE_REFUND_FAIL = 202;
  const TYPE_REFUND_RESTAURANT_REPLY = 203;
  static public $__names = array(
    0 => 'TYPE_ORDER_PROCESS',
    1 => 'TYPE_ORDER_RATE',
    2 => 'TYPE_ORDER_INVALID',
    101 => 'TYPE_FEEDBACK_REPLY',
    102 => 'TYPE_COMMENT_REPLY',
    201 => 'TYPE_REFUND_SUCCESS',
    202 => 'TYPE_REFUND_FAIL',
    203 => 'TYPE_REFUND_RESTAURANT_REPLY',
  );
}

final class PointChangeRecordConst {
  const TYPE_MAKE_ORDER = 0;
  const TYPE_VALID_ORDER = 1;
  const TYPE_INVALID_ORDER = 2;
  const TYPE_RATE_ORDER = 3;
  const TYPE_RATE_FOOD = 4;
  const TYPE_EXCHANGE_GIFT = 5;
  const TYPE_SYSTEM = 6;
  const TYPE_ADMIN = 7;
  const TYPE_UPLOAD_IMAGE = 8;
  const TYPE_RATE_SERVICE = 9;
  static public $__names = array(
    0 => 'TYPE_MAKE_ORDER',
    1 => 'TYPE_VALID_ORDER',
    2 => 'TYPE_INVALID_ORDER',
    3 => 'TYPE_RATE_ORDER',
    4 => 'TYPE_RATE_FOOD',
    5 => 'TYPE_EXCHANGE_GIFT',
    6 => 'TYPE_SYSTEM',
    7 => 'TYPE_ADMIN',
    8 => 'TYPE_UPLOAD_IMAGE',
    9 => 'TYPE_RATE_SERVICE',
  );
}

final class BalanceChangeConst {
  const TRADE_TYPE_CHARGE = 0;
  const TRADE_TYPE_CONSUME = 1;
  const TRADE_TYPE_PRODUCE = 2;
  const TRADE_TYPE_REFUND = 3;
  const TRADE_TYPE_WITHDRAW_APPLY = 4;
  const TRADE_TYPE_WITHDRAW_FAIL = 5;
  const TRADE_TYPE_BONUS = 6;
  const TRADE_TYPE_DRAWBACK = 7;
  const TRADE_TYPE_PAY_AUTO_FAIL = 8;
  const TRADE_TYPE_DIRECT_CONSUME = 9;
  const TRADE_TYPE_CONTRACT = 10;
  const TRADE_TYPE_INVALID_INCOME = 11;
  const TRADE_TYPE_ANONYMOUS_DRAWBACK = 12;
  const TRADE_TYPE_CLAIM_CHARGE = 20000;
  const TRADE_TYPE_CLAIM_CONSUME = 20001;
  const TRADE_TYPE_CLAIM_REFUND = 20002;
  const PAY_METHOD_ELEME = 0;
  const PAY_METHOD_ALIPAY = 1;
  static public $__names = array(
    0 => 'TRADE_TYPE_CHARGE',
    1 => 'TRADE_TYPE_CONSUME',
    2 => 'TRADE_TYPE_PRODUCE',
    3 => 'TRADE_TYPE_REFUND',
    4 => 'TRADE_TYPE_WITHDRAW_APPLY',
    5 => 'TRADE_TYPE_WITHDRAW_FAIL',
    6 => 'TRADE_TYPE_BONUS',
    7 => 'TRADE_TYPE_DRAWBACK',
    8 => 'TRADE_TYPE_PAY_AUTO_FAIL',
    9 => 'TRADE_TYPE_DIRECT_CONSUME',
    10 => 'TRADE_TYPE_CONTRACT',
    11 => 'TRADE_TYPE_INVALID_INCOME',
    12 => 'TRADE_TYPE_ANONYMOUS_DRAWBACK',
    20000 => 'TRADE_TYPE_CLAIM_CHARGE',
    20001 => 'TRADE_TYPE_CLAIM_CONSUME',
    20002 => 'TRADE_TYPE_CLAIM_REFUND',
    0 => 'PAY_METHOD_ELEME',
    1 => 'PAY_METHOD_ALIPAY',
  );
}

final class WithdrawRecordConst {
  const STATUS_UNPROCESSED = 1;
  const STATUS_GENERATED = 2;
  const STATUS_SUBMITTED = 3;
  const STATUS_SUCCESS = 4;
  const STATUS_WARNING_FAIL = 5;
  const STATUS_FATAL_FAIL = 6;
  static public $__names = array(
    1 => 'STATUS_UNPROCESSED',
    2 => 'STATUS_GENERATED',
    3 => 'STATUS_SUBMITTED',
    4 => 'STATUS_SUCCESS',
    5 => 'STATUS_WARNING_FAIL',
    6 => 'STATUS_FATAL_FAIL',
  );
}

final class UserGiftConst {
  const STATUS_UNPROCESSED = 0;
  const STATUS_PROCESSED = 1;
  const STATUS_PROCESSING = 2;
  static public $__names = array(
    0 => 'STATUS_UNPROCESSED',
    1 => 'STATUS_PROCESSED',
    2 => 'STATUS_PROCESSING',
  );
}

final class UserGiftObjStatusConst {
  const OBJ_STATUS_APPLY = 0;
  const OBJ_STATUS_WAIT_SYSTEM_CHECK = 1;
  const OBJ_STATUS_IN_SYSTEM_CHECK = 2;
  const OBJ_STATUS_END_SYSTEM_CHECK = 3;
  const OBJ_STATUS_WAIT_HUMAN_CHECK = 4;
  const OBJ_STATUS_CHECK_PASS = 6;
  const OBJ_STATUS_CHECK_FAIL = 7;
  const OBJ_STATUS_RECEIVED = 8;
  const OBJ_STATUS_FINISHED = 9;
  static public $__names = array(
    0 => 'OBJ_STATUS_APPLY',
    1 => 'OBJ_STATUS_WAIT_SYSTEM_CHECK',
    2 => 'OBJ_STATUS_IN_SYSTEM_CHECK',
    3 => 'OBJ_STATUS_END_SYSTEM_CHECK',
    4 => 'OBJ_STATUS_WAIT_HUMAN_CHECK',
    6 => 'OBJ_STATUS_CHECK_PASS',
    7 => 'OBJ_STATUS_CHECK_FAIL',
    8 => 'OBJ_STATUS_RECEIVED',
    9 => 'OBJ_STATUS_FINISHED',
  );
}

final class PayRecordConst {
  const PAY_CO_ID_ALIPAY = 1;
  const PAY_CO_ID_TENPAY = 2;
  const PAY_CO_ID_CHARGE_BONUS = 3;
  const PAY_METHOD_ALIPAY_MOBILE_APP = 4;
  const PAY_METHOD_ALIPAY_MOBILE_WEB = 5;
  static public $__names = array(
    1 => 'PAY_CO_ID_ALIPAY',
    2 => 'PAY_CO_ID_TENPAY',
    3 => 'PAY_CO_ID_CHARGE_BONUS',
    4 => 'PAY_METHOD_ALIPAY_MOBILE_APP',
    5 => 'PAY_METHOD_ALIPAY_MOBILE_WEB',
  );
}

final class OrderPaymentConstitutionConst {
  const PAY_TYPE_BALANCE = 1;
  const PAY_TYPE_DIRECTLY = 2;
  const PAY_TYPE_ECREDIT = 3;
  const PAY_TYPE_HONGBAO = 4;
  static public $__names = array(
    1 => 'PAY_TYPE_BALANCE',
    2 => 'PAY_TYPE_DIRECTLY',
    3 => 'PAY_TYPE_ECREDIT',
    4 => 'PAY_TYPE_HONGBAO',
  );
}

final class SfGroupCategoryConst {
  const MARKET = 1;
  const CUSTOMER_SERVICE = 2;
  const RESTAURANT = 3;
  const OTHER = 4;
  const AUTO = 5;
  static public $__names = array(
    1 => 'MARKET',
    2 => 'CUSTOMER_SERVICE',
    3 => 'RESTAURANT',
    4 => 'OTHER',
    5 => 'AUTO',
  );
}

final class UserBankcardStatus {
  const INVALID = -1;
  const PENDING = 0;
  const VALID = 1;
  static public $__names = array(
    -1 => 'INVALID',
    0 => 'PENDING',
    1 => 'VALID',
  );
}

final class WithdrawProcessRecordConst {
  const STATUS_SUBMITTED = 3;
  const STATUS_SUCCESS = 4;
  const STATUS_WARNING_FAIL = 5;
  const STATUS_FATAL_FAIL = 6;
  static public $__names = array(
    3 => 'STATUS_SUBMITTED',
    4 => 'STATUS_SUCCESS',
    5 => 'STATUS_WARNING_FAIL',
    6 => 'STATUS_FATAL_FAIL',
  );
}

final class FeedbackConst {
  const TYPE_OTHER = 0;
  const TYPE_USER = 1;
  const TYPE_BUG = 2;
  const TYPE_SUGGESTION = 3;
  const TYPE_COMPLAINT = 4;
  const TYPE_NEW_PAGE = 5;
  const TYPE_REQUEST_FOR_ORDER = 10;
  static public $__names = array(
    0 => 'TYPE_OTHER',
    1 => 'TYPE_USER',
    2 => 'TYPE_BUG',
    3 => 'TYPE_SUGGESTION',
    4 => 'TYPE_COMPLAINT',
    5 => 'TYPE_NEW_PAGE',
    10 => 'TYPE_REQUEST_FOR_ORDER',
  );
}

final class TerminalValidationConst {
  const TYPE_MOBILE = 0;
  const TYPE_EMAIL = 1;
  static public $__names = array(
    0 => 'TYPE_MOBILE',
    1 => 'TYPE_EMAIL',
  );
}

final class UserCertificationConst {
  const STATUS_PEND = 0;
  const STATUS_PASS = 1;
  const STATUS_FAIL = -1;
  const TYPE_NONE = 0;
  const TYPE_PERSONAL = 1;
  const TYPE_BUSINESS = 2;
  static public $__names = array(
    0 => 'STATUS_PEND',
    1 => 'STATUS_PASS',
    -1 => 'STATUS_FAIL',
    0 => 'TYPE_NONE',
    1 => 'TYPE_PERSONAL',
    2 => 'TYPE_BUSINESS',
  );
}

final class SSOTypeConst {
  const TYPE_NORMAL = 1;
  const TYPE_TEMP = 2;
  static public $__names = array(
    1 => 'TYPE_NORMAL',
    2 => 'TYPE_TEMP',
  );
}

final class SSOAppConst {
  const APP_NONE = 0;
  const APP_NOCHECK = 99;
  const APP_ELEME = 101;
  const APP_ELEME_MOBILE = 102;
  const APP_ELEME_IOS = 103;
  const APP_ELEME_ANDROID = 104;
  const APP_NAPOS = 201;
  const APP_NAPOS_MOBILE = 202;
  const APP_NAPOS_IOS = 203;
  const APP_NAPOS_ANDROID = 204;
  const APP_NAPOS_KAIDIAN = 210;
  const APP_INTRA_WALLE_JAVIS = 301;
  const APP_INTRA_SPECTRE = 302;
  static public $__names = array(
    0 => 'APP_NONE',
    99 => 'APP_NOCHECK',
    101 => 'APP_ELEME',
    102 => 'APP_ELEME_MOBILE',
    103 => 'APP_ELEME_IOS',
    104 => 'APP_ELEME_ANDROID',
    201 => 'APP_NAPOS',
    202 => 'APP_NAPOS_MOBILE',
    203 => 'APP_NAPOS_IOS',
    204 => 'APP_NAPOS_ANDROID',
    210 => 'APP_NAPOS_KAIDIAN',
    301 => 'APP_INTRA_WALLE_JAVIS',
    302 => 'APP_INTRA_SPECTRE',
  );
}

final class SSODestroyActionConst {
  const USER_LOGOUT = 11;
  const USER_REMOVE_BY_SELF = 12;
  const ADMIN_REMOVE_BY_ADMIN = 21;
  const SYSTEM_EXPIRE = 31;
  const SYSTEM_USER_INACTIVE = 32;
  const SYSTEM_PASSWORD_CHANGE = 33;
  static public $__names = array(
    11 => 'USER_LOGOUT',
    12 => 'USER_REMOVE_BY_SELF',
    21 => 'ADMIN_REMOVE_BY_ADMIN',
    31 => 'SYSTEM_EXPIRE',
    32 => 'SYSTEM_USER_INACTIVE',
    33 => 'SYSTEM_PASSWORD_CHANGE',
  );
}

final class UCBDestroyActionConst {
  const USER_REMOVE_BY_SELF = 11;
  const ADMIN_REMOVE_BY_ADMIN = 21;
  const SYSTEM_EXPIRE = 31;
  const SYSTEM_USER_INACTIVE = 32;
  static public $__names = array(
    11 => 'USER_REMOVE_BY_SELF',
    21 => 'ADMIN_REMOVE_BY_ADMIN',
    31 => 'SYSTEM_EXPIRE',
    32 => 'SYSTEM_USER_INACTIVE',
  );
}

final class UMBDestroyActionConst {
  const ADMIN_REMOVE_BY_ADMIN = 21;
  const SYSTEM_EXPIRE = 31;
  const SYSTEM_SUSPICIOUS_ORDER = 32;
  static public $__names = array(
    21 => 'ADMIN_REMOVE_BY_ADMIN',
    31 => 'SYSTEM_EXPIRE',
    32 => 'SYSTEM_SUSPICIOUS_ORDER',
  );
}

final class MCBDestroyActionConst {
  const ADMIN_REMOVE_BY_ADMIN = 21;
  const SYSTEM_EXPIRE = 31;
  const SYSTEM_SUSPICIOUS_ORDER = 32;
  static public $__names = array(
    21 => 'ADMIN_REMOVE_BY_ADMIN',
    31 => 'SYSTEM_EXPIRE',
    32 => 'SYSTEM_SUSPICIOUS_ORDER',
  );
}

final class UserCustomMenuCategoryConst {
  const OTHER = 0;
  const INSTANCE = 1;
  const OBJECTS = 2;
  static public $__names = array(
    0 => 'OTHER',
    1 => 'INSTANCE',
    2 => 'OBJECTS',
  );
}

final class EUSErrorCode {
  const UNKNOWN_ERROR = 0;
  const ADDRESS_NOT_FOUND = 1;
  const ALIPAY_ACCOUNTS_INVALID = 2;
  const ALREADY_BIND_EMAIL = 3;
  const ALREADY_BIND_MOBILE = 4;
  const ANDROID_MESSAGE_NOT_FOUND = 5;
  const ANONYMOUS_USER_CANT_CHARGE = 6;
  const BANKCARD_BIND_RECORD_NOT_FOUND = 7;
  const BANK_NOT_FOUND = 8;
  const BATCH_LOG_WRONG_FORMAT = 9;
  const BATCH_NOT_FOUND = 10;
  const CANT_PAY_FOR_ORDER = 11;
  const CANT_PAY_FOR_CONTRACT = 12;
  const CGB_ACCOUNTS_INVALID = 13;
  const CUSTOMER_SERVICE_NOT_FOUND = 14;
  const DOP_USER_NOT_FOUND = 15;
  const DRAWBACK_RECORD_NOT_FOUND = 16;
  const DRAWBACK_PROCESS_RECORD_NOT_FOUND = 17;
  const DRAWBACK_PROCESS_BATCH_NOT_FOUND = 18;
  const DUPLICATED_BANKCARD = 19;
  const DUPLICATED_BIND_CARD_REQUEST = 20;
  const DUPLICATED_DRAWBACK_ANONYMOUS_ORDER = 21;
  const EMAIL_OCCUPIED = 22;
  const EMAIL_VALIDATION_TOO_FREQUENT = 23;
  const EPAY_WRONG_AMOUNT = 24;
  const FEEDBACK_NOT_FOUND = 25;
  const FEEDBACK_TOO_FREQUENT = 26;
  const GENERATED_RECORD_NOT_FOUND = 27;
  const GIFT_NOT_FOUND = 28;
  const GIFT_REMAIN_NONE = 29;
  const HONGBAO_AMOUNT_NOT_ENOUGH = 30;
  const HONGBAO_INVALID = 31;
  const HONGBAO_NOT_FOUND = 32;
  const HONGBAO_OTHER_PEOPLES = 33;
  const HONGBAO_USED = 34;
  const HONGBAO_USE_LIMIT_EXCEED = 35;
  const INSUFFICIENT_BALANCE = 36;
  const INVALID_BANKCARD_ID = 37;
  const INVALID_EMAIL = 38;
  const INVALID_BACKUP_PHONE = 39;
  const INVALID_HONGBAO_EXCHANGER = 40;
  const INVALID_MOBILE = 41;
  const INVALID_PASSWORD = 42;
  const INVALID_PAY_COME_FROM = 43;
  const INVALID_PAY_COMPANY_ID = 44;
  const INVALID_PAY_METHOD_REMARK = 45;
  const INVALID_PAY_RECORD = 46;
  const INVALID_PAY_RETURN_INFO = 47;
  const INVALID_RESTAURANT = 48;
  const INVALID_USER = 49;
  const INVALID_USERNAME = 50;
  const INVALID_VALIDATE_REQUEST = 51;
  const INVOICE_NOT_FOUND = 52;
  const IOS_MESSAGE_NOT_FOUND = 53;
  const IP_CHANGED = 54;
  const IP_PARSER_NOT_WORK = 55;
  const MESSAGE_USER_NOT_MATCH = 56;
  const MOBILE_AUTH_FAIL = 57;
  const MOBILE_LOCATION_NOT_FOUND = 58;
  const MOBILE_OCCUPIED = 59;
  const MOBILE_VALIDATE_QUOTA_OUT = 60;
  const NO_COUPON_SOURCE = 61;
  const NO_EMAIL_BOUND = 62;
  const NO_MOBILE_BOUND = 63;
  const ONLINE_PAYMENT_RESTAURANT_MUST_HAVE_ADMIN = 64;
  const ORDER_PAYMENT_CONSTITUTION_NOT_FOUND = 65;
  const PAY_FOR_ORDER_TIMEOUT = 66;
  const PAY_RECORD_MAKE_TOO_FREQUENTLY = 67;
  const PAY_RECORD_NOT_FOUND = 68;
  const PAY_RECORD_TRADE_NO_DUPLICATED = 69;
  const PERMISSION_DENIED = 70;
  const POINT_NOT_ENOUGH = 71;
  const PROFILE_CHANGE_QUOTA_OUT = 72;
  const REMEMBER_KEY_NOT_FOUND = 73;
  const RENREN_USER_MAP_NOT_FOUND = 74;
  const RESTAURANT_ADMIN_NOT_FOUND = 75;
  const RESTAURANT_ALREADY_HAVE_ADMIN = 76;
  const SNS_ALREADY_BOUND_OTHER = 77;
  const SNS_OCCUPIED = 78;
  const THIRD_USER_SESSION_NOT_FOUND = 79;
  const TRADE_RECORD_NOT_FOUND = 80;
  const USERNAME_ALREADY_USED = 81;
  const USER_ALREADY_RESTAURANT_ADMIN = 82;
  const USER_AUTH_FAIL = 83;
  const MOBILE_LOGIN_AUTH_FAIL = 84;
  const USER_BALANCE_CHANGE_NOT_FOUND = 85;
  const USER_BANKCARD_NOT_FOUND = 86;
  const USER_BANKCARD_ALL_INVALID = 87;
  const USER_CERTIFICATION_NOT_FOUND = 88;
  const USER_CERTIFICATION_APPLY_TYPE_INVALID = 89;
  const USER_CERTIFICATION_APPLY_TYPE_NOT_FOUND = 90;
  const USER_CERTIFICATION_APPLY_PASS_EDIT = 91;
  const USER_CERTIFICATION_FIRST = 92;
  const USER_CERTIFICATION_PROCESS_RECORD_NOT_FOUND = 93;
  const USER_CERTIFICATION_DUPLICATE = 94;
  const CARDHOLDER_NAME_NOT_MATCH = 95;
  const USER_GIFT_NOT_FOUND = 96;
  const USER_GROUP_NOT_FOUND = 97;
  const USER_MESSAGE_NOT_FOUND = 98;
  const USER_META_DATA_NOT_FOUND = 99;
  const USER_NOT_FOUND = 100;
  const USER_DOES_NOT_EXIST = 101;
  const USER_PLACE_NOT_FOUND = 102;
  const USER_PROFILE_NOT_FOUND = 103;
  const MOBILE_BINDED = 104;
  const MOBILE_NOT_BINDED = 105;
  const ERROR_SNS_ID = 106;
  const USERNAME_READONLY = 107;
  const PASSWORD_UPDATE_ONLY = 108;
  const VALIDATE_CODE_EXPIRED = 109;
  const VALIDATE_CODE_QUOTA_OUT = 110;
  const WEIBO_USER_MAP_NOT_FOUND = 111;
  const WEIXIN_USER_MAP_NOT_FOUND = 112;
  const WITHDRAW_RECORD_NOT_FOUND = 113;
  const WITHDRAW_RECORD_CANT_SUBMIT = 114;
  const WITHDRAW_RECORD_ALREADY_SUBMITTED = 115;
  const WITHDRAW_PROCESS_RECORD_NOT_FOUND = 116;
  const WITHDRAW_TOO_FREQUENTLY = 117;
  const WITHDRAW_TOO_MUCH = 118;
  const WRONG_ACTIVE_CODE = 119;
  const WRONG_AMOUNT = 120;
  const WRONG_PASSWORD_RETRIEVAL_TOKEN = 121;
  const ALREADY_BIND_BANKCARD = 122;
  const USER_EXISTED_BUT_NOT_RESTAURANT_ADMIN = 123;
  const NOT_TESTER_USER = 124;
  const MENU_NOT_FOUND = 125;
  const USER_AUTH_OLD_PASSWORD_ERROR = 126;
  const USER_NOT_AUTOGENERATED = 127;
  const EES_CLIENT_ERROR = 128;
  const EOS_CLIENT_ERROR = 129;
  const ERS_CLIENT_ERROR = 130;
  const SMS_CLIENT_ERROR = 131;
  const GEOS_CLIENT_ERROR = 132;
  const DATABASE_ERROR = 133;
  const INVALID_PARAMETERS = 134;
  static public $__names = array(
    0 => 'UNKNOWN_ERROR',
    1 => 'ADDRESS_NOT_FOUND',
    2 => 'ALIPAY_ACCOUNTS_INVALID',
    3 => 'ALREADY_BIND_EMAIL',
    4 => 'ALREADY_BIND_MOBILE',
    5 => 'ANDROID_MESSAGE_NOT_FOUND',
    6 => 'ANONYMOUS_USER_CANT_CHARGE',
    7 => 'BANKCARD_BIND_RECORD_NOT_FOUND',
    8 => 'BANK_NOT_FOUND',
    9 => 'BATCH_LOG_WRONG_FORMAT',
    10 => 'BATCH_NOT_FOUND',
    11 => 'CANT_PAY_FOR_ORDER',
    12 => 'CANT_PAY_FOR_CONTRACT',
    13 => 'CGB_ACCOUNTS_INVALID',
    14 => 'CUSTOMER_SERVICE_NOT_FOUND',
    15 => 'DOP_USER_NOT_FOUND',
    16 => 'DRAWBACK_RECORD_NOT_FOUND',
    17 => 'DRAWBACK_PROCESS_RECORD_NOT_FOUND',
    18 => 'DRAWBACK_PROCESS_BATCH_NOT_FOUND',
    19 => 'DUPLICATED_BANKCARD',
    20 => 'DUPLICATED_BIND_CARD_REQUEST',
    21 => 'DUPLICATED_DRAWBACK_ANONYMOUS_ORDER',
    22 => 'EMAIL_OCCUPIED',
    23 => 'EMAIL_VALIDATION_TOO_FREQUENT',
    24 => 'EPAY_WRONG_AMOUNT',
    25 => 'FEEDBACK_NOT_FOUND',
    26 => 'FEEDBACK_TOO_FREQUENT',
    27 => 'GENERATED_RECORD_NOT_FOUND',
    28 => 'GIFT_NOT_FOUND',
    29 => 'GIFT_REMAIN_NONE',
    30 => 'HONGBAO_AMOUNT_NOT_ENOUGH',
    31 => 'HONGBAO_INVALID',
    32 => 'HONGBAO_NOT_FOUND',
    33 => 'HONGBAO_OTHER_PEOPLES',
    34 => 'HONGBAO_USED',
    35 => 'HONGBAO_USE_LIMIT_EXCEED',
    36 => 'INSUFFICIENT_BALANCE',
    37 => 'INVALID_BANKCARD_ID',
    38 => 'INVALID_EMAIL',
    39 => 'INVALID_BACKUP_PHONE',
    40 => 'INVALID_HONGBAO_EXCHANGER',
    41 => 'INVALID_MOBILE',
    42 => 'INVALID_PASSWORD',
    43 => 'INVALID_PAY_COME_FROM',
    44 => 'INVALID_PAY_COMPANY_ID',
    45 => 'INVALID_PAY_METHOD_REMARK',
    46 => 'INVALID_PAY_RECORD',
    47 => 'INVALID_PAY_RETURN_INFO',
    48 => 'INVALID_RESTAURANT',
    49 => 'INVALID_USER',
    50 => 'INVALID_USERNAME',
    51 => 'INVALID_VALIDATE_REQUEST',
    52 => 'INVOICE_NOT_FOUND',
    53 => 'IOS_MESSAGE_NOT_FOUND',
    54 => 'IP_CHANGED',
    55 => 'IP_PARSER_NOT_WORK',
    56 => 'MESSAGE_USER_NOT_MATCH',
    57 => 'MOBILE_AUTH_FAIL',
    58 => 'MOBILE_LOCATION_NOT_FOUND',
    59 => 'MOBILE_OCCUPIED',
    60 => 'MOBILE_VALIDATE_QUOTA_OUT',
    61 => 'NO_COUPON_SOURCE',
    62 => 'NO_EMAIL_BOUND',
    63 => 'NO_MOBILE_BOUND',
    64 => 'ONLINE_PAYMENT_RESTAURANT_MUST_HAVE_ADMIN',
    65 => 'ORDER_PAYMENT_CONSTITUTION_NOT_FOUND',
    66 => 'PAY_FOR_ORDER_TIMEOUT',
    67 => 'PAY_RECORD_MAKE_TOO_FREQUENTLY',
    68 => 'PAY_RECORD_NOT_FOUND',
    69 => 'PAY_RECORD_TRADE_NO_DUPLICATED',
    70 => 'PERMISSION_DENIED',
    71 => 'POINT_NOT_ENOUGH',
    72 => 'PROFILE_CHANGE_QUOTA_OUT',
    73 => 'REMEMBER_KEY_NOT_FOUND',
    74 => 'RENREN_USER_MAP_NOT_FOUND',
    75 => 'RESTAURANT_ADMIN_NOT_FOUND',
    76 => 'RESTAURANT_ALREADY_HAVE_ADMIN',
    77 => 'SNS_ALREADY_BOUND_OTHER',
    78 => 'SNS_OCCUPIED',
    79 => 'THIRD_USER_SESSION_NOT_FOUND',
    80 => 'TRADE_RECORD_NOT_FOUND',
    81 => 'USERNAME_ALREADY_USED',
    82 => 'USER_ALREADY_RESTAURANT_ADMIN',
    83 => 'USER_AUTH_FAIL',
    84 => 'MOBILE_LOGIN_AUTH_FAIL',
    85 => 'USER_BALANCE_CHANGE_NOT_FOUND',
    86 => 'USER_BANKCARD_NOT_FOUND',
    87 => 'USER_BANKCARD_ALL_INVALID',
    88 => 'USER_CERTIFICATION_NOT_FOUND',
    89 => 'USER_CERTIFICATION_APPLY_TYPE_INVALID',
    90 => 'USER_CERTIFICATION_APPLY_TYPE_NOT_FOUND',
    91 => 'USER_CERTIFICATION_APPLY_PASS_EDIT',
    92 => 'USER_CERTIFICATION_FIRST',
    93 => 'USER_CERTIFICATION_PROCESS_RECORD_NOT_FOUND',
    94 => 'USER_CERTIFICATION_DUPLICATE',
    95 => 'CARDHOLDER_NAME_NOT_MATCH',
    96 => 'USER_GIFT_NOT_FOUND',
    97 => 'USER_GROUP_NOT_FOUND',
    98 => 'USER_MESSAGE_NOT_FOUND',
    99 => 'USER_META_DATA_NOT_FOUND',
    100 => 'USER_NOT_FOUND',
    101 => 'USER_DOES_NOT_EXIST',
    102 => 'USER_PLACE_NOT_FOUND',
    103 => 'USER_PROFILE_NOT_FOUND',
    104 => 'MOBILE_BINDED',
    105 => 'MOBILE_NOT_BINDED',
    106 => 'ERROR_SNS_ID',
    107 => 'USERNAME_READONLY',
    108 => 'PASSWORD_UPDATE_ONLY',
    109 => 'VALIDATE_CODE_EXPIRED',
    110 => 'VALIDATE_CODE_QUOTA_OUT',
    111 => 'WEIBO_USER_MAP_NOT_FOUND',
    112 => 'WEIXIN_USER_MAP_NOT_FOUND',
    113 => 'WITHDRAW_RECORD_NOT_FOUND',
    114 => 'WITHDRAW_RECORD_CANT_SUBMIT',
    115 => 'WITHDRAW_RECORD_ALREADY_SUBMITTED',
    116 => 'WITHDRAW_PROCESS_RECORD_NOT_FOUND',
    117 => 'WITHDRAW_TOO_FREQUENTLY',
    118 => 'WITHDRAW_TOO_MUCH',
    119 => 'WRONG_ACTIVE_CODE',
    120 => 'WRONG_AMOUNT',
    121 => 'WRONG_PASSWORD_RETRIEVAL_TOKEN',
    122 => 'ALREADY_BIND_BANKCARD',
    123 => 'USER_EXISTED_BUT_NOT_RESTAURANT_ADMIN',
    124 => 'NOT_TESTER_USER',
    125 => 'MENU_NOT_FOUND',
    126 => 'USER_AUTH_OLD_PASSWORD_ERROR',
    127 => 'USER_NOT_AUTOGENERATED',
    128 => 'EES_CLIENT_ERROR',
    129 => 'EOS_CLIENT_ERROR',
    130 => 'ERS_CLIENT_ERROR',
    131 => 'SMS_CLIENT_ERROR',
    132 => 'GEOS_CLIENT_ERROR',
    133 => 'DATABASE_ERROR',
    134 => 'INVALID_PARAMETERS',
  );
}

class TCAlipayRefundApplyInfo extends TBase {
  static $_TSPEC;

  public $url = null;
  public $form_data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'form_data',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCAlipayRefundApplyInfo';
  }

  public function read($input)
  {
    return $this->_read('TCAlipayRefundApplyInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCAlipayRefundApplyInfo', self::$_TSPEC, $output);
  }
}

class TCDrawbackProcessNotify extends TBase {
  static $_TSPEC;

  public $batch_no = null;
  public $success_num = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_no',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'success_num',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDrawbackProcessNotify';
  }

  public function read($input)
  {
    return $this->_read('TCDrawbackProcessNotify', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDrawbackProcessNotify', self::$_TSPEC, $output);
  }
}

class TCAlipayBatchInfo extends TBase {
  static $_TSPEC;

  public $id = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCAlipayBatchInfo';
  }

  public function read($input)
  {
    return $this->_read('TCAlipayBatchInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCAlipayBatchInfo', self::$_TSPEC, $output);
  }
}

class TCDrawbackProcessRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $batch_no = null;
  public $drawback_id = null;
  public $pay_record_id = null;
  public $out_trade_no = null;
  public $amount = null;
  public $status = null;
  public $pay_platform = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'batch_no',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'drawback_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'out_trade_no',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'pay_platform',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDrawbackProcessRecord';
  }

  public function read($input)
  {
    return $this->_read('TCDrawbackProcessRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDrawbackProcessRecord', self::$_TSPEC, $output);
  }
}

class TCPayReturnInfo extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;
  public $trade_no = null;
  public $pay_co_id = null;
  public $total_fee = null;
  public $customer_pay_id = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'trade_no',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pay_co_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'total_fee',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'customer_pay_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCPayReturnInfo';
  }

  public function read($input)
  {
    return $this->_read('TCPayReturnInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCPayReturnInfo', self::$_TSPEC, $output);
  }
}

class TUserProfile extends TBase {
  static $_TSPEC;

  public $id = null;
  public $current_address_id = null;
  public $balance = null;
  public $point = null;
  public $email = null;
  public $is_email_valid = null;
  public $mobile = null;
  public $is_mobile_valid = null;
  public $validate_string = null;
  public $avatar = null;
  public $current_invoice_id = null;
  public $user_id = null;
  public $payment_quota = null;
  public $payment_password = null;
  public $name = null;
  public $certification_type = null;
  public $referal_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'current_address_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'balance',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'point',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'is_email_valid',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'is_mobile_valid',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'validate_string',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'avatar',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'current_invoice_id',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'payment_quota',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'payment_password',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'certification_type',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'referal_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserProfile';
  }

  public function read($input)
  {
    return $this->_read('TUserProfile', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserProfile', self::$_TSPEC, $output);
  }
}

class TUserPlace extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $place_id = null;
  public $place_name = null;
  public $created_at = null;
  public $last_visit = null;
  public $pguid = null;
  public $poi_name = null;
  public $psn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'place_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'place_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'last_visit',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'pguid',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'poi_name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'psn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserPlace';
  }

  public function read($input)
  {
    return $this->_read('TUserPlace', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserPlace', self::$_TSPEC, $output);
  }
}

class TUser extends TBase {
  static $_TSPEC;

  public $id = null;
  public $username = null;
  public $last_login = null;
  public $created_at = null;
  public $is_active = null;
  public $is_super_admin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'last_login',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'is_active',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'is_super_admin',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUser';
  }

  public function read($input)
  {
    return $this->_read('TUser', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUser', self::$_TSPEC, $output);
  }
}

class TAutoGeneratedUser extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $is_username_autogenerated = null;
  public $is_password_autogenerated = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_username_autogenerated',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'is_password_autogenerated',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TAutoGeneratedUser';
  }

  public function read($input)
  {
    return $this->_read('TAutoGeneratedUser', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TAutoGeneratedUser', self::$_TSPEC, $output);
  }
}

class TSignupExtendParam extends TBase {
  static $_TSPEC;

  public $referal_code = null;
  public $refer_url = null;
  public $user_agent = null;
  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'referal_code',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'refer_url',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_agent',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TSignupExtendParam';
  }

  public function read($input)
  {
    return $this->_read('TSignupExtendParam', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TSignupExtendParam', self::$_TSPEC, $output);
  }
}

class TBank extends TBase {
  static $_TSPEC;

  public $id = null;
  public $bank_name = null;
  public $cgb_name = null;
  public $cgb_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'bank_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cgb_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'cgb_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TBank';
  }

  public function read($input)
  {
    return $this->_read('TBank', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TBank', self::$_TSPEC, $output);
  }
}

class TMobileLocation extends TBase {
  static $_TSPEC;

  public $id = null;
  public $mobile_seg = null;
  public $province = null;
  public $city = null;
  public $carrier = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile_seg',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'carrier',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TMobileLocation';
  }

  public function read($input)
  {
    return $this->_read('TMobileLocation', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TMobileLocation', self::$_TSPEC, $output);
  }
}

class TThirdUserSession extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $session_id = null;
  public $type = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TThirdUserSession';
  }

  public function read($input)
  {
    return $this->_read('TThirdUserSession', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TThirdUserSession', self::$_TSPEC, $output);
  }
}

class TUserMessage extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $type = null;
  public $msg_abstract = null;
  public $content = null;
  public $target_id = null;
  public $url = null;
  public $is_read = null;
  public $created_at = null;
  public $begin_at = null;
  public $end_at = null;
  public $read_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'msg_abstract',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'target_id',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'is_read',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'begin_at',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'end_at',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'read_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserMessage';
  }

  public function read($input)
  {
    return $this->_read('TUserMessage', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserMessage', self::$_TSPEC, $output);
  }
}

class TFullUser extends TBase {
  static $_TSPEC;

  public $user = null;
  public $profile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUser',
          ),
        2 => array(
          'var' => 'profile',
          'type' => TType::STRUCT,
          'class' => '\EUS\TUserProfile',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TFullUser';
  }

  public function read($input)
  {
    return $this->_read('TFullUser', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TFullUser', self::$_TSPEC, $output);
  }
}

class TAddress extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $address = null;
  public $phone = null;
  public $is_valid = null;
  public $created_at = null;
  public $entry_id = null;
  public $phone_bk = null;
  public $geohash = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'phone_bk',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TAddress';
  }

  public function read($input)
  {
    return $this->_read('TAddress', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TAddress', self::$_TSPEC, $output);
  }
}

class TDopUser extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $call_user = null;
  public $call_pwd = null;
  public $call_status = null;
  public $is_online = null;
  public $process_type = null;
  public $created_at = null;
  public $weight = null;
  public $call_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'call_user',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'call_pwd',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'call_status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'is_online',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'process_type',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'weight',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'call_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDopUser';
  }

  public function read($input)
  {
    return $this->_read('TDopUser', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDopUser', self::$_TSPEC, $output);
  }
}

class TInvoice extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $invoice_pay_to = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'invoice_pay_to',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TInvoice';
  }

  public function read($input)
  {
    return $this->_read('TInvoice', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TInvoice', self::$_TSPEC, $output);
  }
}

class TGift extends TBase {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $description = null;
  public $image_url = null;
  public $price = null;
  public $created_at = null;
  public $is_valid = null;
  public $amount = null;
  public $thumb_url = null;
  public $is_new = null;
  public $is_apple_product = null;
  public $image_hash = null;
  public $thumb_hash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'image_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'price',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'amount',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'thumb_url',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'is_new',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'is_apple_product',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'image_hash',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'thumb_hash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TGift';
  }

  public function read($input)
  {
    return $this->_read('TGift', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TGift', self::$_TSPEC, $output);
  }
}

class TGroup extends TBase {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $description = null;
  public $rank = null;
  public $category = null;
  public $is_eleme = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'rank',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'category',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'is_eleme',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TGroup';
  }

  public function read($input)
  {
    return $this->_read('TGroup', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TGroup', self::$_TSPEC, $output);
  }
}

class THongbao extends TBase {
  static $_TSPEC;

  public $id = null;
  public $sn = null;
  public $user_id = null;
  public $amount = null;
  public $used_amount = null;
  public $created_at = null;
  public $used_at = null;
  public $updated_at = null;
  public $begin_date = null;
  public $end_date = null;
  public $sum_condition = null;
  public $status = null;
  public $name = null;
  public $source = null;
  public $tag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'used_amount',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'used_at',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'updated_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'begin_date',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'end_date',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'sum_condition',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'tag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'THongbao';
  }

  public function read($input)
  {
    return $this->_read('THongbao', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('THongbao', self::$_TSPEC, $output);
  }
}

class TRefer extends TBase {
  static $_TSPEC;

  public $id = null;
  public $from_user_id = null;
  public $to_user_id = null;
  public $from_ip = null;
  public $to_ip = null;
  public $from_username = null;
  public $to_username = null;
  public $mobile = null;
  public $mobile_status = null;
  public $order_id = null;
  public $order_status = null;
  public $created_at = null;
  public $remark = null;
  public $refer_url = null;
  public $user_agent = null;
  public $from_city = null;
  public $to_city = null;
  public $mobile_city = null;
  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'from_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'to_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'from_ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'to_ip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'from_username',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'to_username',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'mobile_status',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'order_status',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'refer_url',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'user_agent',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'from_city',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'to_city',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'mobile_city',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRefer';
  }

  public function read($input)
  {
    return $this->_read('TRefer', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRefer', self::$_TSPEC, $output);
  }
}

class TReferQuery extends TBase {
  static $_TSPEC;

  public $from_user_id = null;
  public $offset = null;
  public $limit = null;
  public $from_username = null;
  public $to_username = null;
  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'from_username',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'to_username',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TReferQuery';
  }

  public function read($input)
  {
    return $this->_read('TReferQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TReferQuery', self::$_TSPEC, $output);
  }
}

class TPermission extends TBase {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $description = null;
  public $rank = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'rank',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPermission';
  }

  public function read($input)
  {
    return $this->_read('TPermission', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPermission', self::$_TSPEC, $output);
  }
}

class TGroupPermission extends TBase {
  static $_TSPEC;

  public $group_id = null;
  public $permission_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'group_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'permission_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TGroupPermission';
  }

  public function read($input)
  {
    return $this->_read('TGroupPermission', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TGroupPermission', self::$_TSPEC, $output);
  }
}

class TUserGift extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $gift_id = null;
  public $delivery_name = null;
  public $delivery_address = null;
  public $delivery_phone = null;
  public $delivery_note = null;
  public $created_at = null;
  public $processed = null;
  public $is_valid = null;
  public $note = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'gift_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'delivery_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'delivery_address',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'delivery_phone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'delivery_note',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'processed',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'note',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserGift';
  }

  public function read($input)
  {
    return $this->_read('TUserGift', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserGift', self::$_TSPEC, $output);
  }
}

class TWeiboUserMap extends TBase {
  static $_TSPEC;

  public $id = null;
  public $weibo_uid = null;
  public $user_id = null;
  public $is_bound = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'weibo_uid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'is_bound',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWeiboUserMap';
  }

  public function read($input)
  {
    return $this->_read('TWeiboUserMap', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWeiboUserMap', self::$_TSPEC, $output);
  }
}

class TWeixinUserMap extends TBase {
  static $_TSPEC;

  public $id = null;
  public $weixin_uid = null;
  public $user_id = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'weixin_uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWeixinUserMap';
  }

  public function read($input)
  {
    return $this->_read('TWeixinUserMap', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWeixinUserMap', self::$_TSPEC, $output);
  }
}

class TRenrenUserMap extends TBase {
  static $_TSPEC;

  public $id = null;
  public $renren_uid = null;
  public $user_id = null;
  public $is_bound = null;
  public $created_at = null;
  public $enable_publish = null;
  public $publish_order = null;
  public $publish_dianping = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'renren_uid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'is_bound',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'enable_publish',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'publish_order',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'publish_dianping',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRenrenUserMap';
  }

  public function read($input)
  {
    return $this->_read('TRenrenUserMap', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRenrenUserMap', self::$_TSPEC, $output);
  }
}

class TSNSMapStruct extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $sns_uid = null;
  public $sns_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sns_uid',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TSNSMapStruct';
  }

  public function read($input)
  {
    return $this->_read('TSNSMapStruct', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TSNSMapStruct', self::$_TSPEC, $output);
  }
}

class TSNSMapStructNew extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $sns_uid = null;
  public $sns_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sns_uid',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sns_type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TSNSMapStructNew';
  }

  public function read($input)
  {
    return $this->_read('TSNSMapStructNew', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TSNSMapStructNew', self::$_TSPEC, $output);
  }
}

class TGiftQuery extends TBase {
  static $_TSPEC;

  public $is_apple_product = null;
  public $is_new = null;
  public $is_valid = null;
  public $min_amount = null;
  public $offset = null;
  public $limit = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'is_apple_product',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'is_new',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'min_amount',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'offset',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TGiftQuery';
  }

  public function read($input)
  {
    return $this->_read('TGiftQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TGiftQuery', self::$_TSPEC, $output);
  }
}

class TDrawbackProcessRecordQuery extends TBase {
  static $_TSPEC;

  public $status = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDrawbackProcessRecordQuery';
  }

  public function read($input)
  {
    return $this->_read('TDrawbackProcessRecordQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDrawbackProcessRecordQuery', self::$_TSPEC, $output);
  }
}

class TPointChangeRecordQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $sort_key = null;
  public $sort_type = null;
  public $user_id = null;
  public $start_date = null;
  public $end_date = null;
  public $delta = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort_key',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sort_type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'start_date',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'end_date',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'delta',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPointChangeRecordQuery';
  }

  public function read($input)
  {
    return $this->_read('TPointChangeRecordQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPointChangeRecordQuery', self::$_TSPEC, $output);
  }
}

class TWallePointChangeQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $from_datetime = null;
  public $to_datetime = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWallePointChangeQuery';
  }

  public function read($input)
  {
    return $this->_read('TWallePointChangeQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWallePointChangeQuery', self::$_TSPEC, $output);
  }
}

class TPointChangeRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $created_at = null;
  public $delta = null;
  public $reason = null;
  public $relevant_id = null;
  public $change_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'delta',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'relevant_id',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'change_type',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPointChangeRecord';
  }

  public function read($input)
  {
    return $this->_read('TPointChangeRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPointChangeRecord', self::$_TSPEC, $output);
  }
}

class TUserGiftQuery extends TBase {
  static $_TSPEC;

  public $processed = null;
  public $is_valid = null;
  public $offset = null;
  public $limit = null;
  public $keyword = null;
  public $obj_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'processed',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'obj_status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserGiftQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserGiftQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserGiftQuery', self::$_TSPEC, $output);
  }
}

class TUserQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $keyword = null;
  public $is_active = null;
  public $is_super_admin = null;
  public $group_ids = null;
  public $category = null;
  public $mobile = null;
  public $email = null;
  public $name = null;
  public $region_ids = null;
  public $region_group_ids = null;
  public $city_ids = null;
  public $user_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_active',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'is_super_admin',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'group_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        7 => array(
          'var' => 'category',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'region_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        12 => array(
          'var' => 'region_group_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        13 => array(
          'var' => 'city_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        14 => array(
          'var' => 'user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserQuery', self::$_TSPEC, $output);
  }
}

class TFullUserQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $keyword = null;
  public $is_active = null;
  public $is_super_admin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_active',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'is_super_admin',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TFullUserQuery';
  }

  public function read($input)
  {
    return $this->_read('TFullUserQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TFullUserQuery', self::$_TSPEC, $output);
  }
}

class TFeedbackQuery extends TBase {
  static $_TSPEC;

  public $comment_types = null;
  public $entry_id = null;
  public $zone_id = null;
  public $district_id = null;
  public $city_id = null;
  public $offset = null;
  public $limit = null;
  public $feedback_id = null;
  public $is_processed = null;
  public $is_valid = null;
  public $created_at_start = null;
  public $created_at_end = null;
  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'comment_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'zone_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'district_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'feedback_id',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'is_processed',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'created_at_start',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'created_at_end',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TFeedbackQuery';
  }

  public function read($input)
  {
    return $this->_read('TFeedbackQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TFeedbackQuery', self::$_TSPEC, $output);
  }
}

class TFeedbackReplyQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $username = null;
  public $is_valid = null;
  public $is_processed = null;
  public $is_from_admin = null;
  public $offset = null;
  public $limit = null;
  public $created_at_start = null;
  public $created_at_end = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'is_processed',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'is_from_admin',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'created_at_start',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'created_at_end',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TFeedbackReplyQuery';
  }

  public function read($input)
  {
    return $this->_read('TFeedbackReplyQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TFeedbackReplyQuery', self::$_TSPEC, $output);
  }
}

class TWallePayStatsQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $sort_key = null;
  public $sort_type = null;
  public $date_start = null;
  public $date_end = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'sort_key',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'sort_type',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'date_start',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'date_end',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWallePayStatsQuery';
  }

  public function read($input)
  {
    return $this->_read('TWallePayStatsQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWallePayStatsQuery', self::$_TSPEC, $output);
  }
}

class TBlockedDeviceUserQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $user_id = null;
  public $come_from = null;
  public $operator_user_id = null;
  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'come_from',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'operator_user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TBlockedDeviceUserQuery';
  }

  public function read($input)
  {
    return $this->_read('TBlockedDeviceUserQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TBlockedDeviceUserQuery', self::$_TSPEC, $output);
  }
}

class TBlockedDeviceUser extends TBase {
  static $_TSPEC;

  public $id = null;
  public $device_id = null;
  public $come_from = null;
  public $reason = null;
  public $operator_user_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'come_from',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'operator_user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TBlockedDeviceUser';
  }

  public function read($input)
  {
    return $this->_read('TBlockedDeviceUser', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TBlockedDeviceUser', self::$_TSPEC, $output);
  }
}

class TDeviceUserQuery extends TBase {
  static $_TSPEC;

  public $device_id = null;
  public $user_id = null;
  public $version_name = null;
  public $type = null;
  public $eleme_device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'version_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'eleme_device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDeviceUserQuery';
  }

  public function read($input)
  {
    return $this->_read('TDeviceUserQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDeviceUserQuery', self::$_TSPEC, $output);
  }
}

class TDeviceUser extends TBase {
  static $_TSPEC;

  public $come_from = null;
  public $id = null;
  public $device_id = null;
  public $user_id = null;
  public $version = null;
  public $version_name = null;
  public $type = null;
  public $created_at = null;
  public $eleme_device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'come_from',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'version',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'version_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'eleme_device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDeviceUser';
  }

  public function read($input)
  {
    return $this->_read('TDeviceUser', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDeviceUser', self::$_TSPEC, $output);
  }
}

class THongbaoQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $statuses = null;
  public $begin_date_from = null;
  public $begin_date_to = null;
  public $end_date_from = null;
  public $end_date_to = null;
  public $created_at_from = null;
  public $created_at_to = null;
  public $used_at_from = null;
  public $used_at_to = null;
  public $limit = null;
  public $offset = null;
  public $order_by = null;
  public $sum_condition = null;
  public $source = null;
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        3 => array(
          'var' => 'begin_date_from',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'begin_date_to',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'end_date_from',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'end_date_to',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'created_at_from',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'created_at_to',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'used_at_from',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'used_at_to',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'order_by',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'sum_condition',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'THongbaoQuery';
  }

  public function read($input)
  {
    return $this->_read('THongbaoQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('THongbaoQuery', self::$_TSPEC, $output);
  }
}

class THongbaoSum extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $statuses = null;
  public $used_at_from = null;
  public $used_at_to = null;
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        3 => array(
          'var' => 'used_at_from',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'used_at_to',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'THongbaoSum';
  }

  public function read($input)
  {
    return $this->_read('THongbaoSum', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('THongbaoSum', self::$_TSPEC, $output);
  }
}

class TOrderPaymentConstitution extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $user_id = null;
  public $trade_record_id = null;
  public $balance_or_pay_id = null;
  public $pay_type = null;
  public $amount = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'trade_record_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'balance_or_pay_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'pay_type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderPaymentConstitution';
  }

  public function read($input)
  {
    return $this->_read('TOrderPaymentConstitution', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderPaymentConstitution', self::$_TSPEC, $output);
  }
}

class TPayError extends TBase {
  static $_TSPEC;

  public $id = null;
  public $fail_from = null;
  public $ip = null;
  public $description = null;
  public $request_content = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'fail_from',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'request_content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPayError';
  }

  public function read($input)
  {
    return $this->_read('TPayError', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPayError', self::$_TSPEC, $output);
  }
}

class TPayRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $trade_no = null;
  public $pay_purpose = null;
  public $pay_co_id = null;
  public $total_fee = null;
  public $customer_pay_id = null;
  public $pay_status = null;
  public $remark = null;
  public $created_at = null;
  public $succeeded_at = null;
  public $pay_company_id = null;
  public $come_from = null;
  public $pay_bank = null;
  public $order_id = null;
  public $discount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'trade_no',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pay_purpose',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'pay_co_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'total_fee',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'customer_pay_id',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'pay_status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'succeeded_at',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'pay_company_id',
          'type' => TType::I16,
          ),
        13 => array(
          'var' => 'come_from',
          'type' => TType::I16,
          ),
        14 => array(
          'var' => 'pay_bank',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'discount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPayRecord';
  }

  public function read($input)
  {
    return $this->_read('TPayRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPayRecord', self::$_TSPEC, $output);
  }
}

class TFeedback extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $username = null;
  public $created_at = null;
  public $content = null;
  public $is_valid = null;
  public $is_processed = null;
  public $entry_id = null;
  public $type = null;
  public $district_id = null;
  public $zone_id = null;
  public $city_id = null;
  public $geohash = null;
  public $user_agent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'is_processed',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'district_id',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'zone_id',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'city_id',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'user_agent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TFeedback';
  }

  public function read($input)
  {
    return $this->_read('TFeedback', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TFeedback', self::$_TSPEC, $output);
  }
}

class TFeedbackReply extends TBase {
  static $_TSPEC;

  public $id = null;
  public $feedback_id = null;
  public $user_id = null;
  public $username = null;
  public $content = null;
  public $is_valid = null;
  public $created_at = null;
  public $is_from_admin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'feedback_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'is_from_admin',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TFeedbackReply';
  }

  public function read($input)
  {
    return $this->_read('TFeedbackReply', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TFeedbackReply', self::$_TSPEC, $output);
  }
}

class TCFeedbackWithReplies extends TBase {
  static $_TSPEC;

  public $feedback = null;
  public $feedback_replies = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedback',
          'type' => TType::STRUCT,
          'class' => '\EUS\TFeedback',
          ),
        2 => array(
          'var' => 'feedback_replies',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TFeedbackReply',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCFeedbackWithReplies';
  }

  public function read($input)
  {
    return $this->_read('TCFeedbackWithReplies', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCFeedbackWithReplies', self::$_TSPEC, $output);
  }
}

class TCFeedbackInfo extends TBase {
  static $_TSPEC;

  public $feedback_id = null;
  public $feedback_at = null;
  public $city_id = null;
  public $geohash = null;
  public $reply_id = null;
  public $reply_at = null;
  public $reply_by = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'feedback_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'feedback_at',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'city_id',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'reply_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'reply_at',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'reply_by',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCFeedbackInfo';
  }

  public function read($input)
  {
    return $this->_read('TCFeedbackInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCFeedbackInfo', self::$_TSPEC, $output);
  }
}

class TWithdrawRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $amount = null;
  public $status = null;
  public $created_at = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWithdrawRecord';
  }

  public function read($input)
  {
    return $this->_read('TWithdrawRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWithdrawRecord', self::$_TSPEC, $output);
  }
}

class TCWithdrawRecord extends TBase {
  static $_TSPEC;

  public $amount = null;
  public $bank_id = null;
  public $cgb_id = null;
  public $card_id = null;
  public $bank_name = null;
  public $cardholder_name = null;
  public $withdraw_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'cgb_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bank_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'withdraw_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWithdrawRecord';
  }

  public function read($input)
  {
    return $this->_read('TCWithdrawRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWithdrawRecord', self::$_TSPEC, $output);
  }
}

class TCDrawbackRecord extends TBase {
  static $_TSPEC;

  public $username = null;
  public $amount = null;
  public $out_trade_no = null;
  public $trade_no = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'out_trade_no',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'trade_no',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDrawbackRecord';
  }

  public function read($input)
  {
    return $this->_read('TCDrawbackRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDrawbackRecord', self::$_TSPEC, $output);
  }
}

class TCDrawbackResultInfoQuery extends TBase {
  static $_TSPEC;

  public $username = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDrawbackResultInfoQuery';
  }

  public function read($input)
  {
    return $this->_read('TCDrawbackResultInfoQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDrawbackResultInfoQuery', self::$_TSPEC, $output);
  }
}

class TCPrettyPayRecord extends TBase {
  static $_TSPEC;

  public $pay_company_name = null;
  public $trade_no = null;
  public $out_trade_no = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_company_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'trade_no',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'out_trade_no',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCPrettyPayRecord';
  }

  public function read($input)
  {
    return $this->_read('TCPrettyPayRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCPrettyPayRecord', self::$_TSPEC, $output);
  }
}

class TCDrawbackResultInfo extends TBase {
  static $_TSPEC;

  public $username = null;
  public $amount = null;
  public $created_at = null;
  public $processed_at = null;
  public $pay_records = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'processed_at',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'pay_records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCPrettyPayRecord',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDrawbackResultInfo';
  }

  public function read($input)
  {
    return $this->_read('TCDrawbackResultInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDrawbackResultInfo', self::$_TSPEC, $output);
  }
}

class TCDrawbackResultInfoNew extends TBase {
  static $_TSPEC;

  public $username = null;
  public $amount = null;
  public $created_at = null;
  public $processed_at = null;
  public $status = null;
  public $drawback_process_records = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'processed_at',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'drawback_process_records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCDrawbackProcessRecord',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDrawbackResultInfoNew';
  }

  public function read($input)
  {
    return $this->_read('TCDrawbackResultInfoNew', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDrawbackResultInfoNew', self::$_TSPEC, $output);
  }
}

class TCDrawbackReport extends TBase {
  static $_TSPEC;

  public $mobile_records = null;
  public $batch_report = null;
  public $tenpay_app_report = null;
  public $tenpay_web_report = null;
  public $shengpay_records = null;
  public $shengpay_report = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile_records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCDrawbackRecord',
            ),
          ),
        2 => array(
          'var' => 'batch_report',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tenpay_app_report',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tenpay_web_report',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'shengpay_records',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EUS\TCDrawbackRecord',
            ),
          ),
        6 => array(
          'var' => 'shengpay_report',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDrawbackReport';
  }

  public function read($input)
  {
    return $this->_read('TCDrawbackReport', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDrawbackReport', self::$_TSPEC, $output);
  }
}

class TWalleWithdrawApplyQuery extends TBase {
  static $_TSPEC;

  public $statuses = null;
  public $restaurant_id = null;
  public $offset = null;
  public $limit = null;
  public $from_created_at = null;
  public $to_created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'from_created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'to_created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleWithdrawApplyQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleWithdrawApplyQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleWithdrawApplyQuery', self::$_TSPEC, $output);
  }
}

class TWalleWithdrawRecordQuery extends TBase {
  static $_TSPEC;

  public $statuses = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleWithdrawRecordQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleWithdrawRecordQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleWithdrawRecordQuery', self::$_TSPEC, $output);
  }
}

class TCWalleWithdrawApply extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $amount = null;
  public $status = null;
  public $created_at = null;
  public $remark = null;
  public $card_id = null;
  public $bank_name = null;
  public $cardholder_name = null;
  public $restaurant_id = null;
  public $restaurant_name = null;
  public $username = null;
  public $bank_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'bank_name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'restaurant_name',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWalleWithdrawApply';
  }

  public function read($input)
  {
    return $this->_read('TCWalleWithdrawApply', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWalleWithdrawApply', self::$_TSPEC, $output);
  }
}

class TTerminalValidation extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $terminal = null;
  public $terminal_type = null;
  public $validate_code = null;
  public $is_valid = null;
  public $lives = null;
  public $created_at = null;
  public $is_success = null;
  public $succeeded_at = null;
  public $is_used = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'terminal',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'terminal_type',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'validate_code',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'lives',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'is_success',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'succeeded_at',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'is_used',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TTerminalValidation';
  }

  public function read($input)
  {
    return $this->_read('TTerminalValidation', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TTerminalValidation', self::$_TSPEC, $output);
  }
}

class TTerminalValidationQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $is_valid = null;
  public $is_success = null;
  public $is_used = null;
  public $ip = null;
  public $terminal_type = null;
  public $terminal = null;
  public $created_at = null;
  public $lives = null;
  public $offset = null;
  public $limit = null;
  public $orderby = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'is_success',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'is_used',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'terminal_type',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'terminal',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'lives',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'orderby',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TTerminalValidationQuery';
  }

  public function read($input)
  {
    return $this->_read('TTerminalValidationQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TTerminalValidationQuery', self::$_TSPEC, $output);
  }
}

class TRestaurantAdmin extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRestaurantAdmin';
  }

  public function read($input)
  {
    return $this->_read('TRestaurantAdmin', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRestaurantAdmin', self::$_TSPEC, $output);
  }
}

class TSfGuardRememberKey extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $remember_key = null;
  public $ip_address = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'remember_key',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ip_address',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TSfGuardRememberKey';
  }

  public function read($input)
  {
    return $this->_read('TSfGuardRememberKey', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TSfGuardRememberKey', self::$_TSPEC, $output);
  }
}

class TUserBankcard extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $status = null;
  public $created_at = null;
  public $city_name = null;
  public $branch_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'city_name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'branch_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserBankcard';
  }

  public function read($input)
  {
    return $this->_read('TUserBankcard', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserBankcard', self::$_TSPEC, $output);
  }
}

class TUserMetaData extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $username = null;
  public $refer_count = null;
  public $succeeded_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'refer_count',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'succeeded_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserMetaData';
  }

  public function read($input)
  {
    return $this->_read('TUserMetaData', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserMetaData', self::$_TSPEC, $output);
  }
}

class TUserMetaDataQuery extends TBase {
  static $_TSPEC;

  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserMetaDataQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserMetaDataQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserMetaDataQuery', self::$_TSPEC, $output);
  }
}

class TUserReferRank extends TBase {
  static $_TSPEC;

  public $rank = null;
  public $prize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rank',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'prize',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserReferRank';
  }

  public function read($input)
  {
    return $this->_read('TUserReferRank', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserReferRank', self::$_TSPEC, $output);
  }
}

class TWalleOnlinePaymentApplyQuery extends TBase {
  static $_TSPEC;

  public $status = null;
  public $bank_id = null;
  public $search = null;
  public $region_ids = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'search',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'region_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleOnlinePaymentApplyQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleOnlinePaymentApplyQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleOnlinePaymentApplyQuery', self::$_TSPEC, $output);
  }
}

class TCWalleOnlinePaymentApply extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $status = null;
  public $created_at = null;
  public $restaurant_id = null;
  public $restaurant_name = null;
  public $username = null;
  public $bank_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'restaurant_name',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'bank_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWalleOnlinePaymentApply';
  }

  public function read($input)
  {
    return $this->_read('TCWalleOnlinePaymentApply', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWalleOnlinePaymentApply', self::$_TSPEC, $output);
  }
}

class TCUserBankCard extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $username = null;
  public $bank_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'bank_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCUserBankCard';
  }

  public function read($input)
  {
    return $this->_read('TCUserBankCard', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCUserBankCard', self::$_TSPEC, $output);
  }
}

class TUserProfileQuery extends TBase {
  static $_TSPEC;

  public $email = null;
  public $is_email_valid = null;
  public $mobile = null;
  public $is_mobile_valid = null;
  public $referal_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'is_email_valid',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_mobile_valid',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'referal_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserProfileQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserProfileQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserProfileQuery', self::$_TSPEC, $output);
  }
}

class TCAccountDailyStats extends TBase {
  static $_TSPEC;

  public $type = null;
  public $amount = null;
  public $count = null;
  public $date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCAccountDailyStats';
  }

  public function read($input)
  {
    return $this->_read('TCAccountDailyStats', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCAccountDailyStats', self::$_TSPEC, $output);
  }
}

class TTradeRecordQuery extends TBase {
  static $_TSPEC;

  public $from_datetime = null;
  public $to_datetime = null;
  public $categories = null;
  public $statuses = null;
  public $user_id = null;
  public $offset = null;
  public $limit = null;
  public $asc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'categories',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        4 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'asc',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TTradeRecordQuery';
  }

  public function read($input)
  {
    return $this->_read('TTradeRecordQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TTradeRecordQuery', self::$_TSPEC, $output);
  }
}

class TTradeRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $type = null;
  public $trade_no = null;
  public $amount = null;
  public $status = null;
  public $remark = null;
  public $created_at = null;
  public $finished_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'trade_no',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'finished_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TTradeRecord';
  }

  public function read($input)
  {
    return $this->_read('TTradeRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TTradeRecord', self::$_TSPEC, $output);
  }
}

class TLoginStruct extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $ip = null;
  public $key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TLoginStruct';
  }

  public function read($input)
  {
    return $this->_read('TLoginStruct', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TLoginStruct', self::$_TSPEC, $output);
  }
}

class TLoginInfo extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $created_at = null;
  public $username = null;
  public $ip = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TLoginInfo';
  }

  public function read($input)
  {
    return $this->_read('TLoginInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TLoginInfo', self::$_TSPEC, $output);
  }
}

class TLoginInfoQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $from_datetime = null;
  public $to_datetime = null;
  public $ip = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TLoginInfoQuery';
  }

  public function read($input)
  {
    return $this->_read('TLoginInfoQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TLoginInfoQuery', self::$_TSPEC, $output);
  }
}

class TUserBalanceChangeQuery extends TBase {
  static $_TSPEC;

  public $user_ids = null;
  public $trade_types = null;
  public $pay_method = null;
  public $from_datetime = null;
  public $to_datetime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'trade_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'pay_method',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserBalanceChangeQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserBalanceChangeQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserBalanceChangeQuery', self::$_TSPEC, $output);
  }
}

class TCWalleBalanceChange extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $balance = null;
  public $balance_change = null;
  public $trade_no = null;
  public $trade_type = null;
  public $pay_method = null;
  public $created_at = null;
  public $alipay_trade_no = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'balance',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'balance_change',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'trade_no',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'trade_type',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'pay_method',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'alipay_trade_no',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWalleBalanceChange';
  }

  public function read($input)
  {
    return $this->_read('TCWalleBalanceChange', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWalleBalanceChange', self::$_TSPEC, $output);
  }
}

class TCWallePayStatsOverview extends TBase {
  static $_TSPEC;

  public $count = null;
  public $amount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWallePayStatsOverview';
  }

  public function read($input)
  {
    return $this->_read('TCWallePayStatsOverview', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWallePayStatsOverview', self::$_TSPEC, $output);
  }
}

class TCWallePayStatsDetail extends TBase {
  static $_TSPEC;

  public $count = null;
  public $amount = null;
  public $user_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWallePayStatsDetail';
  }

  public function read($input)
  {
    return $this->_read('TCWallePayStatsDetail', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWallePayStatsDetail', self::$_TSPEC, $output);
  }
}

class TWalleBalanceChangeQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $trade_types = null;
  public $pay_methods = null;
  public $from_datetime = null;
  public $to_datetime = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'trade_types',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        3 => array(
          'var' => 'pay_methods',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        4 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleBalanceChangeQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleBalanceChangeQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleBalanceChangeQuery', self::$_TSPEC, $output);
  }
}

class TUserPlaceQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $place_id = null;
  public $limit = null;
  public $psn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'place_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'psn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserPlaceQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserPlaceQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserPlaceQuery', self::$_TSPEC, $output);
  }
}

class TAlipayInfo extends TBase {
  static $_TSPEC;

  public $id = null;
  public $seller_account = null;
  public $callback_url = null;
  public $web_notify_url = null;
  public $app_notify_url = null;
  public $sign_url = null;
  public $verify_url = null;
  public $decrypt_url = null;
  public $v2_callback_url = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'seller_account',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'callback_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'web_notify_url',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'app_notify_url',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sign_url',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'verify_url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'decrypt_url',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'v2_callback_url',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TAlipayInfo';
  }

  public function read($input)
  {
    return $this->_read('TAlipayInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TAlipayInfo', self::$_TSPEC, $output);
  }
}

class TWithdrawProcessRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $batch_id = null;
  public $withdraw_id = null;
  public $card_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $amount = null;
  public $status = null;
  public $processed_at = null;
  public $finished_at = null;
  public $reason = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'batch_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'withdraw_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bank_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'processed_at',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'finished_at',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWithdrawProcessRecord';
  }

  public function read($input)
  {
    return $this->_read('TWithdrawProcessRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWithdrawProcessRecord', self::$_TSPEC, $output);
  }
}

class TCWithdrawProcessBatch extends TBase {
  static $_TSPEC;

  public $batch_id = null;
  public $total = null;
  public $success = null;
  public $warning_fail = null;
  public $fatal_fail = null;
  public $time = null;
  public $is_finished = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'total',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'warning_fail',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'fatal_fail',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'time',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'is_finished',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWithdrawProcessBatch';
  }

  public function read($input)
  {
    return $this->_read('TCWithdrawProcessBatch', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWithdrawProcessBatch', self::$_TSPEC, $output);
  }
}

class TUserCertification extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $certification_type = null;
  public $person_name = null;
  public $person_certification_id = null;
  public $person_certification_image_front = null;
  public $person_certification_image_back = null;
  public $corporation_name = null;
  public $business_license_id = null;
  public $business_license_location = null;
  public $business_license_expiration_date = null;
  public $business_license_image = null;
  public $address = null;
  public $phone = null;
  public $status = null;
  public $corporation_phone = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'certification_type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'person_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'person_certification_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'person_certification_image_front',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'person_certification_image_back',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'corporation_name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'business_license_id',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'business_license_location',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'business_license_expiration_date',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'business_license_image',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        16 => array(
          'var' => 'corporation_phone',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserCertification';
  }

  public function read($input)
  {
    return $this->_read('TUserCertification', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserCertification', self::$_TSPEC, $output);
  }
}

class TUserCertificationApply extends TBase {
  static $_TSPEC;

  public $certification_type = null;
  public $person_name = null;
  public $person_certification_id = null;
  public $person_certification_image_front = null;
  public $person_certification_image_back = null;
  public $corporation_name = null;
  public $business_license_id = null;
  public $business_license_location = null;
  public $business_license_expiration_date = null;
  public $business_license_image = null;
  public $address = null;
  public $phone = null;
  public $corporation_phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'certification_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'person_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'person_certification_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'person_certification_image_front',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'person_certification_image_back',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'corporation_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'business_license_id',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'business_license_location',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'business_license_expiration_date',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'business_license_image',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'corporation_phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserCertificationApply';
  }

  public function read($input)
  {
    return $this->_read('TUserCertificationApply', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserCertificationApply', self::$_TSPEC, $output);
  }
}

class TUserCertificationQuery extends TBase {
  static $_TSPEC;

  public $certification_types = null;
  public $statuses = null;
  public $from_created_at = null;
  public $to_created_at = null;
  public $offset = null;
  public $limit = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'certification_types',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'from_created_at',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'to_created_at',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserCertificationQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserCertificationQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserCertificationQuery', self::$_TSPEC, $output);
  }
}

class TCUserCertificationProcessRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $from_status = null;
  public $to_status = null;
  public $remark = null;
  public $process_user_id = null;
  public $created_at = null;
  public $description = null;
  public $username = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'from_status',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'process_user_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCUserCertificationProcessRecord';
  }

  public function read($input)
  {
    return $this->_read('TCUserCertificationProcessRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCUserCertificationProcessRecord', self::$_TSPEC, $output);
  }
}

class TUserChangeRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $admin_user_id = null;
  public $description = null;
  public $process_type = null;
  public $from_value = null;
  public $to_value = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'process_type',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'from_value',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'to_value',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserChangeRecord';
  }

  public function read($input)
  {
    return $this->_read('TUserChangeRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserChangeRecord', self::$_TSPEC, $output);
  }
}

class TUserChangeRecordQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $user_id = null;
  public $admin_user_id = null;
  public $process_type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'process_type',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserChangeRecordQuery';
  }

  public function read($input)
  {
    return $this->_read('TUserChangeRecordQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserChangeRecordQuery', self::$_TSPEC, $output);
  }
}

class TUserCustomMenu extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $name = null;
  public $category = null;
  public $rank = null;
  public $rule = null;
  public $is_valid = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'category',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'rank',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'rule',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'is_valid',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TUserCustomMenu';
  }

  public function read($input)
  {
    return $this->_read('TUserCustomMenu', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TUserCustomMenu', self::$_TSPEC, $output);
  }
}

class EUSUserException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EUSUserException';
  }

  public function read($input)
  {
    return $this->_read('EUSUserException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EUSUserException', self::$_TSPEC, $output);
  }
}

class EUSSystemException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EUSSystemException';
  }

  public function read($input)
  {
    return $this->_read('EUSSystemException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EUSSystemException', self::$_TSPEC, $output);
  }
}

class EUSUnknownException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EUSUnknownException';
  }

  public function read($input)
  {
    return $this->_read('EUSUnknownException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EUSUnknownException', self::$_TSPEC, $output);
  }
}

$GLOBALS['eus_CONSTANTS']['DEFAULT_LIST_SIZE'] = 20;

$GLOBALS['eus_CONSTANTS']['MAX_LIST_SIZE'] = 200;

$GLOBALS['eus_CONSTANTS']['ANONYMOUS_USER_ID'] = 886;

$GLOBALS['eus_CONSTANTS']['TEST_USER_IDS'] = array(
  182506,
  192927,
  3215,
);

$GLOBALS['eus_CONSTANTS']['PERMISSION_MANAGE_ALL_AREA'] = "manage_all_area";

$GLOBALS['eus_CONSTANTS']['PERMISSION_WALLE_REPLACE_ORDER'] = "walle_replace_order";

$GLOBALS['eus_CONSTANTS']['DIRECTOR_MANAGE_RESTAURANT'] = "direct_manage_restaurant";

$GLOBALS['eus_CONSTANTS']['PERMISSION_MANAGE_RESTAURANT'] = "walle_restaurant_manage";

$GLOBALS['eus_CONSTANTS']['PAY_METHOD_ALIPAY_MOBILE_APP'] = "ALIPAY_MOBILE_APP";

$GLOBALS['eus_CONSTANTS']['PAY_METHOD_ALIPAY_MOBILE_WEB'] = "ALIPAY_MOBILE_WEB";

$GLOBALS['eus_CONSTANTS']['PAY_METHOD_TENPAY_WEB'] = "TENPAY_WEB";

$GLOBALS['eus_CONSTANTS']['USER_ACCESS_TOKEN_KEY'] = "user:access_token";

$GLOBALS['eus_CONSTANTS']['ACCESS_TOKEN_USER_KEY'] = "access_token:user";

$GLOBALS['eus_CONSTANTS']['ANDROID_ELEME_DEVICE_ID_UNIQUE_VERSION'] = "2.10";


