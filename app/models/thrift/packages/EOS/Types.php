<?php
namespace EOS;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class ElemeOrderConst {
  const NOT_BOOK = 0;
  const IS_BOOK = 1;
  const STATUS_NOT_PAID = -5;
  const STATUS_PAYMENT_FAIL = -4;
  const STATUS_PAYING = -3;
  const STATUS_PENDING = -2;
  const STATUS_INVALID = -1;
  const STATUS_UNPROCESSED = 0;
  const STATUS_PROCESSING = 1;
  const STATUS_PROCESSED_AND_VALID = 2;
  const STATUS_REFUNDING = 3;
  const REFUND_STATUS_NO_REFUND = 0;
  const REFUND_STATUS_EARLY_REFUND_SUCCESS = 1;
  const REFUND_STATUS_LATER_REFUND_REQUEST = 2;
  const REFUND_STATUS_LATER_REFUND_RESPONSE = 3;
  const REFUND_STATUS_LATER_REFUND_ARBITRATING = 4;
  const REFUND_STATUS_LATER_REFUND_FAIL = 5;
  const REFUND_STATUS_LATER_REFUND_SUCCESS = 6;
  const DELIVERY_STATUS_UNPROCESSED = 0;
  const DELIVERY_STATUS_PROCESSING = 1;
  const DELIVERY_STATUS_DELIVERING = 2;
  const DELIVERY_STATUS_RECEIPT = 3;
  const DELIVERY_STATUS_PRECANCELED = 4;
  const DELIVERY_STATUS_CANCELED = 5;
  const BOOK_ORDER_REFUND_START_TIME = 1800;
  const ORDER_REFUND_START_TIME = 3600;
  const ORDER_REFUND_END_TIME = 86400;
  const CART_SOURCE_ELEME = 0;
  const CATEGORY_ELEME = 1;
  const CATEGORY_DINE = 2;
  const CATEGORY_PHONE = 3;
  const CATEGORY_NAPOS_WAIMAI = 5;
  const CATEGORY_NAPOS_TANGCHI = 6;
  const ORDER_MODE_PHONE = 1;
  const ORDER_MODE_ELEME = 2;
  const ORDER_MODE_NETWORK = 3;
  const ORDER_MODE_NAPOS_WEB = 3;
  const ORDER_MODE_WIRELESS = 4;
  const ORDER_MODE_TPD = 5;
  const ORDER_MODE_OPENAPI = 6;
  const ORDER_MODE_TPD_ELEME = 7;
  const ORDER_MODE_TPD_NAPOS = 8;
  const ORDER_MODE_NAPOS_MOBILE = 9;
  const ORDER_MODE_NAPOS_MOBILE_ANDROID = 9;
  const ORDER_MODE_NAPOS_MOBILE_IOS = 10;
  const ENTRY_OTHER = 0;
  const COME_FROM_OTHER = 0;
  const COME_FROM_PC_WEB = 1;
  const COME_FROM_MOBILE_WEB = 2;
  const COME_FROM_OPEN_API = 3;
  const COME_FROM_IPHONE_APP = 4;
  const COME_FROM_ANDROID_APP = 5;
  const COME_FROM_AT_IOS = 6;
  const COME_FROM_WEIXIN = 7;
  const COME_FROM_PLATFORM = 8;
  const PHONE_RATING_NORMAL = 0;
  const PHONE_RATING_NEW = 1;
  const PHONE_RATING_SUSPICIOUS = 2;
  const PAYMENT_TERM_ALL = -1;
  const PAYMENT_TERM_CASH = 0;
  const PAYMENT_TERM_ONLINE_PAID = 1;
  const ENTITY_CATEGORY_FOOD = 1;
  const ENTITY_CATEGORY_DELIVER_FEE = 2;
  const ENTITY_CATEGORY_COUPON = 3;
  const ENTITY_CATEGORY_HUANBAO = 4;
  const ENTITY_CATEGORY_FREE_COCA = 5;
  const ENTITY_CATEGORY_DISCOUNT8 = 6;
  const ENTITY_CATEGORY_NEW_USER_DISCOUNT = 7;
  const ENTITY_CATEGORY_COCA_GIFT = 8;
  const ENTITY_CATEGORY_DISCOUNT_88 = 9;
  const ENTITY_CATEGORY_PULPY = 10;
  const ENTITY_CATEGORY_FOOD_ACTIVITY = 11;
  const ENTITY_CATEGORY_EXTRA_DISCOUNT = 100;
  const ENTITY_CATEGORY_OLPAYMENT_DISCOUNT = 101;
  const ENTITY_ID_DELIVER_FEE = -10;
  const ENTITY_ID_EXTRA_DISCOUNT = -11;
  const ENTITY_ID_OLPAYMENT_DISCOUNT = -12;
  const ENTITY_ID_COUPON = -100;
  const ENTITY_ID_HUANBAO = -1000;
  const ENTITY_ID_FREE_COCA = -10000;
  const ENTITY_ID_DISCOUNT8 = -20000;
  const ENTITY_ID_NEW_USER_DISCOUNT = -30000;
  const ENTITY_ID_COCA_GIFT = -40000;
  const ENTITY_ID_DISCOUNT_88 = -50000;
  const ENTITY_ID_PULPY = -60000;
  const UNKNOWN_SOURCE_ID = 0;
  const INVALID_DESC_TYPE_OTHERS = 0;
  const INVALID_DESC_TYPE_FAKE_ORDER = 1;
  const INVALID_DESC_TYPE_DUPLICATE_ORDER = 2;
  const INVALID_DESC_TYPE_FAIL_CONTACT_RESTAURANT = 3;
  const INVALID_DESC_TYPE_FAIL_CONTACT_USER = 4;
  const INVALID_DESC_TYPE_FOOD_SOLDOUT = 5;
  const INVALID_DESC_TYPE_RESTAURANT_CLOSED = 6;
  const INVALID_DESC_TYPE_TOO_FAR = 7;
  const INVALID_DESC_TYPE_RST_TOO_BUSY = 8;
  const INVALID_DESC_TYPE_FORCE_REJECT_ORDER = 9;
  const INVALID_DESC_TYPE_DELIVERY_CHECK_FOOD_UNQUALIFIED = 10;
  const INVALID_DESC_TYPE_DELIVERY_FAULT = 11;
  const INVALID_DESC_TYPE_REPLACE_ORDER = 12;
  static public $__names = array(
    0 => 'NOT_BOOK',
    1 => 'IS_BOOK',
    -5 => 'STATUS_NOT_PAID',
    -4 => 'STATUS_PAYMENT_FAIL',
    -3 => 'STATUS_PAYING',
    -2 => 'STATUS_PENDING',
    -1 => 'STATUS_INVALID',
    0 => 'STATUS_UNPROCESSED',
    1 => 'STATUS_PROCESSING',
    2 => 'STATUS_PROCESSED_AND_VALID',
    3 => 'STATUS_REFUNDING',
    0 => 'REFUND_STATUS_NO_REFUND',
    1 => 'REFUND_STATUS_EARLY_REFUND_SUCCESS',
    2 => 'REFUND_STATUS_LATER_REFUND_REQUEST',
    3 => 'REFUND_STATUS_LATER_REFUND_RESPONSE',
    4 => 'REFUND_STATUS_LATER_REFUND_ARBITRATING',
    5 => 'REFUND_STATUS_LATER_REFUND_FAIL',
    6 => 'REFUND_STATUS_LATER_REFUND_SUCCESS',
    0 => 'DELIVERY_STATUS_UNPROCESSED',
    1 => 'DELIVERY_STATUS_PROCESSING',
    2 => 'DELIVERY_STATUS_DELIVERING',
    3 => 'DELIVERY_STATUS_RECEIPT',
    4 => 'DELIVERY_STATUS_PRECANCELED',
    5 => 'DELIVERY_STATUS_CANCELED',
    1800 => 'BOOK_ORDER_REFUND_START_TIME',
    3600 => 'ORDER_REFUND_START_TIME',
    86400 => 'ORDER_REFUND_END_TIME',
    0 => 'CART_SOURCE_ELEME',
    1 => 'CATEGORY_ELEME',
    2 => 'CATEGORY_DINE',
    3 => 'CATEGORY_PHONE',
    5 => 'CATEGORY_NAPOS_WAIMAI',
    6 => 'CATEGORY_NAPOS_TANGCHI',
    1 => 'ORDER_MODE_PHONE',
    2 => 'ORDER_MODE_ELEME',
    3 => 'ORDER_MODE_NETWORK',
    3 => 'ORDER_MODE_NAPOS_WEB',
    4 => 'ORDER_MODE_WIRELESS',
    5 => 'ORDER_MODE_TPD',
    6 => 'ORDER_MODE_OPENAPI',
    7 => 'ORDER_MODE_TPD_ELEME',
    8 => 'ORDER_MODE_TPD_NAPOS',
    9 => 'ORDER_MODE_NAPOS_MOBILE',
    9 => 'ORDER_MODE_NAPOS_MOBILE_ANDROID',
    10 => 'ORDER_MODE_NAPOS_MOBILE_IOS',
    0 => 'ENTRY_OTHER',
    0 => 'COME_FROM_OTHER',
    1 => 'COME_FROM_PC_WEB',
    2 => 'COME_FROM_MOBILE_WEB',
    3 => 'COME_FROM_OPEN_API',
    4 => 'COME_FROM_IPHONE_APP',
    5 => 'COME_FROM_ANDROID_APP',
    6 => 'COME_FROM_AT_IOS',
    7 => 'COME_FROM_WEIXIN',
    8 => 'COME_FROM_PLATFORM',
    0 => 'PHONE_RATING_NORMAL',
    1 => 'PHONE_RATING_NEW',
    2 => 'PHONE_RATING_SUSPICIOUS',
    -1 => 'PAYMENT_TERM_ALL',
    0 => 'PAYMENT_TERM_CASH',
    1 => 'PAYMENT_TERM_ONLINE_PAID',
    1 => 'ENTITY_CATEGORY_FOOD',
    2 => 'ENTITY_CATEGORY_DELIVER_FEE',
    3 => 'ENTITY_CATEGORY_COUPON',
    4 => 'ENTITY_CATEGORY_HUANBAO',
    5 => 'ENTITY_CATEGORY_FREE_COCA',
    6 => 'ENTITY_CATEGORY_DISCOUNT8',
    7 => 'ENTITY_CATEGORY_NEW_USER_DISCOUNT',
    8 => 'ENTITY_CATEGORY_COCA_GIFT',
    9 => 'ENTITY_CATEGORY_DISCOUNT_88',
    10 => 'ENTITY_CATEGORY_PULPY',
    11 => 'ENTITY_CATEGORY_FOOD_ACTIVITY',
    100 => 'ENTITY_CATEGORY_EXTRA_DISCOUNT',
    101 => 'ENTITY_CATEGORY_OLPAYMENT_DISCOUNT',
    -10 => 'ENTITY_ID_DELIVER_FEE',
    -11 => 'ENTITY_ID_EXTRA_DISCOUNT',
    -12 => 'ENTITY_ID_OLPAYMENT_DISCOUNT',
    -100 => 'ENTITY_ID_COUPON',
    -1000 => 'ENTITY_ID_HUANBAO',
    -10000 => 'ENTITY_ID_FREE_COCA',
    -20000 => 'ENTITY_ID_DISCOUNT8',
    -30000 => 'ENTITY_ID_NEW_USER_DISCOUNT',
    -40000 => 'ENTITY_ID_COCA_GIFT',
    -50000 => 'ENTITY_ID_DISCOUNT_88',
    -60000 => 'ENTITY_ID_PULPY',
    0 => 'UNKNOWN_SOURCE_ID',
    0 => 'INVALID_DESC_TYPE_OTHERS',
    1 => 'INVALID_DESC_TYPE_FAKE_ORDER',
    2 => 'INVALID_DESC_TYPE_DUPLICATE_ORDER',
    3 => 'INVALID_DESC_TYPE_FAIL_CONTACT_RESTAURANT',
    4 => 'INVALID_DESC_TYPE_FAIL_CONTACT_USER',
    5 => 'INVALID_DESC_TYPE_FOOD_SOLDOUT',
    6 => 'INVALID_DESC_TYPE_RESTAURANT_CLOSED',
    7 => 'INVALID_DESC_TYPE_TOO_FAR',
    8 => 'INVALID_DESC_TYPE_RST_TOO_BUSY',
    9 => 'INVALID_DESC_TYPE_FORCE_REJECT_ORDER',
    10 => 'INVALID_DESC_TYPE_DELIVERY_CHECK_FOOD_UNQUALIFIED',
    11 => 'INVALID_DESC_TYPE_DELIVERY_FAULT',
    12 => 'INVALID_DESC_TYPE_REPLACE_ORDER',
  );
}

final class ActivityStatsConst {
  const STATUS_PENDING = 1;
  const STATUS_NO_SUBSIDY = 2;
  const STATUS_PAY_RECORD_GENERATED = 3;
  const STATUS_PAY_SUCCESS = 4;
  const STATUS_PAY_FAIL = 5;
  const STATUS_INVALID = 6;
  static public $__names = array(
    1 => 'STATUS_PENDING',
    2 => 'STATUS_NO_SUBSIDY',
    3 => 'STATUS_PAY_RECORD_GENERATED',
    4 => 'STATUS_PAY_SUCCESS',
    5 => 'STATUS_PAY_FAIL',
    6 => 'STATUS_INVALID',
  );
}

final class OrderComplaintConst {
  const TYPE_NO_DELIVER = 0;
  const TYPE_NO_DISCOUNT = 1;
  const TYPE_OTHER = 2;
  static public $__names = array(
    0 => 'TYPE_NO_DELIVER',
    1 => 'TYPE_NO_DISCOUNT',
    2 => 'TYPE_OTHER',
  );
}

final class OrderRecordConst {
  const PROCESSED_BY_MACHINE = -1;
  const PROCESS_GROUP_WEB = 1;
  const PROCESS_GROUP_USER = 1;
  const PROCESS_GROUP_RESTAURANT = 2;
  const PROCESS_GROUP_ADMIN = 3;
  const PROCESS_GROUP_SYSTEM = 4;
  const PROCESS_GROUP_API_RESTAURANT = 5;
  const PROCESS_GROUP_API_DELIVERY = 6;
  const PROCESS_GROUP_THIRD_PARTY = 7;
  const PROCESS_GROUP_SMS = 8;
  const PROCESS_GROUP_WPS = 9;
  const PROCESS_GROUP_NAPOS_WEB = 11;
  const PROCESS_GROUP_NAPOS_CLIENT = 12;
  const PROCESS_GROUP_NAPOS_ANDROID = 13;
  const PROCESS_GROUP_NAPOS_IOS = 14;
  static public $__names = array(
    -1 => 'PROCESSED_BY_MACHINE',
    1 => 'PROCESS_GROUP_WEB',
    1 => 'PROCESS_GROUP_USER',
    2 => 'PROCESS_GROUP_RESTAURANT',
    3 => 'PROCESS_GROUP_ADMIN',
    4 => 'PROCESS_GROUP_SYSTEM',
    5 => 'PROCESS_GROUP_API_RESTAURANT',
    6 => 'PROCESS_GROUP_API_DELIVERY',
    7 => 'PROCESS_GROUP_THIRD_PARTY',
    8 => 'PROCESS_GROUP_SMS',
    9 => 'PROCESS_GROUP_WPS',
    11 => 'PROCESS_GROUP_NAPOS_WEB',
    12 => 'PROCESS_GROUP_NAPOS_CLIENT',
    13 => 'PROCESS_GROUP_NAPOS_ANDROID',
    14 => 'PROCESS_GROUP_NAPOS_IOS',
  );
}

final class OrderProcessRecordConst {
  const PROCESSED_BY_MACHINE = -1;
  const PROCESS_GROUP_WEB = 1;
  const PROCESS_GROUP_USER = 1;
  const PROCESS_GROUP_RESTAURANT = 2;
  const PROCESS_GROUP_ADMIN = 3;
  const PROCESS_GROUP_SYSTEM = 4;
  const PROCESS_GROUP_API_RESTAURANT = 5;
  const PROCESS_GROUP_API_DELIVERY = 6;
  const PROCESS_GROUP_THIRD_PARTY = 7;
  const PROCESS_GROUP_SMS = 8;
  const PROCESS_GROUP_WPS = 9;
  const PROCESS_GROUP_NAPOS_WEB = 11;
  const PROCESS_GROUP_NAPOS_CLIENT = 12;
  const PROCESS_GROUP_NAPOS_ANDROID = 13;
  const PROCESS_GROUP_NAPOS_IOS = 14;
  static public $__names = array(
    -1 => 'PROCESSED_BY_MACHINE',
    1 => 'PROCESS_GROUP_WEB',
    1 => 'PROCESS_GROUP_USER',
    2 => 'PROCESS_GROUP_RESTAURANT',
    3 => 'PROCESS_GROUP_ADMIN',
    4 => 'PROCESS_GROUP_SYSTEM',
    5 => 'PROCESS_GROUP_API_RESTAURANT',
    6 => 'PROCESS_GROUP_API_DELIVERY',
    7 => 'PROCESS_GROUP_THIRD_PARTY',
    8 => 'PROCESS_GROUP_SMS',
    9 => 'PROCESS_GROUP_WPS',
    11 => 'PROCESS_GROUP_NAPOS_WEB',
    12 => 'PROCESS_GROUP_NAPOS_CLIENT',
    13 => 'PROCESS_GROUP_NAPOS_ANDROID',
    14 => 'PROCESS_GROUP_NAPOS_IOS',
  );
}

final class OrderDeliveryRecordConst {
  const PROCESSED_BY_MACHINE = -1;
  const PROCESS_GROUP_WEB = 1;
  const PROCESS_GROUP_USER = 1;
  const PROCESS_GROUP_RESTAURANT = 2;
  const PROCESS_GROUP_ADMIN = 3;
  const PROCESS_GROUP_SYSTEM = 4;
  const PROCESS_GROUP_API_RESTAURANT = 5;
  const PROCESS_GROUP_API_DELIVERY = 6;
  const PROCESS_GROUP_THIRD_PARTY = 7;
  const PROCESS_GROUP_SMS = 8;
  const PROCESS_GROUP_WPS = 9;
  const PROCESS_GROUP_NAPOS_WEB = 11;
  const PROCESS_GROUP_NAPOS_CLIENT = 12;
  const PROCESS_GROUP_NAPOS_ANDROID = 13;
  const PROCESS_GROUP_NAPOS_IOS = 14;
  static public $__names = array(
    -1 => 'PROCESSED_BY_MACHINE',
    1 => 'PROCESS_GROUP_WEB',
    1 => 'PROCESS_GROUP_USER',
    2 => 'PROCESS_GROUP_RESTAURANT',
    3 => 'PROCESS_GROUP_ADMIN',
    4 => 'PROCESS_GROUP_SYSTEM',
    5 => 'PROCESS_GROUP_API_RESTAURANT',
    6 => 'PROCESS_GROUP_API_DELIVERY',
    7 => 'PROCESS_GROUP_THIRD_PARTY',
    8 => 'PROCESS_GROUP_SMS',
    9 => 'PROCESS_GROUP_WPS',
    11 => 'PROCESS_GROUP_NAPOS_WEB',
    12 => 'PROCESS_GROUP_NAPOS_CLIENT',
    13 => 'PROCESS_GROUP_NAPOS_ANDROID',
    14 => 'PROCESS_GROUP_NAPOS_IOS',
  );
}

final class OrderInvalidDescConst {
  const TYPE_OTHERS = 0;
  const TYPE_FAKE_ORDER = 1;
  const TYPE_DUPLICATE_ORDER = 2;
  const TYPE_FAIL_CONTACT_RESTAURANT = 3;
  const TYPE_FAIL_CONTACT_USER = 4;
  const TYPE_FOOD_SOLDOUT = 5;
  const TYPE_RESTAURANT_CLOSED = 6;
  const TYPE_TOO_FAR = 7;
  const TYPE_RST_TOO_BUSY = 8;
  const TYPE_FORCE_REJECT_ORDER = 9;
  const TYPE_DELIVERY_CHECK_FOOD_UNQUALIFIED = 10;
  const TYPE_DELIVERY_FAULT = 11;
  static public $__names = array(
    0 => 'TYPE_OTHERS',
    1 => 'TYPE_FAKE_ORDER',
    2 => 'TYPE_DUPLICATE_ORDER',
    3 => 'TYPE_FAIL_CONTACT_RESTAURANT',
    4 => 'TYPE_FAIL_CONTACT_USER',
    5 => 'TYPE_FOOD_SOLDOUT',
    6 => 'TYPE_RESTAURANT_CLOSED',
    7 => 'TYPE_TOO_FAR',
    8 => 'TYPE_RST_TOO_BUSY',
    9 => 'TYPE_FORCE_REJECT_ORDER',
    10 => 'TYPE_DELIVERY_CHECK_FOOD_UNQUALIFIED',
    11 => 'TYPE_DELIVERY_FAULT',
  );
}

final class OrderItemConst {
  const ENTITY_CATEGORY_FOOD_ACTIVITY = 11;
  static public $__names = array(
    11 => 'ENTITY_CATEGORY_FOOD_ACTIVITY',
  );
}

final class PromotionActivityConst {
  const TYPE_UNKNOWN = 0;
  const TYPE_NETEASE_LOTTERY = 1;
  static public $__names = array(
    0 => 'TYPE_UNKNOWN',
    1 => 'TYPE_NETEASE_LOTTERY',
  );
}

final class EOSErrorCode {
  const UNKNOWN_ERROR = 0;
  const ACTIVITY_BANNED = 1;
  const ACTIVITY_BANNED_BY_LOCATION = 2;
  const ACTIVITY_FORBIDDEN = 3;
  const CART_NOT_FOUND = 4;
  const CART_NOT_ALIVE = 5;
  const CART_IS_NOT_EMPTY = 6;
  const COUPON_ALREADY_USED = 7;
  const COUPON_BATCH_ALREADY_EXIST = 8;
  const COUPON_BATCH_NOT_FOUND = 9;
  const COUPON_CONFLICT_WITH_ACTIVITY = 10;
  const COUPON_NOT_FOUND = 11;
  const COUPON_OUT_OF_DATE = 12;
  const COUPON_ONE_ONLY = 13;
  const COUPON_NOT_BELONG_TO_THIS_CART = 14;
  const COUPON_USAGE_LIMITED = 15;
  const DESCRIPTION_CANT_METION_PHONE = 16;
  const DEVICE_ORDER_NOT_FOUND = 17;
  const DEVICE_NOT_BLOCKABLE = 18;
  const DOCK_ORDER_NOT_FOUND = 19;
  const FOOD_MISMATCH_RESTAURANT = 20;
  const FOOD_NOT_SOLD = 21;
  const FOOD_NOT_IN_GROUP = 22;
  const FOOD_INVALID_QUANTITY = 23;
  const GARNISH_NOT_IN_FOOD = 24;
  const INVALID_ADDRESS = 25;
  const INVALID_BACKUP_PHONE = 26;
  const INVALID_CART_GROUP = 27;
  const INVALID_CART_SOURCE = 28;
  const INVALID_CART_TOTAL_AMOUNT = 29;
  const INVALID_ORDER_BOOK_TIME = 30;
  const INVALID_PHONE = 31;
  const INVALID_RATING = 32;
  const FIRST_PHONE_INVALID = 33;
  const ORDER_ALREADY_RATED = 34;
  const ORDER_CANT_REFUND = 35;
  const ORDER_CANT_BE_REPLACED = 36;
  const ORDER_CANT_BE_REPLACED_NOT_THE_SAME_RESTAURANT = 37;
  const ORDER_DELIVERY_RECORD_NOT_FOUND = 38;
  const ORDER_HAS_BEEN_REPLACED = 39;
  const ORDER_HAS_BEEN_SETTLED = 40;
  const ORDER_ITEM_NOT_FOUND = 41;
  const ORDER_ITEM_RATING_NOT_FOUND = 42;
  const ORDER_MUST_PAY_ONLINE = 43;
  const ORDER_MUST_NEW_USER = 44;
  const ORDER_NOT_FOUND = 45;
  const ORDER_PROCESS_RECORD_NOT_FOUND = 46;
  const ORDER_REFUND_RECORD_NOT_FOUND = 47;
  const ORDER_REPLACE_FAILED = 48;
  const ORDER_TOTAL_AMOUNT_TOO_LESS = 49;
  const ORDER_RATE_TIME_INVALID = 50;
  const PAYMENT_CANT_SUCCESS = 51;
  const PERMISSION_DENIED = 52;
  const PHONE_VALIDATION_NOT_FOUND = 53;
  const REFUND_CANT_APPROVE = 54;
  const REFUND_CANT_ARBITRATE = 55;
  const REFUND_CANT_CANCEL = 56;
  const REFUND_CANT_REPLY = 57;
  const RESTAURANT_MUST_PAY_ONLINE = 58;
  const RESTAURANT_NOT_VALID = 59;
  const RESTAURANT_NOT_AVAILABLE_FOR_NOW = 60;
  const RESTAURANT_NOT_AVAILABLE_FOR_BOOK = 61;
  const RESTAURANT_NOT_SUPPORT_COUPON = 62;
  const RESTAURANT_NOT_SUPPORT_ONLINE_ORDER = 63;
  const RESTAURANT_NOT_SUPPORT_ONLINE_PAYMENT = 64;
  const RESTAURANT_NOT_SUPPORT_INVOICE = 65;
  const STOCK_NOT_ENOUGH = 66;
  const SOURCE_NOT_FOUND = 67;
  const SUBSIDY_PAY_RECORD_ALREADY_SUBMITTED = 68;
  const SUBSIDY_PAY_RECORD_CANT_RETRY = 69;
  const SUBSIDY_PAY_RECORD_CANT_SUBMIT = 70;
  const SUBSIDY_PAY_RECORD_NOT_FOUND = 71;
  const SUBSIDY_PROCESS_RECORD_NOT_FOUND = 72;
  const TPD_VIP_CARD_NOT_FOUND = 73;
  const TPD_VIP_CARD_INVALID = 74;
  const TPD_VIP_MOBILE_NOT_FOUND = 75;
  const TPD_VIP_MOBILE_INVALID = 76;
  const ORDER_ALREADY_DISPATCHED = 77;
  const ORDER_INVALID_DESCRIPTION_NOT_FOUND = 78;
  const ORDER_OUT_OF_LIMIT = 79;
  const UNKNOWN_RECORD_TYPE = 80;
  const USER_AUTH_FAIL = 81;
  const ONLINE_PAYMENT_TEST_CONSTRAINT = 82;
  const ORDER_IN_PENDING = 83;
  const IP_BANNED = 84;
  const ORDER_COUPON_NOT_RELEASED_YET = 85;
  const REPLACE_NOT_SUPPORT_FOR_ANONYMOUS_PAY = 86;
  const CAN_NOT_BE_REPLACED_BY_RESTAURANT = 87;
  const NO_VALID_HONGBAO = 88;
  const REPLACE_ORDER_PAY_FAILED = 89;
  const REPLACE_AMOUNT_OVERFLOW = 90;
  const MAKE_ORDER_DENIED = 91;
  const DINE_ORDER_NOT_FOUND = 92;
  const ORDER_REPLACE_RECORD_NOT_FOUND = 93;
  const CANT_PROCESS_THIS_ORDER_MODE = 94;
  const COUPON_FIELD_ERROR = 95;
  const PROMOTION_ACTIVITY_FORBIDDEN = 96;
  const PROMOTION_ACTIVITY_QUOTA_OUT = 97;
  const PROMOTION_ACTIVITY_NOT_FOUND = 98;
  const PROMOTION_ACTIVITY_PHONE_OUT_OF_LIMIT = 99;
  const PINDAN_CART_LOCKED = 100;
  const SET_PINDAN_FOR_PINDAN_CART = 101;
  const CANCEL_PINDAN_FOR_NOT_PINDAN_CART = 102;
  const ORDER_NOT_IN_PENDING = 103;
  const ORDER_CANNOT_BE_CANCELED = 104;
  const ORDER_IS_CANCELED = 105;
  const VALIDATION_ERROR = 106;
  const ORDER_IS_NOT_CANCELED = 107;
  const TRANSLATION_NOT_FOUND = 108;
  const ERS_CLIENT_ERROR = 109;
  const EUS_CLIENT_ERROR = 110;
  const WPS_CLIENT_ERROR = 111;
  const EES_CLIENT_ERROR = 112;
  const TDS_CLIENT_ERROR = 113;
  const GEOS_CLIENT_ERROR = 114;
  const DATABASE_ERROR = 115;
  const UPDATE_REGION_DAEMON_ERROR = 116;
  static public $__names = array(
    0 => 'UNKNOWN_ERROR',
    1 => 'ACTIVITY_BANNED',
    2 => 'ACTIVITY_BANNED_BY_LOCATION',
    3 => 'ACTIVITY_FORBIDDEN',
    4 => 'CART_NOT_FOUND',
    5 => 'CART_NOT_ALIVE',
    6 => 'CART_IS_NOT_EMPTY',
    7 => 'COUPON_ALREADY_USED',
    8 => 'COUPON_BATCH_ALREADY_EXIST',
    9 => 'COUPON_BATCH_NOT_FOUND',
    10 => 'COUPON_CONFLICT_WITH_ACTIVITY',
    11 => 'COUPON_NOT_FOUND',
    12 => 'COUPON_OUT_OF_DATE',
    13 => 'COUPON_ONE_ONLY',
    14 => 'COUPON_NOT_BELONG_TO_THIS_CART',
    15 => 'COUPON_USAGE_LIMITED',
    16 => 'DESCRIPTION_CANT_METION_PHONE',
    17 => 'DEVICE_ORDER_NOT_FOUND',
    18 => 'DEVICE_NOT_BLOCKABLE',
    19 => 'DOCK_ORDER_NOT_FOUND',
    20 => 'FOOD_MISMATCH_RESTAURANT',
    21 => 'FOOD_NOT_SOLD',
    22 => 'FOOD_NOT_IN_GROUP',
    23 => 'FOOD_INVALID_QUANTITY',
    24 => 'GARNISH_NOT_IN_FOOD',
    25 => 'INVALID_ADDRESS',
    26 => 'INVALID_BACKUP_PHONE',
    27 => 'INVALID_CART_GROUP',
    28 => 'INVALID_CART_SOURCE',
    29 => 'INVALID_CART_TOTAL_AMOUNT',
    30 => 'INVALID_ORDER_BOOK_TIME',
    31 => 'INVALID_PHONE',
    32 => 'INVALID_RATING',
    33 => 'FIRST_PHONE_INVALID',
    34 => 'ORDER_ALREADY_RATED',
    35 => 'ORDER_CANT_REFUND',
    36 => 'ORDER_CANT_BE_REPLACED',
    37 => 'ORDER_CANT_BE_REPLACED_NOT_THE_SAME_RESTAURANT',
    38 => 'ORDER_DELIVERY_RECORD_NOT_FOUND',
    39 => 'ORDER_HAS_BEEN_REPLACED',
    40 => 'ORDER_HAS_BEEN_SETTLED',
    41 => 'ORDER_ITEM_NOT_FOUND',
    42 => 'ORDER_ITEM_RATING_NOT_FOUND',
    43 => 'ORDER_MUST_PAY_ONLINE',
    44 => 'ORDER_MUST_NEW_USER',
    45 => 'ORDER_NOT_FOUND',
    46 => 'ORDER_PROCESS_RECORD_NOT_FOUND',
    47 => 'ORDER_REFUND_RECORD_NOT_FOUND',
    48 => 'ORDER_REPLACE_FAILED',
    49 => 'ORDER_TOTAL_AMOUNT_TOO_LESS',
    50 => 'ORDER_RATE_TIME_INVALID',
    51 => 'PAYMENT_CANT_SUCCESS',
    52 => 'PERMISSION_DENIED',
    53 => 'PHONE_VALIDATION_NOT_FOUND',
    54 => 'REFUND_CANT_APPROVE',
    55 => 'REFUND_CANT_ARBITRATE',
    56 => 'REFUND_CANT_CANCEL',
    57 => 'REFUND_CANT_REPLY',
    58 => 'RESTAURANT_MUST_PAY_ONLINE',
    59 => 'RESTAURANT_NOT_VALID',
    60 => 'RESTAURANT_NOT_AVAILABLE_FOR_NOW',
    61 => 'RESTAURANT_NOT_AVAILABLE_FOR_BOOK',
    62 => 'RESTAURANT_NOT_SUPPORT_COUPON',
    63 => 'RESTAURANT_NOT_SUPPORT_ONLINE_ORDER',
    64 => 'RESTAURANT_NOT_SUPPORT_ONLINE_PAYMENT',
    65 => 'RESTAURANT_NOT_SUPPORT_INVOICE',
    66 => 'STOCK_NOT_ENOUGH',
    67 => 'SOURCE_NOT_FOUND',
    68 => 'SUBSIDY_PAY_RECORD_ALREADY_SUBMITTED',
    69 => 'SUBSIDY_PAY_RECORD_CANT_RETRY',
    70 => 'SUBSIDY_PAY_RECORD_CANT_SUBMIT',
    71 => 'SUBSIDY_PAY_RECORD_NOT_FOUND',
    72 => 'SUBSIDY_PROCESS_RECORD_NOT_FOUND',
    73 => 'TPD_VIP_CARD_NOT_FOUND',
    74 => 'TPD_VIP_CARD_INVALID',
    75 => 'TPD_VIP_MOBILE_NOT_FOUND',
    76 => 'TPD_VIP_MOBILE_INVALID',
    77 => 'ORDER_ALREADY_DISPATCHED',
    78 => 'ORDER_INVALID_DESCRIPTION_NOT_FOUND',
    79 => 'ORDER_OUT_OF_LIMIT',
    80 => 'UNKNOWN_RECORD_TYPE',
    81 => 'USER_AUTH_FAIL',
    82 => 'ONLINE_PAYMENT_TEST_CONSTRAINT',
    83 => 'ORDER_IN_PENDING',
    84 => 'IP_BANNED',
    85 => 'ORDER_COUPON_NOT_RELEASED_YET',
    86 => 'REPLACE_NOT_SUPPORT_FOR_ANONYMOUS_PAY',
    87 => 'CAN_NOT_BE_REPLACED_BY_RESTAURANT',
    88 => 'NO_VALID_HONGBAO',
    89 => 'REPLACE_ORDER_PAY_FAILED',
    90 => 'REPLACE_AMOUNT_OVERFLOW',
    91 => 'MAKE_ORDER_DENIED',
    92 => 'DINE_ORDER_NOT_FOUND',
    93 => 'ORDER_REPLACE_RECORD_NOT_FOUND',
    94 => 'CANT_PROCESS_THIS_ORDER_MODE',
    95 => 'COUPON_FIELD_ERROR',
    96 => 'PROMOTION_ACTIVITY_FORBIDDEN',
    97 => 'PROMOTION_ACTIVITY_QUOTA_OUT',
    98 => 'PROMOTION_ACTIVITY_NOT_FOUND',
    99 => 'PROMOTION_ACTIVITY_PHONE_OUT_OF_LIMIT',
    100 => 'PINDAN_CART_LOCKED',
    101 => 'SET_PINDAN_FOR_PINDAN_CART',
    102 => 'CANCEL_PINDAN_FOR_NOT_PINDAN_CART',
    103 => 'ORDER_NOT_IN_PENDING',
    104 => 'ORDER_CANNOT_BE_CANCELED',
    105 => 'ORDER_IS_CANCELED',
    106 => 'VALIDATION_ERROR',
    107 => 'ORDER_IS_NOT_CANCELED',
    108 => 'TRANSLATION_NOT_FOUND',
    109 => 'ERS_CLIENT_ERROR',
    110 => 'EUS_CLIENT_ERROR',
    111 => 'WPS_CLIENT_ERROR',
    112 => 'EES_CLIENT_ERROR',
    113 => 'TDS_CLIENT_ERROR',
    114 => 'GEOS_CLIENT_ERROR',
    115 => 'DATABASE_ERROR',
    116 => 'UPDATE_REGION_DAEMON_ERROR',
  );
}

class TCoupon extends TBase {
  static $_TSPEC;

  public $id = null;
  public $sn = null;
  public $batch_id = null;
  public $batch_sn = null;
  public $remain = null;
  public $remarks = null;
  public $deadline = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'batch_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'remain',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'remarks',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'deadline',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCoupon';
  }

  public function read($input)
  {
    return $this->_read('TCoupon', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCoupon', self::$_TSPEC, $output);
  }
}

class TCouponQuery extends TBase {
  static $_TSPEC;

  public $coupon_sn = null;
  public $batch_sn = null;
  public $is_used = null;
  public $is_out = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coupon_sn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'is_used',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'is_out',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCouponQuery';
  }

  public function read($input)
  {
    return $this->_read('TCouponQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCouponQuery', self::$_TSPEC, $output);
  }
}

class TCouponBatch extends TBase {
  static $_TSPEC;

  public $id = null;
  public $batch_sn = null;
  public $total_num = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'total_num',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCouponBatch';
  }

  public function read($input)
  {
    return $this->_read('TCouponBatch', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCouponBatch', self::$_TSPEC, $output);
  }
}

class TDeviceOrder extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $device_id = null;
  public $type = null;
  public $eleme_device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'eleme_device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDeviceOrder';
  }

  public function read($input)
  {
    return $this->_read('TDeviceOrder', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDeviceOrder', self::$_TSPEC, $output);
  }
}

class TDeviceStruct extends TBase {
  static $_TSPEC;

  public $device_id = null;
  public $third_user_id = null;
  public $session_id = null;
  public $eleme_device_id = null;
  public $channel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'third_user_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'eleme_device_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDeviceStruct';
  }

  public function read($input)
  {
    return $this->_read('TDeviceStruct', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDeviceStruct', self::$_TSPEC, $output);
  }
}

class TDockOrder extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $corp_id = null;
  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'corp_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDockOrder';
  }

  public function read($input)
  {
    return $this->_read('TDockOrder', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDockOrder', self::$_TSPEC, $output);
  }
}

class TDockOrderQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $order_ids = null;
  public $corp_ids = null;
  public $restaurant_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'corp_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDockOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TDockOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDockOrderQuery', self::$_TSPEC, $output);
  }
}

class TOrderEvent extends TBase {
  static $_TSPEC;

  public $id = null;
  public $restaurant_id = null;
  public $order_id = null;
  public $event_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'event_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderEvent';
  }

  public function read($input)
  {
    return $this->_read('TOrderEvent', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderEvent', self::$_TSPEC, $output);
  }
}

class TDockOrderEvent extends TBase {
  static $_TSPEC;

  public $id = null;
  public $dock_corp_id = null;
  public $restaurant_id = null;
  public $order_id = null;
  public $event_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dock_corp_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'event_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TDockOrderEvent';
  }

  public function read($input)
  {
    return $this->_read('TDockOrderEvent', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TDockOrderEvent', self::$_TSPEC, $output);
  }
}

class TOrder extends TBase {
  static $_TSPEC;

  public $id = null;
  public $restaurant_id = null;
  public $restaurant_name = null;
  public $rst_owner_id = null;
  public $user_id = null;
  public $user_name = null;
  public $detail_json = null;
  public $total = null;
  public $deliver_fee = null;
  public $is_online_paid = null;
  public $settled_at = null;
  public $address = null;
  public $phone = null;
  public $restaurant_number = null;
  public $ip = null;
  public $description = null;
  public $unique_id = null;
  public $auto_memo = null;
  public $order_mode = null;
  public $status_code = null;
  public $refund_status = null;
  public $is_book = null;
  public $deliver_time = null;
  public $category_id = null;
  public $come_from = null;
  public $entry_id = null;
  public $time_spent = null;
  public $coupon_id = null;
  public $created_at = null;
  public $invoice = null;
  public $attribute_json = null;
  public $better_json = null;
  public $geohash = null;
  public $phone_rating = null;
  public $source = null;
  public $delivery_status = null;
  public $pretty_description = null;
  public $active_at = null;
  public $mobile = null;
  public $consignee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'restaurant_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'rst_owner_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'detail_json',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'total',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'deliver_fee',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'is_online_paid',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'settled_at',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'restaurant_number',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'auto_memo',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'order_mode',
          'type' => TType::I16,
          ),
        20 => array(
          'var' => 'status_code',
          'type' => TType::I16,
          ),
        21 => array(
          'var' => 'refund_status',
          'type' => TType::I16,
          ),
        22 => array(
          'var' => 'is_book',
          'type' => TType::I16,
          ),
        23 => array(
          'var' => 'deliver_time',
          'type' => TType::I64,
          ),
        24 => array(
          'var' => 'category_id',
          'type' => TType::I16,
          ),
        25 => array(
          'var' => 'come_from',
          'type' => TType::I16,
          ),
        26 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'time_spent',
          'type' => TType::I16,
          ),
        28 => array(
          'var' => 'coupon_id',
          'type' => TType::I32,
          ),
        29 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        30 => array(
          'var' => 'invoice',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'attribute_json',
          'type' => TType::STRING,
          ),
        32 => array(
          'var' => 'better_json',
          'type' => TType::STRING,
          ),
        33 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        34 => array(
          'var' => 'phone_rating',
          'type' => TType::I16,
          ),
        35 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        36 => array(
          'var' => 'delivery_status',
          'type' => TType::I16,
          ),
        37 => array(
          'var' => 'pretty_description',
          'type' => TType::STRING,
          ),
        38 => array(
          'var' => 'active_at',
          'type' => TType::I64,
          ),
        39 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        40 => array(
          'var' => 'consignee',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrder';
  }

  public function read($input)
  {
    return $this->_read('TOrder', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrder', self::$_TSPEC, $output);
  }
}

class TCartFood extends TBase {
  static $_TSPEC;

  public $id = null;
  public $quantity = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'quantity',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCartFood';
  }

  public function read($input)
  {
    return $this->_read('TCartFood', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCartFood', self::$_TSPEC, $output);
  }
}

class TOrderStruct extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $user_id = null;
  public $phones = null;
  public $address = null;
  public $come_from = null;
  public $entry_id = null;
  public $geohash = null;
  public $ip = null;
  public $deliver_time = null;
  public $description = null;
  public $invoice = null;
  public $is_online_paid = null;
  public $payment_pwd = null;
  public $source = null;
  public $session_id = null;
  public $consignee = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'phones',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'come_from',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'deliver_time',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'invoice',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'is_online_paid',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'payment_pwd',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'consignee',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderStruct';
  }

  public function read($input)
  {
    return $this->_read('TOrderStruct', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderStruct', self::$_TSPEC, $output);
  }
}

class TRestaurantOrderSearchQuery extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $keyword = null;
  public $time_start = null;
  public $time_end = null;
  public $sort = null;
  public $offset = null;
  public $size = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'time_start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'time_end',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'sort',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'size',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TRestaurantOrderSearchQuery';
  }

  public function read($input)
  {
    return $this->_read('TRestaurantOrderSearchQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TRestaurantOrderSearchQuery', self::$_TSPEC, $output);
  }
}

class TActivityStats extends TBase {
  static $_TSPEC;

  public $id = null;
  public $restaurant_id = null;
  public $activity_id = null;
  public $activity_category_id = null;
  public $date = null;
  public $quantity = null;
  public $total_subsidy = null;
  public $created_at = null;
  public $status = null;
  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'activity_category_id',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'quantity',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'total_subsidy',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TActivityStats';
  }

  public function read($input)
  {
    return $this->_read('TActivityStats', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TActivityStats', self::$_TSPEC, $output);
  }
}

class TActivityStatsQuery extends TBase {
  static $_TSPEC;

  public $city_ids = null;
  public $restaurant_ids = null;
  public $activity_id = null;
  public $activity_category_id = null;
  public $from_date = null;
  public $to_date = null;
  public $offset = null;
  public $limit = null;
  public $statuses = null;
  public $with_subsidy = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'city_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'activity_category_id',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'from_date',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'to_date',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        10 => array(
          'var' => 'with_subsidy',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TActivityStatsQuery';
  }

  public function read($input)
  {
    return $this->_read('TActivityStatsQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TActivityStatsQuery', self::$_TSPEC, $output);
  }
}

class TCActivityStatsResult extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $activity_id = null;
  public $activity_category_id = null;
  public $quantity = null;
  public $total_subsidy = null;
  public $first_date = null;
  public $last_date = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_category_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'quantity',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'total_subsidy',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'first_date',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'last_date',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCActivityStatsResult';
  }

  public function read($input)
  {
    return $this->_read('TCActivityStatsResult', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCActivityStatsResult', self::$_TSPEC, $output);
  }
}

class TSubsidyPayRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $restaurant_id = null;
  public $activity_id = null;
  public $activity_category_id = null;
  public $batch_id = null;
  public $amount = null;
  public $order_count = null;
  public $subsidy_count = null;
  public $status = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'activity_category_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'batch_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'order_count',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'subsidy_count',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TSubsidyPayRecord';
  }

  public function read($input)
  {
    return $this->_read('TSubsidyPayRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TSubsidyPayRecord', self::$_TSPEC, $output);
  }
}

class TSubsidyProcessRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $pay_record_id = null;
  public $bank_id = null;
  public $cardholder_name = null;
  public $card_id = null;
  public $amount = null;
  public $status = null;
  public $created_at = null;
  public $processed_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'bank_id',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'cardholder_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'card_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'processed_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TSubsidyProcessRecord';
  }

  public function read($input)
  {
    return $this->_read('TSubsidyProcessRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TSubsidyProcessRecord', self::$_TSPEC, $output);
  }
}

class TNaposOrder extends TBase {
  static $_TSPEC;

  public $id = null;
  public $restaurant_id = null;
  public $restaurant_name = null;
  public $detail_json = null;
  public $total = null;
  public $table = null;
  public $people = null;
  public $status_code = null;
  public $restaurant_number = null;
  public $description = null;
  public $unique_id = null;
  public $category_id = null;
  public $created_at = null;
  public $phone = null;
  public $address = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'restaurant_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'detail_json',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'total',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'table',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'people',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'status_code',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'restaurant_number',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'category_id',
          'type' => TType::I16,
          ),
        13 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        14 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TNaposOrder';
  }

  public function read($input)
  {
    return $this->_read('TNaposOrder', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TNaposOrder', self::$_TSPEC, $output);
  }
}

class TNaposOrderStruct extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $description = null;
  public $table = null;
  public $people = null;
  public $phone = null;
  public $address = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'table',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'people',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TNaposOrderStruct';
  }

  public function read($input)
  {
    return $this->_read('TNaposOrderStruct', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TNaposOrderStruct', self::$_TSPEC, $output);
  }
}

class TNaposOrderQuery extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $statuses = null;
  public $category_id = null;
  public $from_datetime = null;
  public $to_datetime = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        3 => array(
          'var' => 'category_id',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TNaposOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TNaposOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TNaposOrderQuery', self::$_TSPEC, $output);
  }
}

class TWalleUserOrderQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $unique_id = null;
  public $restaurant_id = null;
  public $min_total = null;
  public $from_datetime = null;
  public $to_datetime = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'min_total',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleUserOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleUserOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleUserOrderQuery', self::$_TSPEC, $output);
  }
}

class TCWalleUserOrder extends TBase {
  static $_TSPEC;

  public $id = null;
  public $unique_id = null;
  public $user_name = null;
  public $restaurant_name = null;
  public $content_text = null;
  public $ip = null;
  public $address = null;
  public $phone = null;
  public $description = null;
  public $status_code = null;
  public $invalid_description = null;
  public $total = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'restaurant_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'content_text',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'address',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'status_code',
          'type' => TType::I16,
          ),
        11 => array(
          'var' => 'invalid_description',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'total',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWalleUserOrder';
  }

  public function read($input)
  {
    return $this->_read('TCWalleUserOrder', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWalleUserOrder', self::$_TSPEC, $output);
  }
}

class TOrderConfirmRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $order_id = null;
  public $created_at = null;
  public $from_status = null;
  public $to_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'from_status',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderConfirmRecord';
  }

  public function read($input)
  {
    return $this->_read('TOrderConfirmRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderConfirmRecord', self::$_TSPEC, $output);
  }
}

class TCOrderRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $record_type = null;
  public $process_group = null;
  public $process_role = null;
  public $user_id = null;
  public $name = null;
  public $from_status = null;
  public $to_status = null;
  public $description = null;
  public $content = null;
  public $image_hash = null;
  public $resource_hash = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'record_type',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'process_group',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'process_role',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'from_status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'to_status',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'image_hash',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'resource_hash',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCOrderRecord';
  }

  public function read($input)
  {
    return $this->_read('TCOrderRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCOrderRecord', self::$_TSPEC, $output);
  }
}

class TOrderDeliveryRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $process_group = null;
  public $order_id = null;
  public $from_status = null;
  public $to_status = null;
  public $description = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'process_group',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'from_status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'to_status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderDeliveryRecord';
  }

  public function read($input)
  {
    return $this->_read('TOrderDeliveryRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderDeliveryRecord', self::$_TSPEC, $output);
  }
}

class TOrderProcessRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $user_id = null;
  public $process_group = null;
  public $order_id = null;
  public $created_at = null;
  public $from_status = null;
  public $to_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'process_group',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'from_status',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderProcessRecord';
  }

  public function read($input)
  {
    return $this->_read('TOrderProcessRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderProcessRecord', self::$_TSPEC, $output);
  }
}

class TOrderRefundRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $user_id = null;
  public $process_group = null;
  public $from_status = null;
  public $to_status = null;
  public $content = null;
  public $resource = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'process_group',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'from_status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'to_status',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'resource',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderRefundRecord';
  }

  public function read($input)
  {
    return $this->_read('TOrderRefundRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderRefundRecord', self::$_TSPEC, $output);
  }
}

class TOrderReplaceRecord extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $new_order_id = null;
  public $user_id = null;
  public $process_group = null;
  public $replace_type = null;
  public $remark = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'new_order_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'process_group',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'replace_type',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderReplaceRecord';
  }

  public function read($input)
  {
    return $this->_read('TOrderReplaceRecord', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderReplaceRecord', self::$_TSPEC, $output);
  }
}

class TElemeOrderRate extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $time_spent = null;
  public $service_rating = null;
  public $service_rating_text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'time_spent',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'service_rating',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'service_rating_text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TElemeOrderRate';
  }

  public function read($input)
  {
    return $this->_read('TElemeOrderRate', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TElemeOrderRate', self::$_TSPEC, $output);
  }
}

class TOrderItemRating extends TBase {
  static $_TSPEC;

  public $order_item_id = null;
  public $order_id = null;
  public $restaurant_id = null;
  public $food_id = null;
  public $user_id = null;
  public $rating = null;
  public $rating_text = null;
  public $rated_at = null;
  public $image_hash = null;
  public $username = null;
  public $avatar = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'rating',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'rating_text',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'rated_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'image_hash',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'avatar',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderItemRating';
  }

  public function read($input)
  {
    return $this->_read('TOrderItemRating', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderItemRating', self::$_TSPEC, $output);
  }
}

class TElemeOrderEnv extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $device_id = null;
  public $user_agent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_agent',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TElemeOrderEnv';
  }

  public function read($input)
  {
    return $this->_read('TElemeOrderEnv', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TElemeOrderEnv', self::$_TSPEC, $output);
  }
}

class TOrderItem extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $restaurant_id = null;
  public $restaurant_name = null;
  public $entity_category_id = null;
  public $entity_id = null;
  public $parent_entity_id = null;
  public $group_id = null;
  public $name = null;
  public $quantity = null;
  public $price = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'restaurant_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'entity_category_id',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'entity_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parent_entity_id',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'quantity',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderItem';
  }

  public function read($input)
  {
    return $this->_read('TOrderItem', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderItem', self::$_TSPEC, $output);
  }
}

class TOrderItemAttribute extends TBase {
  static $_TSPEC;

  public $order_item_id = null;
  public $order_id = null;
  public $entity_id = null;
  public $created_at = null;
  public $attribute = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'entity_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'attribute',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderItemAttribute';
  }

  public function read($input)
  {
    return $this->_read('TOrderItemAttribute', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderItemAttribute', self::$_TSPEC, $output);
  }
}

class TOrderInvalidDescription extends TBase {
  static $_TSPEC;

  public $id = null;
  public $order_id = null;
  public $remark = null;
  public $type_code = null;
  public $invalid_description = null;
  public $type_message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type_code',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'invalid_description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type_message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderInvalidDescription';
  }

  public function read($input)
  {
    return $this->_read('TOrderInvalidDescription', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderInvalidDescription', self::$_TSPEC, $output);
  }
}

class TOrderItemRatingQuery extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $restaurant_id = null;
  public $food_id = null;
  public $offset = null;
  public $limit = null;
  public $has_text = null;
  public $is_valid = null;
  public $rated_at = null;
  public $has_image = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'has_text',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'rated_at',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'has_image',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderItemRatingQuery';
  }

  public function read($input)
  {
    return $this->_read('TOrderItemRatingQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderItemRatingQuery', self::$_TSPEC, $output);
  }
}

class TWalleOrderItemRatingQuery extends TBase {
  static $_TSPEC;

  public $is_valid = null;
  public $order_id = null;
  public $user_id = null;
  public $restaurant_id = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleOrderItemRatingQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleOrderItemRatingQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleOrderItemRatingQuery', self::$_TSPEC, $output);
  }
}

class TCWalleOrderItemRating extends TBase {
  static $_TSPEC;

  public $order_item_id = null;
  public $order_id = null;
  public $restaurant_id = null;
  public $food_id = null;
  public $user_id = null;
  public $rating = null;
  public $rating_text = null;
  public $is_valid = null;
  public $rated_at = null;
  public $unique_id = null;
  public $food_name = null;
  public $username = null;
  public $restaurant_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'rating',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'rating_text',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'is_valid',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'rated_at',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'food_name',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'restaurant_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWalleOrderItemRating';
  }

  public function read($input)
  {
    return $this->_read('TCWalleOrderItemRating', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWalleOrderItemRating', self::$_TSPEC, $output);
  }
}

class TOrderQuery extends TBase {
  static $_TSPEC;

  public $from_datetime = null;
  public $to_datetime = null;
  public $statuses = null;
  public $exc_restaurant_ids = null;
  public $restaurant_id = null;
  public $user_id = null;
  public $category_id = null;
  public $entry_id = null;
  public $offset = null;
  public $limit = null;
  public $asc = null;
  public $time_spent = null;
  public $order_modes = null;
  public $refund_statuses = null;
  public $restaurant_ids = null;
  public $delivery_statuses = null;
  public $is_online_paid = null;
  public $come_froms = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        4 => array(
          'var' => 'exc_restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        5 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'category_id',
          'type' => TType::I16,
          ),
        8 => array(
          'var' => 'entry_id',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'asc',
          'type' => TType::I16,
          ),
        12 => array(
          'var' => 'time_spent',
          'type' => TType::I16,
          ),
        13 => array(
          'var' => 'order_modes',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        14 => array(
          'var' => 'refund_statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        15 => array(
          'var' => 'restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        16 => array(
          'var' => 'delivery_statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        17 => array(
          'var' => 'is_online_paid',
          'type' => TType::BOOL,
          ),
        18 => array(
          'var' => 'come_froms',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderQuery', self::$_TSPEC, $output);
  }
}

class TOrderProcessRecordQuery extends TBase {
  static $_TSPEC;

  public $from_datetime = null;
  public $to_datetime = null;
  public $order_ids = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TOrderProcessRecordQuery';
  }

  public function read($input)
  {
    return $this->_read('TOrderProcessRecordQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TOrderProcessRecordQuery', self::$_TSPEC, $output);
  }
}

class TPhoneValidation extends TBase {
  static $_TSPEC;

  public $id = null;
  public $phone = null;
  public $valid = null;
  public $invalid = null;
  public $valid_rate = null;
  public $manual_set = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'valid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'invalid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'valid_rate',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'manual_set',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPhoneValidation';
  }

  public function read($input)
  {
    return $this->_read('TPhoneValidation', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPhoneValidation', self::$_TSPEC, $output);
  }
}

class TLastOrderQuery extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $session_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TLastOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TLastOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TLastOrderQuery', self::$_TSPEC, $output);
  }
}

class TCWalleOrderCount extends TBase {
  static $_TSPEC;

  public $eleme = null;
  public $rst = null;
  public $pending = null;
  public $refund = null;
  public $openapi = null;
  public $tpd_eleme = null;
  public $tpd_napos = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'eleme',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'rst',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'pending',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'refund',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'openapi',
          'type' => TType::I16,
          ),
        6 => array(
          'var' => 'tpd_eleme',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'tpd_napos',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWalleOrderCount';
  }

  public function read($input)
  {
    return $this->_read('TCWalleOrderCount', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWalleOrderCount', self::$_TSPEC, $output);
  }
}

class TCWalleTDSOrderCount extends TBase {
  static $_TSPEC;

  public $unprocessed = null;
  public $processing = null;
  public $to_be_cancel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unprocessed',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'processing',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'to_be_cancel',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCWalleTDSOrderCount';
  }

  public function read($input)
  {
    return $this->_read('TCWalleTDSOrderCount', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCWalleTDSOrderCount', self::$_TSPEC, $output);
  }
}

class TWalleOrderQuery extends TBase {
  static $_TSPEC;

  public $dop_user_ids = null;
  public $order_ids = null;
  public $modes = null;
  public $statuses = null;
  public $refund_statuses = null;
  public $from_datetime = null;
  public $to_datetime = null;
  public $show_book = null;
  public $limit = null;
  public $delivery_statuses = null;
  public $restaurant_ids = null;
  public $exclude_restaurant_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dop_user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'modes',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        4 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        5 => array(
          'var' => 'refund_statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        6 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'show_book',
          'type' => TType::I16,
          ),
        9 => array(
          'var' => 'limit',
          'type' => TType::I16,
          ),
        10 => array(
          'var' => 'delivery_statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        11 => array(
          'var' => 'restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        12 => array(
          'var' => 'exclude_restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleOrderQuery', self::$_TSPEC, $output);
  }
}

class TWalleFilterOrderQuery extends TBase {
  static $_TSPEC;

  public $region_ids = null;
  public $order_ids = null;
  public $restaurant_id = null;
  public $user_id = null;
  public $status_codes = null;
  public $come_froms = null;
  public $category_ids = null;
  public $order_modes = null;
  public $is_online_paid = null;
  public $is_coupon = null;
  public $from_datetime = null;
  public $to_datetime = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'region_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'status_codes',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        6 => array(
          'var' => 'come_froms',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        7 => array(
          'var' => 'category_ids',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        8 => array(
          'var' => 'order_modes',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        9 => array(
          'var' => 'is_online_paid',
          'type' => TType::BOOL,
          ),
        10 => array(
          'var' => 'is_coupon',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        13 => array(
          'var' => 'offset',
          'type' => TType::I16,
          ),
        14 => array(
          'var' => 'limit',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleFilterOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleFilterOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleFilterOrderQuery', self::$_TSPEC, $output);
  }
}

class TWalleSuspiciousOrderQuery extends TBase {
  static $_TSPEC;

  public $from_datetime = null;
  public $to_datetime = null;
  public $offset = null;
  public $limit = null;
  public $statuses = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'offset',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'limit',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleSuspiciousOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleSuspiciousOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleSuspiciousOrderQuery', self::$_TSPEC, $output);
  }
}

class TWalleCouponOrderQuery extends TBase {
  static $_TSPEC;

  public $from_datetime = null;
  public $to_datetime = null;
  public $statuses = null;
  public $batch_sn = null;
  public $is_new_user = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'statuses',
          'type' => TType::LST,
          'etype' => TType::I16,
          'elem' => array(
            'type' => TType::I16,
            ),
          ),
        4 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'is_new_user',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleCouponOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleCouponOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleCouponOrderQuery', self::$_TSPEC, $output);
  }
}

class TWalleProcessOrderQuery extends TBase {
  static $_TSPEC;

  public $from_datetime = null;
  public $to_datetime = null;
  public $user_id = null;
  public $offset = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_datetime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_datetime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'offset',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'limit',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TWalleProcessOrderQuery';
  }

  public function read($input)
  {
    return $this->_read('TWalleProcessOrderQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TWalleProcessOrderQuery', self::$_TSPEC, $output);
  }
}

class TCOrderInfo extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $content_text = null;
  public $pretty_text = null;
  public $invalid_description = null;
  public $suspicious_reason = null;
  public $dop_user_id = null;
  public $is_phone_confirmed = null;
  public $suspicious_group_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content_text',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pretty_text',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'invalid_description',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'suspicious_reason',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'dop_user_id',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'is_phone_confirmed',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'suspicious_group_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCOrderInfo';
  }

  public function read($input)
  {
    return $this->_read('TCOrderInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCOrderInfo', self::$_TSPEC, $output);
  }
}

class TCDMSOrderProcessInfo extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $created_at = null;
  public $process_group = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'process_group',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDMSOrderProcessInfo';
  }

  public function read($input)
  {
    return $this->_read('TCDMSOrderProcessInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDMSOrderProcessInfo', self::$_TSPEC, $output);
  }
}

class TCDMSOrderDispatchInfo extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCDMSOrderDispatchInfo';
  }

  public function read($input)
  {
    return $this->_read('TCDMSOrderDispatchInfo', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCDMSOrderDispatchInfo', self::$_TSPEC, $output);
  }
}

class TIpBlacklist extends TBase {
  static $_TSPEC;

  public $id = null;
  public $ip = null;
  public $description = null;
  public $is_valid = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TIpBlacklist';
  }

  public function read($input)
  {
    return $this->_read('TIpBlacklist', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TIpBlacklist', self::$_TSPEC, $output);
  }
}

class TPhoneBlacklist extends TBase {
  static $_TSPEC;

  public $id = null;
  public $phone = null;
  public $description = null;
  public $is_valid = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPhoneBlacklist';
  }

  public function read($input)
  {
    return $this->_read('TPhoneBlacklist', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPhoneBlacklist', self::$_TSPEC, $output);
  }
}

class TPhoneWhitelist extends TBase {
  static $_TSPEC;

  public $id = null;
  public $phone = null;
  public $description = null;
  public $is_valid = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TPhoneWhitelist';
  }

  public function read($input)
  {
    return $this->_read('TPhoneWhitelist', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TPhoneWhitelist', self::$_TSPEC, $output);
  }
}

class TTpdVipCard extends TBase {
  static $_TSPEC;

  public $id = null;
  public $mobile = null;
  public $valid_start = null;
  public $valid_end = null;
  public $is_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'valid_start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'valid_end',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TTpdVipCard';
  }

  public function read($input)
  {
    return $this->_read('TTpdVipCard', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TTpdVipCard', self::$_TSPEC, $output);
  }
}

class TTpdVipMobile extends TBase {
  static $_TSPEC;

  public $id = null;
  public $mobile = null;
  public $valid_start = null;
  public $valid_end = null;
  public $is_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'valid_start',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'valid_end',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TTpdVipMobile';
  }

  public function read($input)
  {
    return $this->_read('TTpdVipMobile', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TTpdVipMobile', self::$_TSPEC, $output);
  }
}

class TTpdVipMobileQuery extends TBase {
  static $_TSPEC;

  public $limit = null;
  public $offset = null;
  public $mobile = null;
  public $is_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'offset',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'is_valid',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TTpdVipMobileQuery';
  }

  public function read($input)
  {
    return $this->_read('TTpdVipMobileQuery', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TTpdVipMobileQuery', self::$_TSPEC, $output);
  }
}

class TCOrderCancelResult extends TBase {
  static $_TSPEC;

  public $can_cancel = null;
  public $reason = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'can_cancel',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TCOrderCancelResult';
  }

  public function read($input)
  {
    return $this->_read('TCOrderCancelResult', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TCOrderCancelResult', self::$_TSPEC, $output);
  }
}

class EOSUserException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EOSUserException';
  }

  public function read($input)
  {
    return $this->_read('EOSUserException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EOSUserException', self::$_TSPEC, $output);
  }
}

class EOSSystemException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EOSSystemException';
  }

  public function read($input)
  {
    return $this->_read('EOSSystemException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EOSSystemException', self::$_TSPEC, $output);
  }
}

class EOSUnknownException extends TException {
  static $_TSPEC;

  public $error_code = null;
  public $error_name = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error_code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'error_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'EOSUnknownException';
  }

  public function read($input)
  {
    return $this->_read('EOSUnknownException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('EOSUnknownException', self::$_TSPEC, $output);
  }
}

$GLOBALS['eos_CONSTANTS']['DEFAULT_LIST_SIZE'] = 20;

$GLOBALS['eos_CONSTANTS']['MAX_CART_TOTAL_AMOUNT'] = 100000;

$GLOBALS['eos_CONSTANTS']['MAX_LIST_SIZE'] = 200;

$GLOBALS['eos_CONSTANTS']['ORDER_CATEGORY_ELEME'] = 1;

$GLOBALS['eos_CONSTANTS']['PROCESSED_BY_MACHINE'] = -1;

$GLOBALS['eos_CONSTANTS']['REPLACE_MAX_OVERFLOW_AMOUNT'] = 5;


