<?php
namespace EOS;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ElemeOrderServiceIf {
  public function ping();
  public function update_cache_for_replicator($name, $ids, $type_);
  public function clear_cache($api_name, $params);
  public function update_order_delivery_info($order_id, $delivery_info);
  public function get_pretty_description($order_id);
  public function make_order(\EOS\TOrderStruct $order_struct);
  public function mobile_make_order(\EOS\TOrderStruct $order_struct, \EOS\TDeviceStruct $device_struct);
  public function cancel_order_by_user($order_id, $user_id);
  public function cancel_order_by_annon($order_id, $session_id);
  public function can_user_cancel_order($order_id, $user_id);
  public function can_annon_cancel_order($order_id, $session_id);
  public function add_order_cancel_reason($order_id, $remark);
  public function save_order_env($order_id, $user_agent, $device_id);
  public function check_device_order_limit($device_id);
  public function replace_order($order_id, $cart_id, $admin_user_id, $replace_type, $remark);
  public function make_napos_order(\EOS\TNaposOrderStruct $napos_order_struct);
  public function rate_order_item($order_item_id, $user_id, $rating_value, $rating_text);
  public function rate_order_item2($order_item_id, $user_id, $rating_value, $rating_text, $image_hash);
  public function rate_order_item_text($order_item_id, $user_id, $rating_text);
  public function rate_deliver_time_spent($order_id, $user_id, $time_spent);
  public function rate_service($order_id, $user_id, $rate_value, $rating_text);
  public function get_status_translation($from_status, $to_status);
  public function get_refund_status_translation($from_status, $to_status);
  public function save_session_order($session_id, $order_id);
  public function save_dock_order($dock_order_id, \EOS\TDockOrder $save_struct);
  public function count_order(\EOS\TOrderQuery $query_struct);
  public function count_restaurant_list_order($restaurant_list);
  public function count_old_order(\EOS\TOrderQuery $query_struct);
  public function claim_order($session_id, $user_id);
  public function claim_online_paid_order($user_id);
  public function check_olpayment_discount_saturated($user_id, $phone, $cart_id);
  public function get_olpayment_discount_amount($user_id, $phone, $cart_id);
  public function generate_coupon($batch_sn, $remain, $deadline, $remarks);
  public function save_coupon($id, $sn, $batch_sn, $remain, $deadline);
  public function batch_generate_coupon($batch_sn, $remain, $deadline, $remarks, $count, $coupon_sn_length, $use_alnum);
  public function save_order_invalid_description($order_id, $type_code, $remark);
  public function remove_order_invalid_description($order_id);
  public function set_order_phone_confirmed($order_id, $is_phone_confirmed);
  public function check_new_user($user_id, $phones, $is_strict);
  public function global_check_new_user($phone);
  public function add_phone_to_whitelist($phone, $description);
  public function add_phone_to_blacklist($phone, $description);
  public function check_phones_in_blacklist($phones);
  public function check_phones_in_whitelist($phones);
  public function add_ip_to_blacklist($ip, $description);
  public function add_order_complaint($user_id, $order_id, $type, $content);
  public function check_order_complaint_existed($order_id);
  public function search_restaurant_order(\EOS\TRestaurantOrderSearchQuery $query_struct);
  public function walle_get_order_count_all($dop_user_ids);
  public function walle_get_tds_order_count_all($dop_user_ids);
  public function walle_filter_order_ids(\EOS\TWalleFilterOrderQuery $query_struct);
  public function walle_get_order_ids(\EOS\TWalleOrderQuery $query_struct);
  public function walle_get_suspicious_order_ids(\EOS\TWalleSuspiciousOrderQuery $query_struct);
  public function walle_get_coupon_order_ids(\EOS\TWalleCouponOrderQuery $query_struct);
  public function walle_get_process_order_ids(\EOS\TWalleProcessOrderQuery $query_struct);
  public function walle_batch_generate_coupon($batch_sn, $num, $deadline);
  public function walle_count_order_item_rating(\EOS\TWalleOrderItemRatingQuery $query_struct);
  public function walle_query_order_item_rating(\EOS\TWalleOrderItemRatingQuery $query_struct);
  public function walle_set_order_item_rating_valid($order_item_id, $is_valid);
  public function walle_get_recent_orders($username, $phone, $limit);
  public function walle_get_related_orders($order_sn);
  public function walle_query_user_order(\EOS\TWalleUserOrderQuery $query_struct);
  public function walle_count_user_order(\EOS\TWalleUserOrderQuery $query_struct);
  public function mobile_confirm_received($order_id, $user_id);
  public function mobile_add_device_order($order_id, $device_id, $third_user_id, $session_id, $eleme_device_id, $channel);
  public function mobile_order_check($user_id);
  public function cart_init($order_category_id);
  public function cart_init_with_come_from($order_category_id, $come_from);
  public function cart_set_source($cart_id, $source);
  public function cart_rebuy($cart_id, $order_id);
  public function cart_get($cart_id);
  public function cart_clear_phone($cart_id);
  public function cart_add_food_and_get($cart_id, $group_id, $food_id, $parent_food_id);
  public function cart_add_foods_and_get($cart_id, $group_id, $foods);
  public function cart_add_food($cart_id, $group_id, $food_id, $parent_food_id);
  public function cart_add_coupon($cart_id, $coupon_sn);
  public function cart_remove_coupon($cart_id, $coupon_id);
  public function cart_remove_food($cart_id, $group_id, $food_id, $parent_food_id);
  public function cart_remove_food_and_get($cart_id, $group_id, $food_id, $parent_food_id);
  public function cart_set_food_quantity($cart_id, $group_id, $food_id, $quantity, $parent_food_id);
  public function cart_decrease_food($cart_id, $group_id, $food_id, $parent_food_id);
  public function cart_decrease_food_and_get($cart_id, $group_id, $food_id, $parent_food_id);
  public function cart_remove_foods($cart_id, $food_ids);
  public function cart_remove_foods_and_get($cart_id, $food_ids);
  public function cart_clear_group($cart_id, $group_id);
  public function cart_clear_group_and_get($cart_id, $group_id);
  public function cart_set_phone($cart_id, $phone, $user_id);
  public function cart_set_is_online_paid($cart_id, $is_online_paid);
  public function cart_set_is_online_paid_and_get($cart_id, $is_online_paid);
  public function cart_set_pindan($cart_id, $restaurant_id);
  public function cart_cancel_pindan($cart_id);
  public function cart_add_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id);
  public function cart_decrease_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id);
  public function cart_remove_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id);
  public function cart_set_food_quantity_for_pindan($cart_id, $owner, $food_id, $quantity, $parent_food_id);
  public function cart_batch_add_food_for_pindan($cart_id, $group_json);
  public function cart_clear_group_for_pindan($cart_id, $owner);
  public function cart_lock_for_pindan($cart_id);
  public function cart_unlock_for_pindan($cart_id);
  public function cart_increase_pindan_num($cart_id);
  public function cart_decrease_pindan_num($cart_id);
  public function cart_napos_add_food($order_category_id, $food_quantity_map);
  public function admin_process_delivery($order_id, $to_delivery_status, $user_id, $remark);
  public function eleme_process_delivery($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code);
  public function napos_process_delivery($order_id, $to_delivery_status, $user_id, $remark);
  public function napos_process_delivery_new($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code);
  public function openapi_process_delivery($order_id, $to_delivery_status, $remark);
  public function force_invalid_order($order_id, $user_id, $password);
  public function eleme_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code);
  public function napos_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code);
  public function napos_set_order_invalid($order_id, $user_id, $type_code, $remark);
  public function napos_process_napos_order($order_id, $to_status, $user_id);
  public function openapi_process_order($order_id, $to_status);
  public function refund_apply($user_id, $unique_id, $content, $resource);
  public function refund_cancel($user_id, $unique_id, $password);
  public function refund_overrule_by_admin($user_id, $unique_id, $content);
  public function refund_reply($rst_user_id, $unique_id, $resource, $explanation);
  public function refund_arbitrate($user_id, $unique_id, $content);
  public function refund_approve($user_id, $unique_id, $password);
  public function refund_approve_by_admin($user_id, $unique_id, $content);
  public function refund_auto_success($order_id);
  public function refund_auto_fail($order_id);
  public function settle_up_order($order_id);
  public function settle_after_make($order_id);
  public function settle_after_invalid($order_id);
  public function walle_count_coupon(\EOS\TCouponQuery $query_struct);
  public function walle_query_coupon(\EOS\TCouponQuery $query_struct);
  public function napos_today_summary($restaurant_id, $require_full);
  public function napos_search_eleme_order($restaurant_id, $keyword);
  public function walle_get_coupon_total_amount();
  public function dms_mget_process_info($order_ids);
  public function dms_mget_dispatch_info($order_ids);
  public function redis_mcount_order($restaurant_ids);
  public function redis_count_order($restaurant_id);
  public function redis_count_order_add($restaurant_id, $order_id, $created_at);
  public function redis_count_order_rem($restaurant_id, $order_id);
  public function recharge_tpd_vip_mobile($mobile, $months, $days);
  public function set_tpd_vip_mobile_invalid($mobile);
  public function get_tpd_vip_mobile($mobile);
  public function query_expired_tpd_vip_mobile($days);
  public function query_tpd_vip_mobile(\EOS\TTpdVipMobileQuery $query_struct);
  public function count_tpd_vip_mobile(\EOS\TTpdVipMobileQuery $query_struct);
  public function back_up_mysql_task();
  public function clean_timeout_mysql_task();
  public function process_order_item_attribute($order_id);
  public function process_post_make_napos_order($order_id);
  public function process_post_pay_for_order($order_id, $pay_record_id);
  public function process_post_pay_success($order_id);
  public function process_post_pay_fail($order_id);
  public function process_claim_order($order_id, $user_id);
  public function get_source_id($name);
  public function dispatch_order_to_sev($order_id);
  public function get_source_name($id);
  public function mget_source_name($source_ids);
  public function get_source_name_id_map($names);
  public function not_paid_order_auto_fail($order_id);
  public function check_or_update_food_popularity_rating($food_id, $recent_popularity, $recent_num_ratings);
  public function generate_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price);
  public function generate_complex_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price);
  public function generate_activity_subsidy_pay_record($restaurant_id, $activity_id, $activity_category_id);
  public function generate_activity_subsidy_pay_record_new($restaurant_id);
  public function batch_generate_activity_subsidy_pay_record($restaurant_ids, $activity_id, $activity_category_id);
  public function doubt_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id);
  public function doubt_activity_subsidy_stats_new($restaurant_id);
  public function submit_subsidy_pay_record($pay_record_id);
  public function retry_subsidy_pay_record($pay_record_id);
  public function check_subsidy_pay_record($pay_record_id);
  public function add_order_event($order_id, $is_new_order);
  public function add_order_event2($order_id, $restaurant_id, $is_new_order);
  public function can_invalid_order_pass_post_make_order($order_id);
  public function is_device_blockable($order_id);
  public function block_mobile_device_by_order($order_id, $operator_user_id, $reason);
  public function process_promotion_activity($order_id);
  public function bind_tpd_vip_card($mobile, $days);
  public function unbind_tpd_vip_card($mobile);
  public function renew_tpd_vip_card($mobile, $days);
  public function send_focusmedia_coupon($phone, $is_ios, $source, $ip, $ua);
  public function get($order_id);
  public function mget($order_ids);
  public function master_get($order_id);
  public function master_get_anonymous_order($session_id, $order_id);
  public function master_get_by_unique_id($unique_id);
  public function master_get_last_order(\EOS\TLastOrderQuery $query_struct);
  public function mget_order_info($order_ids);
  public function get_by_restaurant_number($restaurant_id, $restaurant_number);
  public function get_by_unique_id($unique_id);
  public function get_old_order_by_unique_id($unique_id);
  public function unique_id_to_id($unique_id);
  public function query_order(\EOS\TOrderQuery $query_struct);
  public function get_unprocessed_order_ids($order_modes);
  public function query_rateable_orders($user_id);
  public function query_rateable_orders_new_point($user_id);
  public function query_rateable_orders_new($user_id);
  public function query_processing_orders($user_id);
  public function query_old_order(\EOS\TOrderQuery $query_struct);
  public function query_anonymous_orders($session_id, $limit);
  public function query_all_order(\EOS\TOrderQuery $query_struct);
  public function get_napos_order($order_id);
  public function master_get_napos_order($order_id);
  public function mget_napos_order($order_ids);
  public function query_napos_order(\EOS\TNaposOrderQuery $query_struct);
  public function count_napos_order(\EOS\TNaposOrderQuery $query_struct);
  public function get_process_record($order_process_record_id);
  public function get_delivery_record($order_delivery_record_id);
  public function get_refund_record($order_refund_record_id);
  public function query_all_process_time(\EOS\TOrderProcessRecordQuery $query_struct);
  public function query_process_record($order_id);
  public function query_time_spent_rate($order_ids);
  public function query_order_rate($order_ids);
  public function query_confirm_record($order_ids);
  public function query_delivery_record($order_ids, $asc);
  public function query_refund_record($order_ids, $asc);
  public function query_replace_record($order_ids, $asc);
  public function query_order_event_by_restaurant($last_event_id, $restaurant_id);
  public function query_dock_order_event_by_dock_corp($last_event_id, $dock_corp_id);
  public function query_order_record($order_id);
  public function query_order_item_rating(\EOS\TOrderItemRatingQuery $query_struct);
  public function get_order_item_rating($order_item_id);
  public function count_order_item_rating(\EOS\TOrderItemRatingQuery $query_struct);
  public function get_device_order($order_id);
  public function get_dock_order($order_id);
  public function mget_dock_order($order_ids);
  public function count_dock_order(\EOS\TDockOrderQuery $query_struct);
  public function query_dock_order(\EOS\TDockOrderQuery $query_struct);
  public function query_auto_pay_activity_stats_result(\EOS\TActivityStatsQuery $query_struct);
  public function query_transitional_activity_stats(\EOS\TActivityStatsQuery $query_struct);
  public function query_activity_stats(\EOS\TActivityStatsQuery $query_struct);
  public function query_activity_stats_no_subsidy(\EOS\TActivityStatsQuery $query_struct);
  public function mget_activity_subsidy_pay_records($ids);
  public function query_activity_subsidy_process_records_by_pay_record_ids($pay_record_ids);
  public function get_phone_validation_by_phone($phone);
  public function mget_order_item_rating_by_order_id($order_ids);
  public function mget_order_item_rating($order_item_ids);
  public function mget_order_item_by_order_id($order_ids);
  public function mget_order_item_attrs_by_order_id($order_ids);
  public function mget_order_item_attrs_by_item_id($order_item_ids);
  public function get_order_item($order_item_id);
  public function get_recently_order_item_by_user_id($user_id);
  public function get_recently_order_item_by_session_id($user_id);
  public function mget_order_item($ids);
  public function query_order_invalid_description($order_id);
  public function mget_order_invalid_description($order_ids);
  public function get_dop_user_id($order_id);
  public function get_coupon($coupon_id);
  public function mget_coupon($coupon_ids);
  public function get_coupon_by_sn($coupon_sn);
  public function mget_coupon_by_sn($coupon_sns);
  public function mget_coupon_batch($batch_ids);
  public function get_coupon_batch_by_sn($batch_sn);
  public function query_phone_blacklist($phones);
  public function query_phone_whitelist($phones);
  public function mget_cancel_description($order_ids);
  public function get_promotion_activity_content($order_id, $type_code);
  public function get_auto_cancel_order_restaurants();
  public function signal_post_process_order($order_process_record_id);
  public function signal_pending_make_order($order_id);
  public function signal_post_make_order($order_id);
  public function signal_post_replace_order($order_replace_record_id);
  public function signal_update_eleme_order($order_ids);
  public function move_dop_order($order_id);
}

class ElemeOrderServiceClient implements \EOS\ElemeOrderServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    return $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \EOS\ElemeOrderService_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function update_cache_for_replicator($name, $ids, $type_)
  {
    $this->send_update_cache_for_replicator($name, $ids, $type_);
    $this->recv_update_cache_for_replicator();
  }

  public function send_update_cache_for_replicator($name, $ids, $type_)
  {
    $args = new \EOS\ElemeOrderService_update_cache_for_replicator_args();
    $args->name = $name;
    $args->ids = $ids;
    $args->type_ = $type_;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_cache_for_replicator', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_cache_for_replicator', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_cache_for_replicator()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_update_cache_for_replicator_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_update_cache_for_replicator_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function clear_cache($api_name, $params)
  {
    $this->send_clear_cache($api_name, $params);
    $this->recv_clear_cache();
  }

  public function send_clear_cache($api_name, $params)
  {
    $args = new \EOS\ElemeOrderService_clear_cache_args();
    $args->api_name = $api_name;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clear_cache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clear_cache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clear_cache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_clear_cache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_clear_cache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function update_order_delivery_info($order_id, $delivery_info)
  {
    $this->send_update_order_delivery_info($order_id, $delivery_info);
    $this->recv_update_order_delivery_info();
  }

  public function send_update_order_delivery_info($order_id, $delivery_info)
  {
    $args = new \EOS\ElemeOrderService_update_order_delivery_info_args();
    $args->order_id = $order_id;
    $args->delivery_info = $delivery_info;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'update_order_delivery_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('update_order_delivery_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_update_order_delivery_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_update_order_delivery_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_update_order_delivery_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_pretty_description($order_id)
  {
    $this->send_get_pretty_description($order_id);
    return $this->recv_get_pretty_description();
  }

  public function send_get_pretty_description($order_id)
  {
    $args = new \EOS\ElemeOrderService_get_pretty_description_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_pretty_description', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_pretty_description', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_pretty_description()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_pretty_description_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_pretty_description_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_pretty_description failed: unknown result");
  }

  public function make_order(\EOS\TOrderStruct $order_struct)
  {
    $this->send_make_order($order_struct);
    return $this->recv_make_order();
  }

  public function send_make_order(\EOS\TOrderStruct $order_struct)
  {
    $args = new \EOS\ElemeOrderService_make_order_args();
    $args->order_struct = $order_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'make_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('make_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_make_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_make_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_make_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("make_order failed: unknown result");
  }

  public function mobile_make_order(\EOS\TOrderStruct $order_struct, \EOS\TDeviceStruct $device_struct)
  {
    $this->send_mobile_make_order($order_struct, $device_struct);
    return $this->recv_mobile_make_order();
  }

  public function send_mobile_make_order(\EOS\TOrderStruct $order_struct, \EOS\TDeviceStruct $device_struct)
  {
    $args = new \EOS\ElemeOrderService_mobile_make_order_args();
    $args->order_struct = $order_struct;
    $args->device_struct = $device_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_make_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_make_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_make_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mobile_make_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mobile_make_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mobile_make_order failed: unknown result");
  }

  public function cancel_order_by_user($order_id, $user_id)
  {
    $this->send_cancel_order_by_user($order_id, $user_id);
    $this->recv_cancel_order_by_user();
  }

  public function send_cancel_order_by_user($order_id, $user_id)
  {
    $args = new \EOS\ElemeOrderService_cancel_order_by_user_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cancel_order_by_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cancel_order_by_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cancel_order_by_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cancel_order_by_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cancel_order_by_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cancel_order_by_annon($order_id, $session_id)
  {
    $this->send_cancel_order_by_annon($order_id, $session_id);
    $this->recv_cancel_order_by_annon();
  }

  public function send_cancel_order_by_annon($order_id, $session_id)
  {
    $args = new \EOS\ElemeOrderService_cancel_order_by_annon_args();
    $args->order_id = $order_id;
    $args->session_id = $session_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cancel_order_by_annon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cancel_order_by_annon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cancel_order_by_annon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cancel_order_by_annon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cancel_order_by_annon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function can_user_cancel_order($order_id, $user_id)
  {
    $this->send_can_user_cancel_order($order_id, $user_id);
    return $this->recv_can_user_cancel_order();
  }

  public function send_can_user_cancel_order($order_id, $user_id)
  {
    $args = new \EOS\ElemeOrderService_can_user_cancel_order_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'can_user_cancel_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('can_user_cancel_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_can_user_cancel_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_can_user_cancel_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_can_user_cancel_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("can_user_cancel_order failed: unknown result");
  }

  public function can_annon_cancel_order($order_id, $session_id)
  {
    $this->send_can_annon_cancel_order($order_id, $session_id);
    return $this->recv_can_annon_cancel_order();
  }

  public function send_can_annon_cancel_order($order_id, $session_id)
  {
    $args = new \EOS\ElemeOrderService_can_annon_cancel_order_args();
    $args->order_id = $order_id;
    $args->session_id = $session_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'can_annon_cancel_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('can_annon_cancel_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_can_annon_cancel_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_can_annon_cancel_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_can_annon_cancel_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("can_annon_cancel_order failed: unknown result");
  }

  public function add_order_cancel_reason($order_id, $remark)
  {
    $this->send_add_order_cancel_reason($order_id, $remark);
    $this->recv_add_order_cancel_reason();
  }

  public function send_add_order_cancel_reason($order_id, $remark)
  {
    $args = new \EOS\ElemeOrderService_add_order_cancel_reason_args();
    $args->order_id = $order_id;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_order_cancel_reason', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_order_cancel_reason', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_order_cancel_reason()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_add_order_cancel_reason_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_add_order_cancel_reason_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function save_order_env($order_id, $user_agent, $device_id)
  {
    $this->send_save_order_env($order_id, $user_agent, $device_id);
    $this->recv_save_order_env();
  }

  public function send_save_order_env($order_id, $user_agent, $device_id)
  {
    $args = new \EOS\ElemeOrderService_save_order_env_args();
    $args->order_id = $order_id;
    $args->user_agent = $user_agent;
    $args->device_id = $device_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_order_env', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_order_env', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_order_env()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_save_order_env_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_save_order_env_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_device_order_limit($device_id)
  {
    $this->send_check_device_order_limit($device_id);
    $this->recv_check_device_order_limit();
  }

  public function send_check_device_order_limit($device_id)
  {
    $args = new \EOS\ElemeOrderService_check_device_order_limit_args();
    $args->device_id = $device_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_device_order_limit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_device_order_limit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_device_order_limit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_device_order_limit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_device_order_limit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function replace_order($order_id, $cart_id, $admin_user_id, $replace_type, $remark)
  {
    $this->send_replace_order($order_id, $cart_id, $admin_user_id, $replace_type, $remark);
    return $this->recv_replace_order();
  }

  public function send_replace_order($order_id, $cart_id, $admin_user_id, $replace_type, $remark)
  {
    $args = new \EOS\ElemeOrderService_replace_order_args();
    $args->order_id = $order_id;
    $args->cart_id = $cart_id;
    $args->admin_user_id = $admin_user_id;
    $args->replace_type = $replace_type;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'replace_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('replace_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_replace_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_replace_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_replace_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("replace_order failed: unknown result");
  }

  public function make_napos_order(\EOS\TNaposOrderStruct $napos_order_struct)
  {
    $this->send_make_napos_order($napos_order_struct);
    return $this->recv_make_napos_order();
  }

  public function send_make_napos_order(\EOS\TNaposOrderStruct $napos_order_struct)
  {
    $args = new \EOS\ElemeOrderService_make_napos_order_args();
    $args->napos_order_struct = $napos_order_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'make_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('make_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_make_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_make_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_make_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("make_napos_order failed: unknown result");
  }

  public function rate_order_item($order_item_id, $user_id, $rating_value, $rating_text)
  {
    $this->send_rate_order_item($order_item_id, $user_id, $rating_value, $rating_text);
    return $this->recv_rate_order_item();
  }

  public function send_rate_order_item($order_item_id, $user_id, $rating_value, $rating_text)
  {
    $args = new \EOS\ElemeOrderService_rate_order_item_args();
    $args->order_item_id = $order_item_id;
    $args->user_id = $user_id;
    $args->rating_value = $rating_value;
    $args->rating_text = $rating_text;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rate_order_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rate_order_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rate_order_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_rate_order_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_rate_order_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("rate_order_item failed: unknown result");
  }

  public function rate_order_item2($order_item_id, $user_id, $rating_value, $rating_text, $image_hash)
  {
    $this->send_rate_order_item2($order_item_id, $user_id, $rating_value, $rating_text, $image_hash);
    return $this->recv_rate_order_item2();
  }

  public function send_rate_order_item2($order_item_id, $user_id, $rating_value, $rating_text, $image_hash)
  {
    $args = new \EOS\ElemeOrderService_rate_order_item2_args();
    $args->order_item_id = $order_item_id;
    $args->user_id = $user_id;
    $args->rating_value = $rating_value;
    $args->rating_text = $rating_text;
    $args->image_hash = $image_hash;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rate_order_item2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rate_order_item2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rate_order_item2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_rate_order_item2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_rate_order_item2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("rate_order_item2 failed: unknown result");
  }

  public function rate_order_item_text($order_item_id, $user_id, $rating_text)
  {
    $this->send_rate_order_item_text($order_item_id, $user_id, $rating_text);
    $this->recv_rate_order_item_text();
  }

  public function send_rate_order_item_text($order_item_id, $user_id, $rating_text)
  {
    $args = new \EOS\ElemeOrderService_rate_order_item_text_args();
    $args->order_item_id = $order_item_id;
    $args->user_id = $user_id;
    $args->rating_text = $rating_text;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rate_order_item_text', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rate_order_item_text', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rate_order_item_text()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_rate_order_item_text_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_rate_order_item_text_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function rate_deliver_time_spent($order_id, $user_id, $time_spent)
  {
    $this->send_rate_deliver_time_spent($order_id, $user_id, $time_spent);
    return $this->recv_rate_deliver_time_spent();
  }

  public function send_rate_deliver_time_spent($order_id, $user_id, $time_spent)
  {
    $args = new \EOS\ElemeOrderService_rate_deliver_time_spent_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $args->time_spent = $time_spent;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rate_deliver_time_spent', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rate_deliver_time_spent', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rate_deliver_time_spent()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_rate_deliver_time_spent_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_rate_deliver_time_spent_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("rate_deliver_time_spent failed: unknown result");
  }

  public function rate_service($order_id, $user_id, $rate_value, $rating_text)
  {
    $this->send_rate_service($order_id, $user_id, $rate_value, $rating_text);
    return $this->recv_rate_service();
  }

  public function send_rate_service($order_id, $user_id, $rate_value, $rating_text)
  {
    $args = new \EOS\ElemeOrderService_rate_service_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $args->rate_value = $rate_value;
    $args->rating_text = $rating_text;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rate_service', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rate_service', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rate_service()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_rate_service_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_rate_service_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("rate_service failed: unknown result");
  }

  public function get_status_translation($from_status, $to_status)
  {
    $this->send_get_status_translation($from_status, $to_status);
    return $this->recv_get_status_translation();
  }

  public function send_get_status_translation($from_status, $to_status)
  {
    $args = new \EOS\ElemeOrderService_get_status_translation_args();
    $args->from_status = $from_status;
    $args->to_status = $to_status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_status_translation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_status_translation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_status_translation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_status_translation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_status_translation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_status_translation failed: unknown result");
  }

  public function get_refund_status_translation($from_status, $to_status)
  {
    $this->send_get_refund_status_translation($from_status, $to_status);
    return $this->recv_get_refund_status_translation();
  }

  public function send_get_refund_status_translation($from_status, $to_status)
  {
    $args = new \EOS\ElemeOrderService_get_refund_status_translation_args();
    $args->from_status = $from_status;
    $args->to_status = $to_status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_refund_status_translation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_refund_status_translation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_refund_status_translation()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_refund_status_translation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_refund_status_translation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_refund_status_translation failed: unknown result");
  }

  public function save_session_order($session_id, $order_id)
  {
    $this->send_save_session_order($session_id, $order_id);
    $this->recv_save_session_order();
  }

  public function send_save_session_order($session_id, $order_id)
  {
    $args = new \EOS\ElemeOrderService_save_session_order_args();
    $args->session_id = $session_id;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_session_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_session_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_session_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_save_session_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_save_session_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function save_dock_order($dock_order_id, \EOS\TDockOrder $save_struct)
  {
    $this->send_save_dock_order($dock_order_id, $save_struct);
    return $this->recv_save_dock_order();
  }

  public function send_save_dock_order($dock_order_id, \EOS\TDockOrder $save_struct)
  {
    $args = new \EOS\ElemeOrderService_save_dock_order_args();
    $args->dock_order_id = $dock_order_id;
    $args->save_struct = $save_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_dock_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_dock_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_dock_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_save_dock_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_save_dock_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("save_dock_order failed: unknown result");
  }

  public function count_order(\EOS\TOrderQuery $query_struct)
  {
    $this->send_count_order($query_struct);
    return $this->recv_count_order();
  }

  public function send_count_order(\EOS\TOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_count_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_count_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_count_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_order failed: unknown result");
  }

  public function count_restaurant_list_order($restaurant_list)
  {
    $this->send_count_restaurant_list_order($restaurant_list);
    return $this->recv_count_restaurant_list_order();
  }

  public function send_count_restaurant_list_order($restaurant_list)
  {
    $args = new \EOS\ElemeOrderService_count_restaurant_list_order_args();
    $args->restaurant_list = $restaurant_list;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_restaurant_list_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_restaurant_list_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_restaurant_list_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_count_restaurant_list_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_count_restaurant_list_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_restaurant_list_order failed: unknown result");
  }

  public function count_old_order(\EOS\TOrderQuery $query_struct)
  {
    $this->send_count_old_order($query_struct);
    return $this->recv_count_old_order();
  }

  public function send_count_old_order(\EOS\TOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_count_old_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_old_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_old_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_old_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_count_old_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_count_old_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_old_order failed: unknown result");
  }

  public function claim_order($session_id, $user_id)
  {
    $this->send_claim_order($session_id, $user_id);
    $this->recv_claim_order();
  }

  public function send_claim_order($session_id, $user_id)
  {
    $args = new \EOS\ElemeOrderService_claim_order_args();
    $args->session_id = $session_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'claim_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('claim_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_claim_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_claim_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_claim_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function claim_online_paid_order($user_id)
  {
    $this->send_claim_online_paid_order($user_id);
    $this->recv_claim_online_paid_order();
  }

  public function send_claim_online_paid_order($user_id)
  {
    $args = new \EOS\ElemeOrderService_claim_online_paid_order_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'claim_online_paid_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('claim_online_paid_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_claim_online_paid_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_claim_online_paid_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_claim_online_paid_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_olpayment_discount_saturated($user_id, $phone, $cart_id)
  {
    $this->send_check_olpayment_discount_saturated($user_id, $phone, $cart_id);
    return $this->recv_check_olpayment_discount_saturated();
  }

  public function send_check_olpayment_discount_saturated($user_id, $phone, $cart_id)
  {
    $args = new \EOS\ElemeOrderService_check_olpayment_discount_saturated_args();
    $args->user_id = $user_id;
    $args->phone = $phone;
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_olpayment_discount_saturated', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_olpayment_discount_saturated', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_olpayment_discount_saturated()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_olpayment_discount_saturated_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_olpayment_discount_saturated_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("check_olpayment_discount_saturated failed: unknown result");
  }

  public function get_olpayment_discount_amount($user_id, $phone, $cart_id)
  {
    $this->send_get_olpayment_discount_amount($user_id, $phone, $cart_id);
    return $this->recv_get_olpayment_discount_amount();
  }

  public function send_get_olpayment_discount_amount($user_id, $phone, $cart_id)
  {
    $args = new \EOS\ElemeOrderService_get_olpayment_discount_amount_args();
    $args->user_id = $user_id;
    $args->phone = $phone;
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_olpayment_discount_amount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_olpayment_discount_amount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_olpayment_discount_amount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_olpayment_discount_amount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_olpayment_discount_amount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_olpayment_discount_amount failed: unknown result");
  }

  public function generate_coupon($batch_sn, $remain, $deadline, $remarks)
  {
    $this->send_generate_coupon($batch_sn, $remain, $deadline, $remarks);
    return $this->recv_generate_coupon();
  }

  public function send_generate_coupon($batch_sn, $remain, $deadline, $remarks)
  {
    $args = new \EOS\ElemeOrderService_generate_coupon_args();
    $args->batch_sn = $batch_sn;
    $args->remain = $remain;
    $args->deadline = $deadline;
    $args->remarks = $remarks;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_generate_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_generate_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("generate_coupon failed: unknown result");
  }

  public function save_coupon($id, $sn, $batch_sn, $remain, $deadline)
  {
    $this->send_save_coupon($id, $sn, $batch_sn, $remain, $deadline);
    return $this->recv_save_coupon();
  }

  public function send_save_coupon($id, $sn, $batch_sn, $remain, $deadline)
  {
    $args = new \EOS\ElemeOrderService_save_coupon_args();
    $args->id = $id;
    $args->sn = $sn;
    $args->batch_sn = $batch_sn;
    $args->remain = $remain;
    $args->deadline = $deadline;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_save_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_save_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("save_coupon failed: unknown result");
  }

  public function batch_generate_coupon($batch_sn, $remain, $deadline, $remarks, $count, $coupon_sn_length, $use_alnum)
  {
    $this->send_batch_generate_coupon($batch_sn, $remain, $deadline, $remarks, $count, $coupon_sn_length, $use_alnum);
    return $this->recv_batch_generate_coupon();
  }

  public function send_batch_generate_coupon($batch_sn, $remain, $deadline, $remarks, $count, $coupon_sn_length, $use_alnum)
  {
    $args = new \EOS\ElemeOrderService_batch_generate_coupon_args();
    $args->batch_sn = $batch_sn;
    $args->remain = $remain;
    $args->deadline = $deadline;
    $args->remarks = $remarks;
    $args->count = $count;
    $args->coupon_sn_length = $coupon_sn_length;
    $args->use_alnum = $use_alnum;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_generate_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_generate_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_generate_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_batch_generate_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_batch_generate_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("batch_generate_coupon failed: unknown result");
  }

  public function save_order_invalid_description($order_id, $type_code, $remark)
  {
    $this->send_save_order_invalid_description($order_id, $type_code, $remark);
    $this->recv_save_order_invalid_description();
  }

  public function send_save_order_invalid_description($order_id, $type_code, $remark)
  {
    $args = new \EOS\ElemeOrderService_save_order_invalid_description_args();
    $args->order_id = $order_id;
    $args->type_code = $type_code;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_order_invalid_description', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_order_invalid_description', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_order_invalid_description()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_save_order_invalid_description_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_save_order_invalid_description_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function remove_order_invalid_description($order_id)
  {
    $this->send_remove_order_invalid_description($order_id);
    $this->recv_remove_order_invalid_description();
  }

  public function send_remove_order_invalid_description($order_id)
  {
    $args = new \EOS\ElemeOrderService_remove_order_invalid_description_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_order_invalid_description', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_order_invalid_description', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_order_invalid_description()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_remove_order_invalid_description_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_remove_order_invalid_description_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function set_order_phone_confirmed($order_id, $is_phone_confirmed)
  {
    $this->send_set_order_phone_confirmed($order_id, $is_phone_confirmed);
    $this->recv_set_order_phone_confirmed();
  }

  public function send_set_order_phone_confirmed($order_id, $is_phone_confirmed)
  {
    $args = new \EOS\ElemeOrderService_set_order_phone_confirmed_args();
    $args->order_id = $order_id;
    $args->is_phone_confirmed = $is_phone_confirmed;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_order_phone_confirmed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_order_phone_confirmed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_order_phone_confirmed()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_set_order_phone_confirmed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_set_order_phone_confirmed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_new_user($user_id, $phones, $is_strict)
  {
    $this->send_check_new_user($user_id, $phones, $is_strict);
    return $this->recv_check_new_user();
  }

  public function send_check_new_user($user_id, $phones, $is_strict)
  {
    $args = new \EOS\ElemeOrderService_check_new_user_args();
    $args->user_id = $user_id;
    $args->phones = $phones;
    $args->is_strict = $is_strict;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_new_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_new_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_new_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_new_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_new_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("check_new_user failed: unknown result");
  }

  public function global_check_new_user($phone)
  {
    $this->send_global_check_new_user($phone);
    return $this->recv_global_check_new_user();
  }

  public function send_global_check_new_user($phone)
  {
    $args = new \EOS\ElemeOrderService_global_check_new_user_args();
    $args->phone = $phone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'global_check_new_user', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('global_check_new_user', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_global_check_new_user()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_global_check_new_user_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_global_check_new_user_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("global_check_new_user failed: unknown result");
  }

  public function add_phone_to_whitelist($phone, $description)
  {
    $this->send_add_phone_to_whitelist($phone, $description);
    $this->recv_add_phone_to_whitelist();
  }

  public function send_add_phone_to_whitelist($phone, $description)
  {
    $args = new \EOS\ElemeOrderService_add_phone_to_whitelist_args();
    $args->phone = $phone;
    $args->description = $description;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_phone_to_whitelist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_phone_to_whitelist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_phone_to_whitelist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_add_phone_to_whitelist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_add_phone_to_whitelist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function add_phone_to_blacklist($phone, $description)
  {
    $this->send_add_phone_to_blacklist($phone, $description);
    $this->recv_add_phone_to_blacklist();
  }

  public function send_add_phone_to_blacklist($phone, $description)
  {
    $args = new \EOS\ElemeOrderService_add_phone_to_blacklist_args();
    $args->phone = $phone;
    $args->description = $description;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_phone_to_blacklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_phone_to_blacklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_phone_to_blacklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_add_phone_to_blacklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_add_phone_to_blacklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_phones_in_blacklist($phones)
  {
    $this->send_check_phones_in_blacklist($phones);
    return $this->recv_check_phones_in_blacklist();
  }

  public function send_check_phones_in_blacklist($phones)
  {
    $args = new \EOS\ElemeOrderService_check_phones_in_blacklist_args();
    $args->phones = $phones;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_phones_in_blacklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_phones_in_blacklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_phones_in_blacklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_phones_in_blacklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_phones_in_blacklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("check_phones_in_blacklist failed: unknown result");
  }

  public function check_phones_in_whitelist($phones)
  {
    $this->send_check_phones_in_whitelist($phones);
    return $this->recv_check_phones_in_whitelist();
  }

  public function send_check_phones_in_whitelist($phones)
  {
    $args = new \EOS\ElemeOrderService_check_phones_in_whitelist_args();
    $args->phones = $phones;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_phones_in_whitelist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_phones_in_whitelist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_phones_in_whitelist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_phones_in_whitelist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_phones_in_whitelist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("check_phones_in_whitelist failed: unknown result");
  }

  public function add_ip_to_blacklist($ip, $description)
  {
    $this->send_add_ip_to_blacklist($ip, $description);
    $this->recv_add_ip_to_blacklist();
  }

  public function send_add_ip_to_blacklist($ip, $description)
  {
    $args = new \EOS\ElemeOrderService_add_ip_to_blacklist_args();
    $args->ip = $ip;
    $args->description = $description;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_ip_to_blacklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_ip_to_blacklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_ip_to_blacklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_add_ip_to_blacklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_add_ip_to_blacklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function add_order_complaint($user_id, $order_id, $type, $content)
  {
    $this->send_add_order_complaint($user_id, $order_id, $type, $content);
    $this->recv_add_order_complaint();
  }

  public function send_add_order_complaint($user_id, $order_id, $type, $content)
  {
    $args = new \EOS\ElemeOrderService_add_order_complaint_args();
    $args->user_id = $user_id;
    $args->order_id = $order_id;
    $args->type = $type;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_order_complaint', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_order_complaint', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_order_complaint()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_add_order_complaint_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_add_order_complaint_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_order_complaint_existed($order_id)
  {
    $this->send_check_order_complaint_existed($order_id);
    return $this->recv_check_order_complaint_existed();
  }

  public function send_check_order_complaint_existed($order_id)
  {
    $args = new \EOS\ElemeOrderService_check_order_complaint_existed_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_order_complaint_existed', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_order_complaint_existed', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_order_complaint_existed()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_order_complaint_existed_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_order_complaint_existed_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("check_order_complaint_existed failed: unknown result");
  }

  public function search_restaurant_order(\EOS\TRestaurantOrderSearchQuery $query_struct)
  {
    $this->send_search_restaurant_order($query_struct);
    return $this->recv_search_restaurant_order();
  }

  public function send_search_restaurant_order(\EOS\TRestaurantOrderSearchQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_search_restaurant_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'search_restaurant_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('search_restaurant_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_search_restaurant_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_search_restaurant_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_search_restaurant_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("search_restaurant_order failed: unknown result");
  }

  public function walle_get_order_count_all($dop_user_ids)
  {
    $this->send_walle_get_order_count_all($dop_user_ids);
    return $this->recv_walle_get_order_count_all();
  }

  public function send_walle_get_order_count_all($dop_user_ids)
  {
    $args = new \EOS\ElemeOrderService_walle_get_order_count_all_args();
    $args->dop_user_ids = $dop_user_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_order_count_all', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_order_count_all', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_order_count_all()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_order_count_all_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_order_count_all_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_order_count_all failed: unknown result");
  }

  public function walle_get_tds_order_count_all($dop_user_ids)
  {
    $this->send_walle_get_tds_order_count_all($dop_user_ids);
    return $this->recv_walle_get_tds_order_count_all();
  }

  public function send_walle_get_tds_order_count_all($dop_user_ids)
  {
    $args = new \EOS\ElemeOrderService_walle_get_tds_order_count_all_args();
    $args->dop_user_ids = $dop_user_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_tds_order_count_all', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_tds_order_count_all', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_tds_order_count_all()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_tds_order_count_all_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_tds_order_count_all_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_tds_order_count_all failed: unknown result");
  }

  public function walle_filter_order_ids(\EOS\TWalleFilterOrderQuery $query_struct)
  {
    $this->send_walle_filter_order_ids($query_struct);
    return $this->recv_walle_filter_order_ids();
  }

  public function send_walle_filter_order_ids(\EOS\TWalleFilterOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_filter_order_ids_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_filter_order_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_filter_order_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_filter_order_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_filter_order_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_filter_order_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_filter_order_ids failed: unknown result");
  }

  public function walle_get_order_ids(\EOS\TWalleOrderQuery $query_struct)
  {
    $this->send_walle_get_order_ids($query_struct);
    return $this->recv_walle_get_order_ids();
  }

  public function send_walle_get_order_ids(\EOS\TWalleOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_get_order_ids_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_order_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_order_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_order_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_order_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_order_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_order_ids failed: unknown result");
  }

  public function walle_get_suspicious_order_ids(\EOS\TWalleSuspiciousOrderQuery $query_struct)
  {
    $this->send_walle_get_suspicious_order_ids($query_struct);
    return $this->recv_walle_get_suspicious_order_ids();
  }

  public function send_walle_get_suspicious_order_ids(\EOS\TWalleSuspiciousOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_get_suspicious_order_ids_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_suspicious_order_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_suspicious_order_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_suspicious_order_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_suspicious_order_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_suspicious_order_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_suspicious_order_ids failed: unknown result");
  }

  public function walle_get_coupon_order_ids(\EOS\TWalleCouponOrderQuery $query_struct)
  {
    $this->send_walle_get_coupon_order_ids($query_struct);
    return $this->recv_walle_get_coupon_order_ids();
  }

  public function send_walle_get_coupon_order_ids(\EOS\TWalleCouponOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_get_coupon_order_ids_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_coupon_order_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_coupon_order_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_coupon_order_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_coupon_order_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_coupon_order_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_coupon_order_ids failed: unknown result");
  }

  public function walle_get_process_order_ids(\EOS\TWalleProcessOrderQuery $query_struct)
  {
    $this->send_walle_get_process_order_ids($query_struct);
    return $this->recv_walle_get_process_order_ids();
  }

  public function send_walle_get_process_order_ids(\EOS\TWalleProcessOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_get_process_order_ids_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_process_order_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_process_order_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_process_order_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_process_order_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_process_order_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_process_order_ids failed: unknown result");
  }

  public function walle_batch_generate_coupon($batch_sn, $num, $deadline)
  {
    $this->send_walle_batch_generate_coupon($batch_sn, $num, $deadline);
    $this->recv_walle_batch_generate_coupon();
  }

  public function send_walle_batch_generate_coupon($batch_sn, $num, $deadline)
  {
    $args = new \EOS\ElemeOrderService_walle_batch_generate_coupon_args();
    $args->batch_sn = $batch_sn;
    $args->num = $num;
    $args->deadline = $deadline;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_batch_generate_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_batch_generate_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_batch_generate_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_batch_generate_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_batch_generate_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function walle_count_order_item_rating(\EOS\TWalleOrderItemRatingQuery $query_struct)
  {
    $this->send_walle_count_order_item_rating($query_struct);
    return $this->recv_walle_count_order_item_rating();
  }

  public function send_walle_count_order_item_rating(\EOS\TWalleOrderItemRatingQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_count_order_item_rating_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_order_item_rating', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_order_item_rating', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_order_item_rating()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_count_order_item_rating_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_count_order_item_rating_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_count_order_item_rating failed: unknown result");
  }

  public function walle_query_order_item_rating(\EOS\TWalleOrderItemRatingQuery $query_struct)
  {
    $this->send_walle_query_order_item_rating($query_struct);
    return $this->recv_walle_query_order_item_rating();
  }

  public function send_walle_query_order_item_rating(\EOS\TWalleOrderItemRatingQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_query_order_item_rating_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_order_item_rating', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_order_item_rating', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_order_item_rating()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_query_order_item_rating_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_query_order_item_rating_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_query_order_item_rating failed: unknown result");
  }

  public function walle_set_order_item_rating_valid($order_item_id, $is_valid)
  {
    $this->send_walle_set_order_item_rating_valid($order_item_id, $is_valid);
    $this->recv_walle_set_order_item_rating_valid();
  }

  public function send_walle_set_order_item_rating_valid($order_item_id, $is_valid)
  {
    $args = new \EOS\ElemeOrderService_walle_set_order_item_rating_valid_args();
    $args->order_item_id = $order_item_id;
    $args->is_valid = $is_valid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_set_order_item_rating_valid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_set_order_item_rating_valid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_set_order_item_rating_valid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_set_order_item_rating_valid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_set_order_item_rating_valid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function walle_get_recent_orders($username, $phone, $limit)
  {
    $this->send_walle_get_recent_orders($username, $phone, $limit);
    return $this->recv_walle_get_recent_orders();
  }

  public function send_walle_get_recent_orders($username, $phone, $limit)
  {
    $args = new \EOS\ElemeOrderService_walle_get_recent_orders_args();
    $args->username = $username;
    $args->phone = $phone;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_recent_orders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_recent_orders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_recent_orders()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_recent_orders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_recent_orders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_recent_orders failed: unknown result");
  }

  public function walle_get_related_orders($order_sn)
  {
    $this->send_walle_get_related_orders($order_sn);
    return $this->recv_walle_get_related_orders();
  }

  public function send_walle_get_related_orders($order_sn)
  {
    $args = new \EOS\ElemeOrderService_walle_get_related_orders_args();
    $args->order_sn = $order_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_related_orders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_related_orders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_related_orders()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_related_orders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_related_orders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_related_orders failed: unknown result");
  }

  public function walle_query_user_order(\EOS\TWalleUserOrderQuery $query_struct)
  {
    $this->send_walle_query_user_order($query_struct);
    return $this->recv_walle_query_user_order();
  }

  public function send_walle_query_user_order(\EOS\TWalleUserOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_query_user_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_user_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_user_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_user_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_query_user_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_query_user_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_query_user_order failed: unknown result");
  }

  public function walle_count_user_order(\EOS\TWalleUserOrderQuery $query_struct)
  {
    $this->send_walle_count_user_order($query_struct);
    return $this->recv_walle_count_user_order();
  }

  public function send_walle_count_user_order(\EOS\TWalleUserOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_count_user_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_user_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_user_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_user_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_count_user_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_count_user_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_count_user_order failed: unknown result");
  }

  public function mobile_confirm_received($order_id, $user_id)
  {
    $this->send_mobile_confirm_received($order_id, $user_id);
    $this->recv_mobile_confirm_received();
  }

  public function send_mobile_confirm_received($order_id, $user_id)
  {
    $args = new \EOS\ElemeOrderService_mobile_confirm_received_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_confirm_received', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_confirm_received', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_confirm_received()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mobile_confirm_received_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mobile_confirm_received_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function mobile_add_device_order($order_id, $device_id, $third_user_id, $session_id, $eleme_device_id, $channel)
  {
    $this->send_mobile_add_device_order($order_id, $device_id, $third_user_id, $session_id, $eleme_device_id, $channel);
    $this->recv_mobile_add_device_order();
  }

  public function send_mobile_add_device_order($order_id, $device_id, $third_user_id, $session_id, $eleme_device_id, $channel)
  {
    $args = new \EOS\ElemeOrderService_mobile_add_device_order_args();
    $args->order_id = $order_id;
    $args->device_id = $device_id;
    $args->third_user_id = $third_user_id;
    $args->session_id = $session_id;
    $args->eleme_device_id = $eleme_device_id;
    $args->channel = $channel;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_add_device_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_add_device_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_add_device_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mobile_add_device_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mobile_add_device_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function mobile_order_check($user_id)
  {
    $this->send_mobile_order_check($user_id);
    return $this->recv_mobile_order_check();
  }

  public function send_mobile_order_check($user_id)
  {
    $args = new \EOS\ElemeOrderService_mobile_order_check_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mobile_order_check', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mobile_order_check', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mobile_order_check()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mobile_order_check_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mobile_order_check_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mobile_order_check failed: unknown result");
  }

  public function cart_init($order_category_id)
  {
    $this->send_cart_init($order_category_id);
    return $this->recv_cart_init();
  }

  public function send_cart_init($order_category_id)
  {
    $args = new \EOS\ElemeOrderService_cart_init_args();
    $args->order_category_id = $order_category_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_init', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_init', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_init()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_init_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_init_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_init failed: unknown result");
  }

  public function cart_init_with_come_from($order_category_id, $come_from)
  {
    $this->send_cart_init_with_come_from($order_category_id, $come_from);
    return $this->recv_cart_init_with_come_from();
  }

  public function send_cart_init_with_come_from($order_category_id, $come_from)
  {
    $args = new \EOS\ElemeOrderService_cart_init_with_come_from_args();
    $args->order_category_id = $order_category_id;
    $args->come_from = $come_from;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_init_with_come_from', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_init_with_come_from', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_init_with_come_from()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_init_with_come_from_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_init_with_come_from_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_init_with_come_from failed: unknown result");
  }

  public function cart_set_source($cart_id, $source)
  {
    $this->send_cart_set_source($cart_id, $source);
    $this->recv_cart_set_source();
  }

  public function send_cart_set_source($cart_id, $source)
  {
    $args = new \EOS\ElemeOrderService_cart_set_source_args();
    $args->cart_id = $cart_id;
    $args->source = $source;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_set_source', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_set_source', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_set_source()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_set_source_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_set_source_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_rebuy($cart_id, $order_id)
  {
    $this->send_cart_rebuy($cart_id, $order_id);
    return $this->recv_cart_rebuy();
  }

  public function send_cart_rebuy($cart_id, $order_id)
  {
    $args = new \EOS\ElemeOrderService_cart_rebuy_args();
    $args->cart_id = $cart_id;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_rebuy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_rebuy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_rebuy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_rebuy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_rebuy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_rebuy failed: unknown result");
  }

  public function cart_get($cart_id)
  {
    $this->send_cart_get($cart_id);
    return $this->recv_cart_get();
  }

  public function send_cart_get($cart_id)
  {
    $args = new \EOS\ElemeOrderService_cart_get_args();
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_get failed: unknown result");
  }

  public function cart_clear_phone($cart_id)
  {
    $this->send_cart_clear_phone($cart_id);
    return $this->recv_cart_clear_phone();
  }

  public function send_cart_clear_phone($cart_id)
  {
    $args = new \EOS\ElemeOrderService_cart_clear_phone_args();
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_clear_phone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_clear_phone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_clear_phone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_clear_phone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_clear_phone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_clear_phone failed: unknown result");
  }

  public function cart_add_food_and_get($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $this->send_cart_add_food_and_get($cart_id, $group_id, $food_id, $parent_food_id);
    return $this->recv_cart_add_food_and_get();
  }

  public function send_cart_add_food_and_get($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_add_food_and_get_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_add_food_and_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_add_food_and_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_add_food_and_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_add_food_and_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_add_food_and_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_add_food_and_get failed: unknown result");
  }

  public function cart_add_foods_and_get($cart_id, $group_id, $foods)
  {
    $this->send_cart_add_foods_and_get($cart_id, $group_id, $foods);
    return $this->recv_cart_add_foods_and_get();
  }

  public function send_cart_add_foods_and_get($cart_id, $group_id, $foods)
  {
    $args = new \EOS\ElemeOrderService_cart_add_foods_and_get_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->foods = $foods;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_add_foods_and_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_add_foods_and_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_add_foods_and_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_add_foods_and_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_add_foods_and_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_add_foods_and_get failed: unknown result");
  }

  public function cart_add_food($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $this->send_cart_add_food($cart_id, $group_id, $food_id, $parent_food_id);
    $this->recv_cart_add_food();
  }

  public function send_cart_add_food($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_add_food_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_add_food', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_add_food', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_add_food()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_add_food_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_add_food_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_add_coupon($cart_id, $coupon_sn)
  {
    $this->send_cart_add_coupon($cart_id, $coupon_sn);
    $this->recv_cart_add_coupon();
  }

  public function send_cart_add_coupon($cart_id, $coupon_sn)
  {
    $args = new \EOS\ElemeOrderService_cart_add_coupon_args();
    $args->cart_id = $cart_id;
    $args->coupon_sn = $coupon_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_add_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_add_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_add_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_add_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_add_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_remove_coupon($cart_id, $coupon_id)
  {
    $this->send_cart_remove_coupon($cart_id, $coupon_id);
    $this->recv_cart_remove_coupon();
  }

  public function send_cart_remove_coupon($cart_id, $coupon_id)
  {
    $args = new \EOS\ElemeOrderService_cart_remove_coupon_args();
    $args->cart_id = $cart_id;
    $args->coupon_id = $coupon_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_remove_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_remove_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_remove_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_remove_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_remove_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_remove_food($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $this->send_cart_remove_food($cart_id, $group_id, $food_id, $parent_food_id);
    $this->recv_cart_remove_food();
  }

  public function send_cart_remove_food($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_remove_food_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_remove_food', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_remove_food', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_remove_food()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_remove_food_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_remove_food_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_remove_food_and_get($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $this->send_cart_remove_food_and_get($cart_id, $group_id, $food_id, $parent_food_id);
    return $this->recv_cart_remove_food_and_get();
  }

  public function send_cart_remove_food_and_get($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_remove_food_and_get_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_remove_food_and_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_remove_food_and_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_remove_food_and_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_remove_food_and_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_remove_food_and_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_remove_food_and_get failed: unknown result");
  }

  public function cart_set_food_quantity($cart_id, $group_id, $food_id, $quantity, $parent_food_id)
  {
    $this->send_cart_set_food_quantity($cart_id, $group_id, $food_id, $quantity, $parent_food_id);
    $this->recv_cart_set_food_quantity();
  }

  public function send_cart_set_food_quantity($cart_id, $group_id, $food_id, $quantity, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_set_food_quantity_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->food_id = $food_id;
    $args->quantity = $quantity;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_set_food_quantity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_set_food_quantity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_set_food_quantity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_set_food_quantity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_set_food_quantity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_decrease_food($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $this->send_cart_decrease_food($cart_id, $group_id, $food_id, $parent_food_id);
    $this->recv_cart_decrease_food();
  }

  public function send_cart_decrease_food($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_decrease_food_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_decrease_food', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_decrease_food', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_decrease_food()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_decrease_food_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_decrease_food_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_decrease_food_and_get($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $this->send_cart_decrease_food_and_get($cart_id, $group_id, $food_id, $parent_food_id);
    return $this->recv_cart_decrease_food_and_get();
  }

  public function send_cart_decrease_food_and_get($cart_id, $group_id, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_decrease_food_and_get_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_decrease_food_and_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_decrease_food_and_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_decrease_food_and_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_decrease_food_and_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_decrease_food_and_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_decrease_food_and_get failed: unknown result");
  }

  public function cart_remove_foods($cart_id, $food_ids)
  {
    $this->send_cart_remove_foods($cart_id, $food_ids);
    $this->recv_cart_remove_foods();
  }

  public function send_cart_remove_foods($cart_id, $food_ids)
  {
    $args = new \EOS\ElemeOrderService_cart_remove_foods_args();
    $args->cart_id = $cart_id;
    $args->food_ids = $food_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_remove_foods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_remove_foods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_remove_foods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_remove_foods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_remove_foods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_remove_foods_and_get($cart_id, $food_ids)
  {
    $this->send_cart_remove_foods_and_get($cart_id, $food_ids);
    return $this->recv_cart_remove_foods_and_get();
  }

  public function send_cart_remove_foods_and_get($cart_id, $food_ids)
  {
    $args = new \EOS\ElemeOrderService_cart_remove_foods_and_get_args();
    $args->cart_id = $cart_id;
    $args->food_ids = $food_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_remove_foods_and_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_remove_foods_and_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_remove_foods_and_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_remove_foods_and_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_remove_foods_and_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_remove_foods_and_get failed: unknown result");
  }

  public function cart_clear_group($cart_id, $group_id)
  {
    $this->send_cart_clear_group($cart_id, $group_id);
    $this->recv_cart_clear_group();
  }

  public function send_cart_clear_group($cart_id, $group_id)
  {
    $args = new \EOS\ElemeOrderService_cart_clear_group_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_clear_group', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_clear_group', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_clear_group()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_clear_group_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_clear_group_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_clear_group_and_get($cart_id, $group_id)
  {
    $this->send_cart_clear_group_and_get($cart_id, $group_id);
    return $this->recv_cart_clear_group_and_get();
  }

  public function send_cart_clear_group_and_get($cart_id, $group_id)
  {
    $args = new \EOS\ElemeOrderService_cart_clear_group_and_get_args();
    $args->cart_id = $cart_id;
    $args->group_id = $group_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_clear_group_and_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_clear_group_and_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_clear_group_and_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_clear_group_and_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_clear_group_and_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_clear_group_and_get failed: unknown result");
  }

  public function cart_set_phone($cart_id, $phone, $user_id)
  {
    $this->send_cart_set_phone($cart_id, $phone, $user_id);
    $this->recv_cart_set_phone();
  }

  public function send_cart_set_phone($cart_id, $phone, $user_id)
  {
    $args = new \EOS\ElemeOrderService_cart_set_phone_args();
    $args->cart_id = $cart_id;
    $args->phone = $phone;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_set_phone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_set_phone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_set_phone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_set_phone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_set_phone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_set_is_online_paid($cart_id, $is_online_paid)
  {
    $this->send_cart_set_is_online_paid($cart_id, $is_online_paid);
    $this->recv_cart_set_is_online_paid();
  }

  public function send_cart_set_is_online_paid($cart_id, $is_online_paid)
  {
    $args = new \EOS\ElemeOrderService_cart_set_is_online_paid_args();
    $args->cart_id = $cart_id;
    $args->is_online_paid = $is_online_paid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_set_is_online_paid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_set_is_online_paid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_set_is_online_paid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_set_is_online_paid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_set_is_online_paid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_set_is_online_paid_and_get($cart_id, $is_online_paid)
  {
    $this->send_cart_set_is_online_paid_and_get($cart_id, $is_online_paid);
    return $this->recv_cart_set_is_online_paid_and_get();
  }

  public function send_cart_set_is_online_paid_and_get($cart_id, $is_online_paid)
  {
    $args = new \EOS\ElemeOrderService_cart_set_is_online_paid_and_get_args();
    $args->cart_id = $cart_id;
    $args->is_online_paid = $is_online_paid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_set_is_online_paid_and_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_set_is_online_paid_and_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_set_is_online_paid_and_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_set_is_online_paid_and_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_set_is_online_paid_and_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_set_is_online_paid_and_get failed: unknown result");
  }

  public function cart_set_pindan($cart_id, $restaurant_id)
  {
    $this->send_cart_set_pindan($cart_id, $restaurant_id);
    $this->recv_cart_set_pindan();
  }

  public function send_cart_set_pindan($cart_id, $restaurant_id)
  {
    $args = new \EOS\ElemeOrderService_cart_set_pindan_args();
    $args->cart_id = $cart_id;
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_set_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_set_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_set_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_set_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_set_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_cancel_pindan($cart_id)
  {
    $this->send_cart_cancel_pindan($cart_id);
    return $this->recv_cart_cancel_pindan();
  }

  public function send_cart_cancel_pindan($cart_id)
  {
    $args = new \EOS\ElemeOrderService_cart_cancel_pindan_args();
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_cancel_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_cancel_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_cancel_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_cancel_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_cancel_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_cancel_pindan failed: unknown result");
  }

  public function cart_add_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id)
  {
    $this->send_cart_add_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id);
    $this->recv_cart_add_food_for_pindan();
  }

  public function send_cart_add_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_add_food_for_pindan_args();
    $args->cart_id = $cart_id;
    $args->owner = $owner;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_add_food_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_add_food_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_add_food_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_add_food_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_add_food_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_decrease_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id)
  {
    $this->send_cart_decrease_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id);
    $this->recv_cart_decrease_food_for_pindan();
  }

  public function send_cart_decrease_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_decrease_food_for_pindan_args();
    $args->cart_id = $cart_id;
    $args->owner = $owner;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_decrease_food_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_decrease_food_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_decrease_food_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_decrease_food_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_decrease_food_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_remove_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id)
  {
    $this->send_cart_remove_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id);
    $this->recv_cart_remove_food_for_pindan();
  }

  public function send_cart_remove_food_for_pindan($cart_id, $owner, $food_id, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_remove_food_for_pindan_args();
    $args->cart_id = $cart_id;
    $args->owner = $owner;
    $args->food_id = $food_id;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_remove_food_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_remove_food_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_remove_food_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_remove_food_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_remove_food_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_set_food_quantity_for_pindan($cart_id, $owner, $food_id, $quantity, $parent_food_id)
  {
    $this->send_cart_set_food_quantity_for_pindan($cart_id, $owner, $food_id, $quantity, $parent_food_id);
    $this->recv_cart_set_food_quantity_for_pindan();
  }

  public function send_cart_set_food_quantity_for_pindan($cart_id, $owner, $food_id, $quantity, $parent_food_id)
  {
    $args = new \EOS\ElemeOrderService_cart_set_food_quantity_for_pindan_args();
    $args->cart_id = $cart_id;
    $args->owner = $owner;
    $args->food_id = $food_id;
    $args->quantity = $quantity;
    $args->parent_food_id = $parent_food_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_set_food_quantity_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_set_food_quantity_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_set_food_quantity_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_set_food_quantity_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_set_food_quantity_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_batch_add_food_for_pindan($cart_id, $group_json)
  {
    $this->send_cart_batch_add_food_for_pindan($cart_id, $group_json);
    $this->recv_cart_batch_add_food_for_pindan();
  }

  public function send_cart_batch_add_food_for_pindan($cart_id, $group_json)
  {
    $args = new \EOS\ElemeOrderService_cart_batch_add_food_for_pindan_args();
    $args->cart_id = $cart_id;
    $args->group_json = $group_json;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_batch_add_food_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_batch_add_food_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_batch_add_food_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_batch_add_food_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_batch_add_food_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_clear_group_for_pindan($cart_id, $owner)
  {
    $this->send_cart_clear_group_for_pindan($cart_id, $owner);
    $this->recv_cart_clear_group_for_pindan();
  }

  public function send_cart_clear_group_for_pindan($cart_id, $owner)
  {
    $args = new \EOS\ElemeOrderService_cart_clear_group_for_pindan_args();
    $args->cart_id = $cart_id;
    $args->owner = $owner;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_clear_group_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_clear_group_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_clear_group_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_clear_group_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_clear_group_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_lock_for_pindan($cart_id)
  {
    $this->send_cart_lock_for_pindan($cart_id);
    $this->recv_cart_lock_for_pindan();
  }

  public function send_cart_lock_for_pindan($cart_id)
  {
    $args = new \EOS\ElemeOrderService_cart_lock_for_pindan_args();
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_lock_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_lock_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_lock_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_lock_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_lock_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_unlock_for_pindan($cart_id)
  {
    $this->send_cart_unlock_for_pindan($cart_id);
    $this->recv_cart_unlock_for_pindan();
  }

  public function send_cart_unlock_for_pindan($cart_id)
  {
    $args = new \EOS\ElemeOrderService_cart_unlock_for_pindan_args();
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_unlock_for_pindan', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_unlock_for_pindan', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_unlock_for_pindan()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_unlock_for_pindan_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_unlock_for_pindan_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_increase_pindan_num($cart_id)
  {
    $this->send_cart_increase_pindan_num($cart_id);
    $this->recv_cart_increase_pindan_num();
  }

  public function send_cart_increase_pindan_num($cart_id)
  {
    $args = new \EOS\ElemeOrderService_cart_increase_pindan_num_args();
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_increase_pindan_num', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_increase_pindan_num', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_increase_pindan_num()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_increase_pindan_num_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_increase_pindan_num_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_decrease_pindan_num($cart_id)
  {
    $this->send_cart_decrease_pindan_num($cart_id);
    $this->recv_cart_decrease_pindan_num();
  }

  public function send_cart_decrease_pindan_num($cart_id)
  {
    $args = new \EOS\ElemeOrderService_cart_decrease_pindan_num_args();
    $args->cart_id = $cart_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_decrease_pindan_num', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_decrease_pindan_num', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_decrease_pindan_num()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_decrease_pindan_num_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_decrease_pindan_num_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function cart_napos_add_food($order_category_id, $food_quantity_map)
  {
    $this->send_cart_napos_add_food($order_category_id, $food_quantity_map);
    return $this->recv_cart_napos_add_food();
  }

  public function send_cart_napos_add_food($order_category_id, $food_quantity_map)
  {
    $args = new \EOS\ElemeOrderService_cart_napos_add_food_args();
    $args->order_category_id = $order_category_id;
    $args->food_quantity_map = $food_quantity_map;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cart_napos_add_food', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cart_napos_add_food', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cart_napos_add_food()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_cart_napos_add_food_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_cart_napos_add_food_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("cart_napos_add_food failed: unknown result");
  }

  public function admin_process_delivery($order_id, $to_delivery_status, $user_id, $remark)
  {
    $this->send_admin_process_delivery($order_id, $to_delivery_status, $user_id, $remark);
    return $this->recv_admin_process_delivery();
  }

  public function send_admin_process_delivery($order_id, $to_delivery_status, $user_id, $remark)
  {
    $args = new \EOS\ElemeOrderService_admin_process_delivery_args();
    $args->order_id = $order_id;
    $args->to_delivery_status = $to_delivery_status;
    $args->user_id = $user_id;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'admin_process_delivery', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('admin_process_delivery', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_admin_process_delivery()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_admin_process_delivery_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_admin_process_delivery_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("admin_process_delivery failed: unknown result");
  }

  public function eleme_process_delivery($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code)
  {
    $this->send_eleme_process_delivery($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code);
    return $this->recv_eleme_process_delivery();
  }

  public function send_eleme_process_delivery($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code)
  {
    $args = new \EOS\ElemeOrderService_eleme_process_delivery_args();
    $args->order_id = $order_id;
    $args->to_delivery_status = $to_delivery_status;
    $args->user_id = $user_id;
    $args->process_group = $process_group;
    $args->remark = $remark;
    $args->type_code = $type_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'eleme_process_delivery', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('eleme_process_delivery', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_eleme_process_delivery()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_eleme_process_delivery_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_eleme_process_delivery_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("eleme_process_delivery failed: unknown result");
  }

  public function napos_process_delivery($order_id, $to_delivery_status, $user_id, $remark)
  {
    $this->send_napos_process_delivery($order_id, $to_delivery_status, $user_id, $remark);
    return $this->recv_napos_process_delivery();
  }

  public function send_napos_process_delivery($order_id, $to_delivery_status, $user_id, $remark)
  {
    $args = new \EOS\ElemeOrderService_napos_process_delivery_args();
    $args->order_id = $order_id;
    $args->to_delivery_status = $to_delivery_status;
    $args->user_id = $user_id;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_process_delivery', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_process_delivery', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_process_delivery()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_napos_process_delivery_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_napos_process_delivery_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("napos_process_delivery failed: unknown result");
  }

  public function napos_process_delivery_new($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code)
  {
    $this->send_napos_process_delivery_new($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code);
    return $this->recv_napos_process_delivery_new();
  }

  public function send_napos_process_delivery_new($order_id, $to_delivery_status, $user_id, $process_group, $remark, $type_code)
  {
    $args = new \EOS\ElemeOrderService_napos_process_delivery_new_args();
    $args->order_id = $order_id;
    $args->to_delivery_status = $to_delivery_status;
    $args->user_id = $user_id;
    $args->process_group = $process_group;
    $args->remark = $remark;
    $args->type_code = $type_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_process_delivery_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_process_delivery_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_process_delivery_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_napos_process_delivery_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_napos_process_delivery_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("napos_process_delivery_new failed: unknown result");
  }

  public function openapi_process_delivery($order_id, $to_delivery_status, $remark)
  {
    $this->send_openapi_process_delivery($order_id, $to_delivery_status, $remark);
    return $this->recv_openapi_process_delivery();
  }

  public function send_openapi_process_delivery($order_id, $to_delivery_status, $remark)
  {
    $args = new \EOS\ElemeOrderService_openapi_process_delivery_args();
    $args->order_id = $order_id;
    $args->to_delivery_status = $to_delivery_status;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'openapi_process_delivery', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('openapi_process_delivery', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_openapi_process_delivery()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_openapi_process_delivery_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_openapi_process_delivery_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("openapi_process_delivery failed: unknown result");
  }

  public function force_invalid_order($order_id, $user_id, $password)
  {
    $this->send_force_invalid_order($order_id, $user_id, $password);
    $this->recv_force_invalid_order();
  }

  public function send_force_invalid_order($order_id, $user_id, $password)
  {
    $args = new \EOS\ElemeOrderService_force_invalid_order_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'force_invalid_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('force_invalid_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_force_invalid_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_force_invalid_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_force_invalid_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function eleme_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code)
  {
    $this->send_eleme_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code);
    $this->recv_eleme_process_order();
  }

  public function send_eleme_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code)
  {
    $args = new \EOS\ElemeOrderService_eleme_process_order_args();
    $args->order_id = $order_id;
    $args->to_status = $to_status;
    $args->user_id = $user_id;
    $args->process_group = $process_group;
    $args->remark = $remark;
    $args->type_code = $type_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'eleme_process_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('eleme_process_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_eleme_process_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_eleme_process_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_eleme_process_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function napos_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code)
  {
    $this->send_napos_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code);
    $this->recv_napos_process_order();
  }

  public function send_napos_process_order($order_id, $to_status, $user_id, $process_group, $remark, $type_code)
  {
    $args = new \EOS\ElemeOrderService_napos_process_order_args();
    $args->order_id = $order_id;
    $args->to_status = $to_status;
    $args->user_id = $user_id;
    $args->process_group = $process_group;
    $args->remark = $remark;
    $args->type_code = $type_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_process_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_process_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_process_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_napos_process_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_napos_process_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function napos_set_order_invalid($order_id, $user_id, $type_code, $remark)
  {
    $this->send_napos_set_order_invalid($order_id, $user_id, $type_code, $remark);
    $this->recv_napos_set_order_invalid();
  }

  public function send_napos_set_order_invalid($order_id, $user_id, $type_code, $remark)
  {
    $args = new \EOS\ElemeOrderService_napos_set_order_invalid_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $args->type_code = $type_code;
    $args->remark = $remark;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_set_order_invalid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_set_order_invalid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_set_order_invalid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_napos_set_order_invalid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_napos_set_order_invalid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function napos_process_napos_order($order_id, $to_status, $user_id)
  {
    $this->send_napos_process_napos_order($order_id, $to_status, $user_id);
    $this->recv_napos_process_napos_order();
  }

  public function send_napos_process_napos_order($order_id, $to_status, $user_id)
  {
    $args = new \EOS\ElemeOrderService_napos_process_napos_order_args();
    $args->order_id = $order_id;
    $args->to_status = $to_status;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_process_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_process_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_process_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_napos_process_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_napos_process_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function openapi_process_order($order_id, $to_status)
  {
    $this->send_openapi_process_order($order_id, $to_status);
    $this->recv_openapi_process_order();
  }

  public function send_openapi_process_order($order_id, $to_status)
  {
    $args = new \EOS\ElemeOrderService_openapi_process_order_args();
    $args->order_id = $order_id;
    $args->to_status = $to_status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'openapi_process_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('openapi_process_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_openapi_process_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_openapi_process_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_openapi_process_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_apply($user_id, $unique_id, $content, $resource)
  {
    $this->send_refund_apply($user_id, $unique_id, $content, $resource);
    $this->recv_refund_apply();
  }

  public function send_refund_apply($user_id, $unique_id, $content, $resource)
  {
    $args = new \EOS\ElemeOrderService_refund_apply_args();
    $args->user_id = $user_id;
    $args->unique_id = $unique_id;
    $args->content = $content;
    $args->resource = $resource;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_apply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_apply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_apply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_apply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_apply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_cancel($user_id, $unique_id, $password)
  {
    $this->send_refund_cancel($user_id, $unique_id, $password);
    $this->recv_refund_cancel();
  }

  public function send_refund_cancel($user_id, $unique_id, $password)
  {
    $args = new \EOS\ElemeOrderService_refund_cancel_args();
    $args->user_id = $user_id;
    $args->unique_id = $unique_id;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_cancel', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_cancel', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_cancel()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_cancel_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_cancel_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_overrule_by_admin($user_id, $unique_id, $content)
  {
    $this->send_refund_overrule_by_admin($user_id, $unique_id, $content);
    $this->recv_refund_overrule_by_admin();
  }

  public function send_refund_overrule_by_admin($user_id, $unique_id, $content)
  {
    $args = new \EOS\ElemeOrderService_refund_overrule_by_admin_args();
    $args->user_id = $user_id;
    $args->unique_id = $unique_id;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_overrule_by_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_overrule_by_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_overrule_by_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_overrule_by_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_overrule_by_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_reply($rst_user_id, $unique_id, $resource, $explanation)
  {
    $this->send_refund_reply($rst_user_id, $unique_id, $resource, $explanation);
    $this->recv_refund_reply();
  }

  public function send_refund_reply($rst_user_id, $unique_id, $resource, $explanation)
  {
    $args = new \EOS\ElemeOrderService_refund_reply_args();
    $args->rst_user_id = $rst_user_id;
    $args->unique_id = $unique_id;
    $args->resource = $resource;
    $args->explanation = $explanation;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_reply', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_reply', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_reply()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_reply_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_reply_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_arbitrate($user_id, $unique_id, $content)
  {
    $this->send_refund_arbitrate($user_id, $unique_id, $content);
    $this->recv_refund_arbitrate();
  }

  public function send_refund_arbitrate($user_id, $unique_id, $content)
  {
    $args = new \EOS\ElemeOrderService_refund_arbitrate_args();
    $args->user_id = $user_id;
    $args->unique_id = $unique_id;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_arbitrate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_arbitrate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_arbitrate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_arbitrate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_arbitrate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_approve($user_id, $unique_id, $password)
  {
    $this->send_refund_approve($user_id, $unique_id, $password);
    $this->recv_refund_approve();
  }

  public function send_refund_approve($user_id, $unique_id, $password)
  {
    $args = new \EOS\ElemeOrderService_refund_approve_args();
    $args->user_id = $user_id;
    $args->unique_id = $unique_id;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_approve', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_approve', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_approve()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_approve_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_approve_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_approve_by_admin($user_id, $unique_id, $content)
  {
    $this->send_refund_approve_by_admin($user_id, $unique_id, $content);
    $this->recv_refund_approve_by_admin();
  }

  public function send_refund_approve_by_admin($user_id, $unique_id, $content)
  {
    $args = new \EOS\ElemeOrderService_refund_approve_by_admin_args();
    $args->user_id = $user_id;
    $args->unique_id = $unique_id;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_approve_by_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_approve_by_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_approve_by_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_approve_by_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_approve_by_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_auto_success($order_id)
  {
    $this->send_refund_auto_success($order_id);
    $this->recv_refund_auto_success();
  }

  public function send_refund_auto_success($order_id)
  {
    $args = new \EOS\ElemeOrderService_refund_auto_success_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_auto_success', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_auto_success', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_auto_success()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_auto_success_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_auto_success_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function refund_auto_fail($order_id)
  {
    $this->send_refund_auto_fail($order_id);
    $this->recv_refund_auto_fail();
  }

  public function send_refund_auto_fail($order_id)
  {
    $args = new \EOS\ElemeOrderService_refund_auto_fail_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refund_auto_fail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refund_auto_fail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refund_auto_fail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_refund_auto_fail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_refund_auto_fail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function settle_up_order($order_id)
  {
    $this->send_settle_up_order($order_id);
    $this->recv_settle_up_order();
  }

  public function send_settle_up_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_settle_up_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'settle_up_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('settle_up_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_settle_up_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_settle_up_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_settle_up_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function settle_after_make($order_id)
  {
    $this->send_settle_after_make($order_id);
    $this->recv_settle_after_make();
  }

  public function send_settle_after_make($order_id)
  {
    $args = new \EOS\ElemeOrderService_settle_after_make_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'settle_after_make', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('settle_after_make', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_settle_after_make()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_settle_after_make_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_settle_after_make_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function settle_after_invalid($order_id)
  {
    $this->send_settle_after_invalid($order_id);
    $this->recv_settle_after_invalid();
  }

  public function send_settle_after_invalid($order_id)
  {
    $args = new \EOS\ElemeOrderService_settle_after_invalid_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'settle_after_invalid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('settle_after_invalid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_settle_after_invalid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_settle_after_invalid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_settle_after_invalid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function walle_count_coupon(\EOS\TCouponQuery $query_struct)
  {
    $this->send_walle_count_coupon($query_struct);
    return $this->recv_walle_count_coupon();
  }

  public function send_walle_count_coupon(\EOS\TCouponQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_count_coupon_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_count_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_count_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_count_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_count_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_count_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_count_coupon failed: unknown result");
  }

  public function walle_query_coupon(\EOS\TCouponQuery $query_struct)
  {
    $this->send_walle_query_coupon($query_struct);
    return $this->recv_walle_query_coupon();
  }

  public function send_walle_query_coupon(\EOS\TCouponQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_walle_query_coupon_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_query_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_query_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_query_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_query_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_query_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_query_coupon failed: unknown result");
  }

  public function napos_today_summary($restaurant_id, $require_full)
  {
    $this->send_napos_today_summary($restaurant_id, $require_full);
    return $this->recv_napos_today_summary();
  }

  public function send_napos_today_summary($restaurant_id, $require_full)
  {
    $args = new \EOS\ElemeOrderService_napos_today_summary_args();
    $args->restaurant_id = $restaurant_id;
    $args->require_full = $require_full;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_today_summary', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_today_summary', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_today_summary()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_napos_today_summary_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_napos_today_summary_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("napos_today_summary failed: unknown result");
  }

  public function napos_search_eleme_order($restaurant_id, $keyword)
  {
    $this->send_napos_search_eleme_order($restaurant_id, $keyword);
    return $this->recv_napos_search_eleme_order();
  }

  public function send_napos_search_eleme_order($restaurant_id, $keyword)
  {
    $args = new \EOS\ElemeOrderService_napos_search_eleme_order_args();
    $args->restaurant_id = $restaurant_id;
    $args->keyword = $keyword;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'napos_search_eleme_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('napos_search_eleme_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_napos_search_eleme_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_napos_search_eleme_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_napos_search_eleme_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("napos_search_eleme_order failed: unknown result");
  }

  public function walle_get_coupon_total_amount()
  {
    $this->send_walle_get_coupon_total_amount();
    return $this->recv_walle_get_coupon_total_amount();
  }

  public function send_walle_get_coupon_total_amount()
  {
    $args = new \EOS\ElemeOrderService_walle_get_coupon_total_amount_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'walle_get_coupon_total_amount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('walle_get_coupon_total_amount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_walle_get_coupon_total_amount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_walle_get_coupon_total_amount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_walle_get_coupon_total_amount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("walle_get_coupon_total_amount failed: unknown result");
  }

  public function dms_mget_process_info($order_ids)
  {
    $this->send_dms_mget_process_info($order_ids);
    return $this->recv_dms_mget_process_info();
  }

  public function send_dms_mget_process_info($order_ids)
  {
    $args = new \EOS\ElemeOrderService_dms_mget_process_info_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dms_mget_process_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dms_mget_process_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dms_mget_process_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_dms_mget_process_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_dms_mget_process_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("dms_mget_process_info failed: unknown result");
  }

  public function dms_mget_dispatch_info($order_ids)
  {
    $this->send_dms_mget_dispatch_info($order_ids);
    return $this->recv_dms_mget_dispatch_info();
  }

  public function send_dms_mget_dispatch_info($order_ids)
  {
    $args = new \EOS\ElemeOrderService_dms_mget_dispatch_info_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dms_mget_dispatch_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dms_mget_dispatch_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dms_mget_dispatch_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_dms_mget_dispatch_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_dms_mget_dispatch_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("dms_mget_dispatch_info failed: unknown result");
  }

  public function redis_mcount_order($restaurant_ids)
  {
    $this->send_redis_mcount_order($restaurant_ids);
    return $this->recv_redis_mcount_order();
  }

  public function send_redis_mcount_order($restaurant_ids)
  {
    $args = new \EOS\ElemeOrderService_redis_mcount_order_args();
    $args->restaurant_ids = $restaurant_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'redis_mcount_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('redis_mcount_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_redis_mcount_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_redis_mcount_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_redis_mcount_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("redis_mcount_order failed: unknown result");
  }

  public function redis_count_order($restaurant_id)
  {
    $this->send_redis_count_order($restaurant_id);
    return $this->recv_redis_count_order();
  }

  public function send_redis_count_order($restaurant_id)
  {
    $args = new \EOS\ElemeOrderService_redis_count_order_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'redis_count_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('redis_count_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_redis_count_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_redis_count_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_redis_count_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("redis_count_order failed: unknown result");
  }

  public function redis_count_order_add($restaurant_id, $order_id, $created_at)
  {
    $this->send_redis_count_order_add($restaurant_id, $order_id, $created_at);
    $this->recv_redis_count_order_add();
  }

  public function send_redis_count_order_add($restaurant_id, $order_id, $created_at)
  {
    $args = new \EOS\ElemeOrderService_redis_count_order_add_args();
    $args->restaurant_id = $restaurant_id;
    $args->order_id = $order_id;
    $args->created_at = $created_at;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'redis_count_order_add', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('redis_count_order_add', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_redis_count_order_add()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_redis_count_order_add_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_redis_count_order_add_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function redis_count_order_rem($restaurant_id, $order_id)
  {
    $this->send_redis_count_order_rem($restaurant_id, $order_id);
    $this->recv_redis_count_order_rem();
  }

  public function send_redis_count_order_rem($restaurant_id, $order_id)
  {
    $args = new \EOS\ElemeOrderService_redis_count_order_rem_args();
    $args->restaurant_id = $restaurant_id;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'redis_count_order_rem', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('redis_count_order_rem', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_redis_count_order_rem()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_redis_count_order_rem_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_redis_count_order_rem_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function recharge_tpd_vip_mobile($mobile, $months, $days)
  {
    $this->send_recharge_tpd_vip_mobile($mobile, $months, $days);
    $this->recv_recharge_tpd_vip_mobile();
  }

  public function send_recharge_tpd_vip_mobile($mobile, $months, $days)
  {
    $args = new \EOS\ElemeOrderService_recharge_tpd_vip_mobile_args();
    $args->mobile = $mobile;
    $args->months = $months;
    $args->days = $days;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'recharge_tpd_vip_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('recharge_tpd_vip_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_recharge_tpd_vip_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_recharge_tpd_vip_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_recharge_tpd_vip_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function set_tpd_vip_mobile_invalid($mobile)
  {
    $this->send_set_tpd_vip_mobile_invalid($mobile);
    $this->recv_set_tpd_vip_mobile_invalid();
  }

  public function send_set_tpd_vip_mobile_invalid($mobile)
  {
    $args = new \EOS\ElemeOrderService_set_tpd_vip_mobile_invalid_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_tpd_vip_mobile_invalid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_tpd_vip_mobile_invalid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_tpd_vip_mobile_invalid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_set_tpd_vip_mobile_invalid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_set_tpd_vip_mobile_invalid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_tpd_vip_mobile($mobile)
  {
    $this->send_get_tpd_vip_mobile($mobile);
    return $this->recv_get_tpd_vip_mobile();
  }

  public function send_get_tpd_vip_mobile($mobile)
  {
    $args = new \EOS\ElemeOrderService_get_tpd_vip_mobile_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_tpd_vip_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_tpd_vip_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_tpd_vip_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_tpd_vip_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_tpd_vip_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_tpd_vip_mobile failed: unknown result");
  }

  public function query_expired_tpd_vip_mobile($days)
  {
    $this->send_query_expired_tpd_vip_mobile($days);
    return $this->recv_query_expired_tpd_vip_mobile();
  }

  public function send_query_expired_tpd_vip_mobile($days)
  {
    $args = new \EOS\ElemeOrderService_query_expired_tpd_vip_mobile_args();
    $args->days = $days;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_expired_tpd_vip_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_expired_tpd_vip_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_expired_tpd_vip_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_expired_tpd_vip_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_expired_tpd_vip_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_expired_tpd_vip_mobile failed: unknown result");
  }

  public function query_tpd_vip_mobile(\EOS\TTpdVipMobileQuery $query_struct)
  {
    $this->send_query_tpd_vip_mobile($query_struct);
    return $this->recv_query_tpd_vip_mobile();
  }

  public function send_query_tpd_vip_mobile(\EOS\TTpdVipMobileQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_tpd_vip_mobile_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_tpd_vip_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_tpd_vip_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_tpd_vip_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_tpd_vip_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_tpd_vip_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_tpd_vip_mobile failed: unknown result");
  }

  public function count_tpd_vip_mobile(\EOS\TTpdVipMobileQuery $query_struct)
  {
    $this->send_count_tpd_vip_mobile($query_struct);
    return $this->recv_count_tpd_vip_mobile();
  }

  public function send_count_tpd_vip_mobile(\EOS\TTpdVipMobileQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_count_tpd_vip_mobile_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_tpd_vip_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_tpd_vip_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_tpd_vip_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_count_tpd_vip_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_count_tpd_vip_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_tpd_vip_mobile failed: unknown result");
  }

  public function back_up_mysql_task()
  {
    $this->send_back_up_mysql_task();
    $this->recv_back_up_mysql_task();
  }

  public function send_back_up_mysql_task()
  {
    $args = new \EOS\ElemeOrderService_back_up_mysql_task_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'back_up_mysql_task', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('back_up_mysql_task', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_back_up_mysql_task()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_back_up_mysql_task_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_back_up_mysql_task_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function clean_timeout_mysql_task()
  {
    $this->send_clean_timeout_mysql_task();
    $this->recv_clean_timeout_mysql_task();
  }

  public function send_clean_timeout_mysql_task()
  {
    $args = new \EOS\ElemeOrderService_clean_timeout_mysql_task_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clean_timeout_mysql_task', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clean_timeout_mysql_task', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clean_timeout_mysql_task()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_clean_timeout_mysql_task_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_clean_timeout_mysql_task_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_order_item_attribute($order_id)
  {
    $this->send_process_order_item_attribute($order_id);
    $this->recv_process_order_item_attribute();
  }

  public function send_process_order_item_attribute($order_id)
  {
    $args = new \EOS\ElemeOrderService_process_order_item_attribute_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_order_item_attribute', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_order_item_attribute', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_order_item_attribute()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_process_order_item_attribute_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_process_order_item_attribute_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_post_make_napos_order($order_id)
  {
    $this->send_process_post_make_napos_order($order_id);
    $this->recv_process_post_make_napos_order();
  }

  public function send_process_post_make_napos_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_process_post_make_napos_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_post_make_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_post_make_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_post_make_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_process_post_make_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_process_post_make_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_post_pay_for_order($order_id, $pay_record_id)
  {
    $this->send_process_post_pay_for_order($order_id, $pay_record_id);
    $this->recv_process_post_pay_for_order();
  }

  public function send_process_post_pay_for_order($order_id, $pay_record_id)
  {
    $args = new \EOS\ElemeOrderService_process_post_pay_for_order_args();
    $args->order_id = $order_id;
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_post_pay_for_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_post_pay_for_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_post_pay_for_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_process_post_pay_for_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_process_post_pay_for_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_post_pay_success($order_id)
  {
    $this->send_process_post_pay_success($order_id);
    $this->recv_process_post_pay_success();
  }

  public function send_process_post_pay_success($order_id)
  {
    $args = new \EOS\ElemeOrderService_process_post_pay_success_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_post_pay_success', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_post_pay_success', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_post_pay_success()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_process_post_pay_success_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_process_post_pay_success_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_post_pay_fail($order_id)
  {
    $this->send_process_post_pay_fail($order_id);
    $this->recv_process_post_pay_fail();
  }

  public function send_process_post_pay_fail($order_id)
  {
    $args = new \EOS\ElemeOrderService_process_post_pay_fail_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_post_pay_fail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_post_pay_fail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_post_pay_fail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_process_post_pay_fail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_process_post_pay_fail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function process_claim_order($order_id, $user_id)
  {
    $this->send_process_claim_order($order_id, $user_id);
    $this->recv_process_claim_order();
  }

  public function send_process_claim_order($order_id, $user_id)
  {
    $args = new \EOS\ElemeOrderService_process_claim_order_args();
    $args->order_id = $order_id;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_claim_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_claim_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_claim_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_process_claim_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_process_claim_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_source_id($name)
  {
    $this->send_get_source_id($name);
    return $this->recv_get_source_id();
  }

  public function send_get_source_id($name)
  {
    $args = new \EOS\ElemeOrderService_get_source_id_args();
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_source_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_source_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_source_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_source_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_source_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_source_id failed: unknown result");
  }

  public function dispatch_order_to_sev($order_id)
  {
    $this->send_dispatch_order_to_sev($order_id);
    $this->recv_dispatch_order_to_sev();
  }

  public function send_dispatch_order_to_sev($order_id)
  {
    $args = new \EOS\ElemeOrderService_dispatch_order_to_sev_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'dispatch_order_to_sev', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('dispatch_order_to_sev', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_dispatch_order_to_sev()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_dispatch_order_to_sev_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_dispatch_order_to_sev_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function get_source_name($id)
  {
    $this->send_get_source_name($id);
    return $this->recv_get_source_name();
  }

  public function send_get_source_name($id)
  {
    $args = new \EOS\ElemeOrderService_get_source_name_args();
    $args->id = $id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_source_name', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_source_name', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_source_name()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_source_name_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_source_name_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_source_name failed: unknown result");
  }

  public function mget_source_name($source_ids)
  {
    $this->send_mget_source_name($source_ids);
    return $this->recv_mget_source_name();
  }

  public function send_mget_source_name($source_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_source_name_args();
    $args->source_ids = $source_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_source_name', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_source_name', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_source_name()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_source_name_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_source_name_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("mget_source_name failed: unknown result");
  }

  public function get_source_name_id_map($names)
  {
    $this->send_get_source_name_id_map($names);
    return $this->recv_get_source_name_id_map();
  }

  public function send_get_source_name_id_map($names)
  {
    $args = new \EOS\ElemeOrderService_get_source_name_id_map_args();
    $args->names = $names;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_source_name_id_map', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_source_name_id_map', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_source_name_id_map()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_source_name_id_map_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_source_name_id_map_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_source_name_id_map failed: unknown result");
  }

  public function not_paid_order_auto_fail($order_id)
  {
    $this->send_not_paid_order_auto_fail($order_id);
    $this->recv_not_paid_order_auto_fail();
  }

  public function send_not_paid_order_auto_fail($order_id)
  {
    $args = new \EOS\ElemeOrderService_not_paid_order_auto_fail_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'not_paid_order_auto_fail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('not_paid_order_auto_fail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_not_paid_order_auto_fail()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_not_paid_order_auto_fail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_not_paid_order_auto_fail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_or_update_food_popularity_rating($food_id, $recent_popularity, $recent_num_ratings)
  {
    $this->send_check_or_update_food_popularity_rating($food_id, $recent_popularity, $recent_num_ratings);
    $this->recv_check_or_update_food_popularity_rating();
  }

  public function send_check_or_update_food_popularity_rating($food_id, $recent_popularity, $recent_num_ratings)
  {
    $args = new \EOS\ElemeOrderService_check_or_update_food_popularity_rating_args();
    $args->food_id = $food_id;
    $args->recent_popularity = $recent_popularity;
    $args->recent_num_ratings = $recent_num_ratings;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_or_update_food_popularity_rating', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_or_update_food_popularity_rating', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_or_update_food_popularity_rating()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_or_update_food_popularity_rating_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_or_update_food_popularity_rating_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function generate_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price)
  {
    $this->send_generate_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price);
    $this->recv_generate_activity_subsidy_stats();
  }

  public function send_generate_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price)
  {
    $args = new \EOS\ElemeOrderService_generate_activity_subsidy_stats_args();
    $args->restaurant_id = $restaurant_id;
    $args->activity_id = $activity_id;
    $args->activity_category_id = $activity_category_id;
    $args->subsidy_price = $subsidy_price;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_activity_subsidy_stats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_activity_subsidy_stats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_activity_subsidy_stats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_generate_activity_subsidy_stats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_generate_activity_subsidy_stats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function generate_complex_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price)
  {
    $this->send_generate_complex_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price);
    $this->recv_generate_complex_activity_subsidy_stats();
  }

  public function send_generate_complex_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id, $subsidy_price)
  {
    $args = new \EOS\ElemeOrderService_generate_complex_activity_subsidy_stats_args();
    $args->restaurant_id = $restaurant_id;
    $args->activity_id = $activity_id;
    $args->activity_category_id = $activity_category_id;
    $args->subsidy_price = $subsidy_price;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_complex_activity_subsidy_stats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_complex_activity_subsidy_stats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_complex_activity_subsidy_stats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_generate_complex_activity_subsidy_stats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_generate_complex_activity_subsidy_stats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function generate_activity_subsidy_pay_record($restaurant_id, $activity_id, $activity_category_id)
  {
    $this->send_generate_activity_subsidy_pay_record($restaurant_id, $activity_id, $activity_category_id);
    $this->recv_generate_activity_subsidy_pay_record();
  }

  public function send_generate_activity_subsidy_pay_record($restaurant_id, $activity_id, $activity_category_id)
  {
    $args = new \EOS\ElemeOrderService_generate_activity_subsidy_pay_record_args();
    $args->restaurant_id = $restaurant_id;
    $args->activity_id = $activity_id;
    $args->activity_category_id = $activity_category_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_activity_subsidy_pay_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_activity_subsidy_pay_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_activity_subsidy_pay_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_generate_activity_subsidy_pay_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_generate_activity_subsidy_pay_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function generate_activity_subsidy_pay_record_new($restaurant_id)
  {
    $this->send_generate_activity_subsidy_pay_record_new($restaurant_id);
    $this->recv_generate_activity_subsidy_pay_record_new();
  }

  public function send_generate_activity_subsidy_pay_record_new($restaurant_id)
  {
    $args = new \EOS\ElemeOrderService_generate_activity_subsidy_pay_record_new_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'generate_activity_subsidy_pay_record_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('generate_activity_subsidy_pay_record_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_generate_activity_subsidy_pay_record_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_generate_activity_subsidy_pay_record_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_generate_activity_subsidy_pay_record_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function batch_generate_activity_subsidy_pay_record($restaurant_ids, $activity_id, $activity_category_id)
  {
    $this->send_batch_generate_activity_subsidy_pay_record($restaurant_ids, $activity_id, $activity_category_id);
    $this->recv_batch_generate_activity_subsidy_pay_record();
  }

  public function send_batch_generate_activity_subsidy_pay_record($restaurant_ids, $activity_id, $activity_category_id)
  {
    $args = new \EOS\ElemeOrderService_batch_generate_activity_subsidy_pay_record_args();
    $args->restaurant_ids = $restaurant_ids;
    $args->activity_id = $activity_id;
    $args->activity_category_id = $activity_category_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'batch_generate_activity_subsidy_pay_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('batch_generate_activity_subsidy_pay_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_batch_generate_activity_subsidy_pay_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_batch_generate_activity_subsidy_pay_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_batch_generate_activity_subsidy_pay_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function doubt_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id)
  {
    $this->send_doubt_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id);
    $this->recv_doubt_activity_subsidy_stats();
  }

  public function send_doubt_activity_subsidy_stats($restaurant_id, $activity_id, $activity_category_id)
  {
    $args = new \EOS\ElemeOrderService_doubt_activity_subsidy_stats_args();
    $args->restaurant_id = $restaurant_id;
    $args->activity_id = $activity_id;
    $args->activity_category_id = $activity_category_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'doubt_activity_subsidy_stats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('doubt_activity_subsidy_stats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_doubt_activity_subsidy_stats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_doubt_activity_subsidy_stats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_doubt_activity_subsidy_stats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function doubt_activity_subsidy_stats_new($restaurant_id)
  {
    $this->send_doubt_activity_subsidy_stats_new($restaurant_id);
    $this->recv_doubt_activity_subsidy_stats_new();
  }

  public function send_doubt_activity_subsidy_stats_new($restaurant_id)
  {
    $args = new \EOS\ElemeOrderService_doubt_activity_subsidy_stats_new_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'doubt_activity_subsidy_stats_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('doubt_activity_subsidy_stats_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_doubt_activity_subsidy_stats_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_doubt_activity_subsidy_stats_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_doubt_activity_subsidy_stats_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function submit_subsidy_pay_record($pay_record_id)
  {
    $this->send_submit_subsidy_pay_record($pay_record_id);
    $this->recv_submit_subsidy_pay_record();
  }

  public function send_submit_subsidy_pay_record($pay_record_id)
  {
    $args = new \EOS\ElemeOrderService_submit_subsidy_pay_record_args();
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'submit_subsidy_pay_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('submit_subsidy_pay_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_submit_subsidy_pay_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_submit_subsidy_pay_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_submit_subsidy_pay_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function retry_subsidy_pay_record($pay_record_id)
  {
    $this->send_retry_subsidy_pay_record($pay_record_id);
    $this->recv_retry_subsidy_pay_record();
  }

  public function send_retry_subsidy_pay_record($pay_record_id)
  {
    $args = new \EOS\ElemeOrderService_retry_subsidy_pay_record_args();
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'retry_subsidy_pay_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('retry_subsidy_pay_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_retry_subsidy_pay_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_retry_subsidy_pay_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_retry_subsidy_pay_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function check_subsidy_pay_record($pay_record_id)
  {
    $this->send_check_subsidy_pay_record($pay_record_id);
    $this->recv_check_subsidy_pay_record();
  }

  public function send_check_subsidy_pay_record($pay_record_id)
  {
    $args = new \EOS\ElemeOrderService_check_subsidy_pay_record_args();
    $args->pay_record_id = $pay_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'check_subsidy_pay_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('check_subsidy_pay_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_check_subsidy_pay_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_check_subsidy_pay_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_check_subsidy_pay_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function add_order_event($order_id, $is_new_order)
  {
    $this->send_add_order_event($order_id, $is_new_order);
    $this->recv_add_order_event();
  }

  public function send_add_order_event($order_id, $is_new_order)
  {
    $args = new \EOS\ElemeOrderService_add_order_event_args();
    $args->order_id = $order_id;
    $args->is_new_order = $is_new_order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_order_event', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_order_event', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_order_event()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_add_order_event_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_add_order_event_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function add_order_event2($order_id, $restaurant_id, $is_new_order)
  {
    $this->send_add_order_event2($order_id, $restaurant_id, $is_new_order);
    $this->recv_add_order_event2();
  }

  public function send_add_order_event2($order_id, $restaurant_id, $is_new_order)
  {
    $args = new \EOS\ElemeOrderService_add_order_event2_args();
    $args->order_id = $order_id;
    $args->restaurant_id = $restaurant_id;
    $args->is_new_order = $is_new_order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'add_order_event2', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('add_order_event2', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_add_order_event2()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_add_order_event2_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_add_order_event2_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function can_invalid_order_pass_post_make_order($order_id)
  {
    $this->send_can_invalid_order_pass_post_make_order($order_id);
    return $this->recv_can_invalid_order_pass_post_make_order();
  }

  public function send_can_invalid_order_pass_post_make_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_can_invalid_order_pass_post_make_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'can_invalid_order_pass_post_make_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('can_invalid_order_pass_post_make_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_can_invalid_order_pass_post_make_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_can_invalid_order_pass_post_make_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_can_invalid_order_pass_post_make_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("can_invalid_order_pass_post_make_order failed: unknown result");
  }

  public function is_device_blockable($order_id)
  {
    $this->send_is_device_blockable($order_id);
    return $this->recv_is_device_blockable();
  }

  public function send_is_device_blockable($order_id)
  {
    $args = new \EOS\ElemeOrderService_is_device_blockable_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'is_device_blockable', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('is_device_blockable', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_is_device_blockable()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_is_device_blockable_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_is_device_blockable_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("is_device_blockable failed: unknown result");
  }

  public function block_mobile_device_by_order($order_id, $operator_user_id, $reason)
  {
    $this->send_block_mobile_device_by_order($order_id, $operator_user_id, $reason);
    $this->recv_block_mobile_device_by_order();
  }

  public function send_block_mobile_device_by_order($order_id, $operator_user_id, $reason)
  {
    $args = new \EOS\ElemeOrderService_block_mobile_device_by_order_args();
    $args->order_id = $order_id;
    $args->operator_user_id = $operator_user_id;
    $args->reason = $reason;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'block_mobile_device_by_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('block_mobile_device_by_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_block_mobile_device_by_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_block_mobile_device_by_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_block_mobile_device_by_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_promotion_activity($order_id)
  {
    $this->send_process_promotion_activity($order_id);
    $this->recv_process_promotion_activity();
  }

  public function send_process_promotion_activity($order_id)
  {
    $args = new \EOS\ElemeOrderService_process_promotion_activity_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_promotion_activity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_promotion_activity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_promotion_activity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_process_promotion_activity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_process_promotion_activity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function bind_tpd_vip_card($mobile, $days)
  {
    $this->send_bind_tpd_vip_card($mobile, $days);
    $this->recv_bind_tpd_vip_card();
  }

  public function send_bind_tpd_vip_card($mobile, $days)
  {
    $args = new \EOS\ElemeOrderService_bind_tpd_vip_card_args();
    $args->mobile = $mobile;
    $args->days = $days;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'bind_tpd_vip_card', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('bind_tpd_vip_card', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_bind_tpd_vip_card()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_bind_tpd_vip_card_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_bind_tpd_vip_card_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function unbind_tpd_vip_card($mobile)
  {
    $this->send_unbind_tpd_vip_card($mobile);
    $this->recv_unbind_tpd_vip_card();
  }

  public function send_unbind_tpd_vip_card($mobile)
  {
    $args = new \EOS\ElemeOrderService_unbind_tpd_vip_card_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unbind_tpd_vip_card', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unbind_tpd_vip_card', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unbind_tpd_vip_card()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_unbind_tpd_vip_card_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_unbind_tpd_vip_card_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function renew_tpd_vip_card($mobile, $days)
  {
    $this->send_renew_tpd_vip_card($mobile, $days);
    $this->recv_renew_tpd_vip_card();
  }

  public function send_renew_tpd_vip_card($mobile, $days)
  {
    $args = new \EOS\ElemeOrderService_renew_tpd_vip_card_args();
    $args->mobile = $mobile;
    $args->days = $days;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'renew_tpd_vip_card', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('renew_tpd_vip_card', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_renew_tpd_vip_card()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_renew_tpd_vip_card_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_renew_tpd_vip_card_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_focusmedia_coupon($phone, $is_ios, $source, $ip, $ua)
  {
    $this->send_send_focusmedia_coupon($phone, $is_ios, $source, $ip, $ua);
    $this->recv_send_focusmedia_coupon();
  }

  public function send_send_focusmedia_coupon($phone, $is_ios, $source, $ip, $ua)
  {
    $args = new \EOS\ElemeOrderService_send_focusmedia_coupon_args();
    $args->phone = $phone;
    $args->is_ios = $is_ios;
    $args->source = $source;
    $args->ip = $ip;
    $args->ua = $ua;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_focusmedia_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_focusmedia_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_focusmedia_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_send_focusmedia_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_send_focusmedia_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get($order_id)
  {
    $this->send_get($order_id);
    return $this->recv_get();
  }

  public function send_get($order_id)
  {
    $args = new \EOS\ElemeOrderService_get_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get failed: unknown result");
  }

  public function mget($order_ids)
  {
    $this->send_mget($order_ids);
    return $this->recv_mget();
  }

  public function send_mget($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget failed: unknown result");
  }

  public function master_get($order_id)
  {
    $this->send_master_get($order_id);
    return $this->recv_master_get();
  }

  public function send_master_get($order_id)
  {
    $args = new \EOS\ElemeOrderService_master_get_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_master_get_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_master_get_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("master_get failed: unknown result");
  }

  public function master_get_anonymous_order($session_id, $order_id)
  {
    $this->send_master_get_anonymous_order($session_id, $order_id);
    return $this->recv_master_get_anonymous_order();
  }

  public function send_master_get_anonymous_order($session_id, $order_id)
  {
    $args = new \EOS\ElemeOrderService_master_get_anonymous_order_args();
    $args->session_id = $session_id;
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get_anonymous_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get_anonymous_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get_anonymous_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_master_get_anonymous_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_master_get_anonymous_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("master_get_anonymous_order failed: unknown result");
  }

  public function master_get_by_unique_id($unique_id)
  {
    $this->send_master_get_by_unique_id($unique_id);
    return $this->recv_master_get_by_unique_id();
  }

  public function send_master_get_by_unique_id($unique_id)
  {
    $args = new \EOS\ElemeOrderService_master_get_by_unique_id_args();
    $args->unique_id = $unique_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get_by_unique_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get_by_unique_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get_by_unique_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_master_get_by_unique_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_master_get_by_unique_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("master_get_by_unique_id failed: unknown result");
  }

  public function master_get_last_order(\EOS\TLastOrderQuery $query_struct)
  {
    $this->send_master_get_last_order($query_struct);
    return $this->recv_master_get_last_order();
  }

  public function send_master_get_last_order(\EOS\TLastOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_master_get_last_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get_last_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get_last_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get_last_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_master_get_last_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_master_get_last_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("master_get_last_order failed: unknown result");
  }

  public function mget_order_info($order_ids)
  {
    $this->send_mget_order_info($order_ids);
    return $this->recv_mget_order_info();
  }

  public function send_mget_order_info($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_info_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_info', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_info', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_info()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_info_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_info_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_info failed: unknown result");
  }

  public function get_by_restaurant_number($restaurant_id, $restaurant_number)
  {
    $this->send_get_by_restaurant_number($restaurant_id, $restaurant_number);
    return $this->recv_get_by_restaurant_number();
  }

  public function send_get_by_restaurant_number($restaurant_id, $restaurant_number)
  {
    $args = new \EOS\ElemeOrderService_get_by_restaurant_number_args();
    $args->restaurant_id = $restaurant_id;
    $args->restaurant_number = $restaurant_number;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_by_restaurant_number', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_by_restaurant_number', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_by_restaurant_number()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_by_restaurant_number_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_by_restaurant_number_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_by_restaurant_number failed: unknown result");
  }

  public function get_by_unique_id($unique_id)
  {
    $this->send_get_by_unique_id($unique_id);
    return $this->recv_get_by_unique_id();
  }

  public function send_get_by_unique_id($unique_id)
  {
    $args = new \EOS\ElemeOrderService_get_by_unique_id_args();
    $args->unique_id = $unique_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_by_unique_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_by_unique_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_by_unique_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_by_unique_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_by_unique_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_by_unique_id failed: unknown result");
  }

  public function get_old_order_by_unique_id($unique_id)
  {
    $this->send_get_old_order_by_unique_id($unique_id);
    return $this->recv_get_old_order_by_unique_id();
  }

  public function send_get_old_order_by_unique_id($unique_id)
  {
    $args = new \EOS\ElemeOrderService_get_old_order_by_unique_id_args();
    $args->unique_id = $unique_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_old_order_by_unique_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_old_order_by_unique_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_old_order_by_unique_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_old_order_by_unique_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_old_order_by_unique_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_old_order_by_unique_id failed: unknown result");
  }

  public function unique_id_to_id($unique_id)
  {
    $this->send_unique_id_to_id($unique_id);
    return $this->recv_unique_id_to_id();
  }

  public function send_unique_id_to_id($unique_id)
  {
    $args = new \EOS\ElemeOrderService_unique_id_to_id_args();
    $args->unique_id = $unique_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'unique_id_to_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('unique_id_to_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_unique_id_to_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_unique_id_to_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_unique_id_to_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("unique_id_to_id failed: unknown result");
  }

  public function query_order(\EOS\TOrderQuery $query_struct)
  {
    $this->send_query_order($query_struct);
    return $this->recv_query_order();
  }

  public function send_query_order(\EOS\TOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_order failed: unknown result");
  }

  public function get_unprocessed_order_ids($order_modes)
  {
    $this->send_get_unprocessed_order_ids($order_modes);
    return $this->recv_get_unprocessed_order_ids();
  }

  public function send_get_unprocessed_order_ids($order_modes)
  {
    $args = new \EOS\ElemeOrderService_get_unprocessed_order_ids_args();
    $args->order_modes = $order_modes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_unprocessed_order_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_unprocessed_order_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_unprocessed_order_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_unprocessed_order_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_unprocessed_order_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_unprocessed_order_ids failed: unknown result");
  }

  public function query_rateable_orders($user_id)
  {
    $this->send_query_rateable_orders($user_id);
    return $this->recv_query_rateable_orders();
  }

  public function send_query_rateable_orders($user_id)
  {
    $args = new \EOS\ElemeOrderService_query_rateable_orders_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_rateable_orders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_rateable_orders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_rateable_orders()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_rateable_orders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_rateable_orders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_rateable_orders failed: unknown result");
  }

  public function query_rateable_orders_new_point($user_id)
  {
    $this->send_query_rateable_orders_new_point($user_id);
    return $this->recv_query_rateable_orders_new_point();
  }

  public function send_query_rateable_orders_new_point($user_id)
  {
    $args = new \EOS\ElemeOrderService_query_rateable_orders_new_point_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_rateable_orders_new_point', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_rateable_orders_new_point', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_rateable_orders_new_point()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_rateable_orders_new_point_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_rateable_orders_new_point_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_rateable_orders_new_point failed: unknown result");
  }

  public function query_rateable_orders_new($user_id)
  {
    $this->send_query_rateable_orders_new($user_id);
    return $this->recv_query_rateable_orders_new();
  }

  public function send_query_rateable_orders_new($user_id)
  {
    $args = new \EOS\ElemeOrderService_query_rateable_orders_new_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_rateable_orders_new', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_rateable_orders_new', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_rateable_orders_new()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_rateable_orders_new_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_rateable_orders_new_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_rateable_orders_new failed: unknown result");
  }

  public function query_processing_orders($user_id)
  {
    $this->send_query_processing_orders($user_id);
    return $this->recv_query_processing_orders();
  }

  public function send_query_processing_orders($user_id)
  {
    $args = new \EOS\ElemeOrderService_query_processing_orders_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_processing_orders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_processing_orders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_processing_orders()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_processing_orders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_processing_orders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_processing_orders failed: unknown result");
  }

  public function query_old_order(\EOS\TOrderQuery $query_struct)
  {
    $this->send_query_old_order($query_struct);
    return $this->recv_query_old_order();
  }

  public function send_query_old_order(\EOS\TOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_old_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_old_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_old_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_old_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_old_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_old_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_old_order failed: unknown result");
  }

  public function query_anonymous_orders($session_id, $limit)
  {
    $this->send_query_anonymous_orders($session_id, $limit);
    return $this->recv_query_anonymous_orders();
  }

  public function send_query_anonymous_orders($session_id, $limit)
  {
    $args = new \EOS\ElemeOrderService_query_anonymous_orders_args();
    $args->session_id = $session_id;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_anonymous_orders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_anonymous_orders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_anonymous_orders()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_anonymous_orders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_anonymous_orders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_anonymous_orders failed: unknown result");
  }

  public function query_all_order(\EOS\TOrderQuery $query_struct)
  {
    $this->send_query_all_order($query_struct);
    return $this->recv_query_all_order();
  }

  public function send_query_all_order(\EOS\TOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_all_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_all_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_all_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_all_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_all_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_all_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_all_order failed: unknown result");
  }

  public function get_napos_order($order_id)
  {
    $this->send_get_napos_order($order_id);
    return $this->recv_get_napos_order();
  }

  public function send_get_napos_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_get_napos_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_napos_order failed: unknown result");
  }

  public function master_get_napos_order($order_id)
  {
    $this->send_master_get_napos_order($order_id);
    return $this->recv_master_get_napos_order();
  }

  public function send_master_get_napos_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_master_get_napos_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_master_get_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_master_get_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("master_get_napos_order failed: unknown result");
  }

  public function mget_napos_order($order_ids)
  {
    $this->send_mget_napos_order($order_ids);
    return $this->recv_mget_napos_order();
  }

  public function send_mget_napos_order($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_napos_order_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_napos_order failed: unknown result");
  }

  public function query_napos_order(\EOS\TNaposOrderQuery $query_struct)
  {
    $this->send_query_napos_order($query_struct);
    return $this->recv_query_napos_order();
  }

  public function send_query_napos_order(\EOS\TNaposOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_napos_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_napos_order failed: unknown result");
  }

  public function count_napos_order(\EOS\TNaposOrderQuery $query_struct)
  {
    $this->send_count_napos_order($query_struct);
    return $this->recv_count_napos_order();
  }

  public function send_count_napos_order(\EOS\TNaposOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_count_napos_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_napos_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_napos_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_napos_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_count_napos_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_count_napos_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_napos_order failed: unknown result");
  }

  public function get_process_record($order_process_record_id)
  {
    $this->send_get_process_record($order_process_record_id);
    return $this->recv_get_process_record();
  }

  public function send_get_process_record($order_process_record_id)
  {
    $args = new \EOS\ElemeOrderService_get_process_record_args();
    $args->order_process_record_id = $order_process_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_process_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_process_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_process_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_process_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_process_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_process_record failed: unknown result");
  }

  public function get_delivery_record($order_delivery_record_id)
  {
    $this->send_get_delivery_record($order_delivery_record_id);
    return $this->recv_get_delivery_record();
  }

  public function send_get_delivery_record($order_delivery_record_id)
  {
    $args = new \EOS\ElemeOrderService_get_delivery_record_args();
    $args->order_delivery_record_id = $order_delivery_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_delivery_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_delivery_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_delivery_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_delivery_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_delivery_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_delivery_record failed: unknown result");
  }

  public function get_refund_record($order_refund_record_id)
  {
    $this->send_get_refund_record($order_refund_record_id);
    return $this->recv_get_refund_record();
  }

  public function send_get_refund_record($order_refund_record_id)
  {
    $args = new \EOS\ElemeOrderService_get_refund_record_args();
    $args->order_refund_record_id = $order_refund_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_refund_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_refund_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_refund_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_refund_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_refund_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_refund_record failed: unknown result");
  }

  public function query_all_process_time(\EOS\TOrderProcessRecordQuery $query_struct)
  {
    $this->send_query_all_process_time($query_struct);
    return $this->recv_query_all_process_time();
  }

  public function send_query_all_process_time(\EOS\TOrderProcessRecordQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_all_process_time_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_all_process_time', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_all_process_time', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_all_process_time()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_all_process_time_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_all_process_time_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_all_process_time failed: unknown result");
  }

  public function query_process_record($order_id)
  {
    $this->send_query_process_record($order_id);
    return $this->recv_query_process_record();
  }

  public function send_query_process_record($order_id)
  {
    $args = new \EOS\ElemeOrderService_query_process_record_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_process_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_process_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_process_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_process_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_process_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_process_record failed: unknown result");
  }

  public function query_time_spent_rate($order_ids)
  {
    $this->send_query_time_spent_rate($order_ids);
    return $this->recv_query_time_spent_rate();
  }

  public function send_query_time_spent_rate($order_ids)
  {
    $args = new \EOS\ElemeOrderService_query_time_spent_rate_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_time_spent_rate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_time_spent_rate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_time_spent_rate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_time_spent_rate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_time_spent_rate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_time_spent_rate failed: unknown result");
  }

  public function query_order_rate($order_ids)
  {
    $this->send_query_order_rate($order_ids);
    return $this->recv_query_order_rate();
  }

  public function send_query_order_rate($order_ids)
  {
    $args = new \EOS\ElemeOrderService_query_order_rate_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_order_rate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_order_rate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_order_rate()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_order_rate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_order_rate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_order_rate failed: unknown result");
  }

  public function query_confirm_record($order_ids)
  {
    $this->send_query_confirm_record($order_ids);
    return $this->recv_query_confirm_record();
  }

  public function send_query_confirm_record($order_ids)
  {
    $args = new \EOS\ElemeOrderService_query_confirm_record_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_confirm_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_confirm_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_confirm_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_confirm_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_confirm_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_confirm_record failed: unknown result");
  }

  public function query_delivery_record($order_ids, $asc)
  {
    $this->send_query_delivery_record($order_ids, $asc);
    return $this->recv_query_delivery_record();
  }

  public function send_query_delivery_record($order_ids, $asc)
  {
    $args = new \EOS\ElemeOrderService_query_delivery_record_args();
    $args->order_ids = $order_ids;
    $args->asc = $asc;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_delivery_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_delivery_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_delivery_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_delivery_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_delivery_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_delivery_record failed: unknown result");
  }

  public function query_refund_record($order_ids, $asc)
  {
    $this->send_query_refund_record($order_ids, $asc);
    return $this->recv_query_refund_record();
  }

  public function send_query_refund_record($order_ids, $asc)
  {
    $args = new \EOS\ElemeOrderService_query_refund_record_args();
    $args->order_ids = $order_ids;
    $args->asc = $asc;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_refund_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_refund_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_refund_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_refund_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_refund_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_refund_record failed: unknown result");
  }

  public function query_replace_record($order_ids, $asc)
  {
    $this->send_query_replace_record($order_ids, $asc);
    return $this->recv_query_replace_record();
  }

  public function send_query_replace_record($order_ids, $asc)
  {
    $args = new \EOS\ElemeOrderService_query_replace_record_args();
    $args->order_ids = $order_ids;
    $args->asc = $asc;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_replace_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_replace_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_replace_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_replace_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_replace_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_replace_record failed: unknown result");
  }

  public function query_order_event_by_restaurant($last_event_id, $restaurant_id)
  {
    $this->send_query_order_event_by_restaurant($last_event_id, $restaurant_id);
    return $this->recv_query_order_event_by_restaurant();
  }

  public function send_query_order_event_by_restaurant($last_event_id, $restaurant_id)
  {
    $args = new \EOS\ElemeOrderService_query_order_event_by_restaurant_args();
    $args->last_event_id = $last_event_id;
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_order_event_by_restaurant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_order_event_by_restaurant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_order_event_by_restaurant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_order_event_by_restaurant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_order_event_by_restaurant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_order_event_by_restaurant failed: unknown result");
  }

  public function query_dock_order_event_by_dock_corp($last_event_id, $dock_corp_id)
  {
    $this->send_query_dock_order_event_by_dock_corp($last_event_id, $dock_corp_id);
    return $this->recv_query_dock_order_event_by_dock_corp();
  }

  public function send_query_dock_order_event_by_dock_corp($last_event_id, $dock_corp_id)
  {
    $args = new \EOS\ElemeOrderService_query_dock_order_event_by_dock_corp_args();
    $args->last_event_id = $last_event_id;
    $args->dock_corp_id = $dock_corp_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_dock_order_event_by_dock_corp', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_dock_order_event_by_dock_corp', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_dock_order_event_by_dock_corp()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_dock_order_event_by_dock_corp_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_dock_order_event_by_dock_corp_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_dock_order_event_by_dock_corp failed: unknown result");
  }

  public function query_order_record($order_id)
  {
    $this->send_query_order_record($order_id);
    return $this->recv_query_order_record();
  }

  public function send_query_order_record($order_id)
  {
    $args = new \EOS\ElemeOrderService_query_order_record_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_order_record', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_order_record', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_order_record()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_order_record_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_order_record_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_order_record failed: unknown result");
  }

  public function query_order_item_rating(\EOS\TOrderItemRatingQuery $query_struct)
  {
    $this->send_query_order_item_rating($query_struct);
    return $this->recv_query_order_item_rating();
  }

  public function send_query_order_item_rating(\EOS\TOrderItemRatingQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_order_item_rating_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_order_item_rating', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_order_item_rating', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_order_item_rating()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_order_item_rating_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_order_item_rating_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_order_item_rating failed: unknown result");
  }

  public function get_order_item_rating($order_item_id)
  {
    $this->send_get_order_item_rating($order_item_id);
    return $this->recv_get_order_item_rating();
  }

  public function send_get_order_item_rating($order_item_id)
  {
    $args = new \EOS\ElemeOrderService_get_order_item_rating_args();
    $args->order_item_id = $order_item_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_order_item_rating', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_order_item_rating', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_order_item_rating()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_order_item_rating_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_order_item_rating_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_order_item_rating failed: unknown result");
  }

  public function count_order_item_rating(\EOS\TOrderItemRatingQuery $query_struct)
  {
    $this->send_count_order_item_rating($query_struct);
    return $this->recv_count_order_item_rating();
  }

  public function send_count_order_item_rating(\EOS\TOrderItemRatingQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_count_order_item_rating_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_order_item_rating', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_order_item_rating', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_order_item_rating()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_count_order_item_rating_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_count_order_item_rating_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_order_item_rating failed: unknown result");
  }

  public function get_device_order($order_id)
  {
    $this->send_get_device_order($order_id);
    return $this->recv_get_device_order();
  }

  public function send_get_device_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_get_device_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_device_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_device_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_device_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_device_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_device_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_device_order failed: unknown result");
  }

  public function get_dock_order($order_id)
  {
    $this->send_get_dock_order($order_id);
    return $this->recv_get_dock_order();
  }

  public function send_get_dock_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_get_dock_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_dock_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_dock_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_dock_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_dock_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_dock_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_dock_order failed: unknown result");
  }

  public function mget_dock_order($order_ids)
  {
    $this->send_mget_dock_order($order_ids);
    return $this->recv_mget_dock_order();
  }

  public function send_mget_dock_order($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_dock_order_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_dock_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_dock_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_dock_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_dock_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_dock_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_dock_order failed: unknown result");
  }

  public function count_dock_order(\EOS\TDockOrderQuery $query_struct)
  {
    $this->send_count_dock_order($query_struct);
    return $this->recv_count_dock_order();
  }

  public function send_count_dock_order(\EOS\TDockOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_count_dock_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_dock_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_dock_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_dock_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_count_dock_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_count_dock_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_dock_order failed: unknown result");
  }

  public function query_dock_order(\EOS\TDockOrderQuery $query_struct)
  {
    $this->send_query_dock_order($query_struct);
    return $this->recv_query_dock_order();
  }

  public function send_query_dock_order(\EOS\TDockOrderQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_dock_order_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_dock_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_dock_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_dock_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_dock_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_dock_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_dock_order failed: unknown result");
  }

  public function query_auto_pay_activity_stats_result(\EOS\TActivityStatsQuery $query_struct)
  {
    $this->send_query_auto_pay_activity_stats_result($query_struct);
    return $this->recv_query_auto_pay_activity_stats_result();
  }

  public function send_query_auto_pay_activity_stats_result(\EOS\TActivityStatsQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_auto_pay_activity_stats_result_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_auto_pay_activity_stats_result', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_auto_pay_activity_stats_result', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_auto_pay_activity_stats_result()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_auto_pay_activity_stats_result_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_auto_pay_activity_stats_result_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_auto_pay_activity_stats_result failed: unknown result");
  }

  public function query_transitional_activity_stats(\EOS\TActivityStatsQuery $query_struct)
  {
    $this->send_query_transitional_activity_stats($query_struct);
    return $this->recv_query_transitional_activity_stats();
  }

  public function send_query_transitional_activity_stats(\EOS\TActivityStatsQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_transitional_activity_stats_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_transitional_activity_stats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_transitional_activity_stats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_transitional_activity_stats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_transitional_activity_stats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_transitional_activity_stats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_transitional_activity_stats failed: unknown result");
  }

  public function query_activity_stats(\EOS\TActivityStatsQuery $query_struct)
  {
    $this->send_query_activity_stats($query_struct);
    return $this->recv_query_activity_stats();
  }

  public function send_query_activity_stats(\EOS\TActivityStatsQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_activity_stats_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_activity_stats', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_activity_stats', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_activity_stats()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_activity_stats_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_activity_stats_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_activity_stats failed: unknown result");
  }

  public function query_activity_stats_no_subsidy(\EOS\TActivityStatsQuery $query_struct)
  {
    $this->send_query_activity_stats_no_subsidy($query_struct);
    return $this->recv_query_activity_stats_no_subsidy();
  }

  public function send_query_activity_stats_no_subsidy(\EOS\TActivityStatsQuery $query_struct)
  {
    $args = new \EOS\ElemeOrderService_query_activity_stats_no_subsidy_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_activity_stats_no_subsidy', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_activity_stats_no_subsidy', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_activity_stats_no_subsidy()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_activity_stats_no_subsidy_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_activity_stats_no_subsidy_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_activity_stats_no_subsidy failed: unknown result");
  }

  public function mget_activity_subsidy_pay_records($ids)
  {
    $this->send_mget_activity_subsidy_pay_records($ids);
    return $this->recv_mget_activity_subsidy_pay_records();
  }

  public function send_mget_activity_subsidy_pay_records($ids)
  {
    $args = new \EOS\ElemeOrderService_mget_activity_subsidy_pay_records_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_activity_subsidy_pay_records', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_activity_subsidy_pay_records', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_activity_subsidy_pay_records()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_activity_subsidy_pay_records_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_activity_subsidy_pay_records_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_activity_subsidy_pay_records failed: unknown result");
  }

  public function query_activity_subsidy_process_records_by_pay_record_ids($pay_record_ids)
  {
    $this->send_query_activity_subsidy_process_records_by_pay_record_ids($pay_record_ids);
    return $this->recv_query_activity_subsidy_process_records_by_pay_record_ids();
  }

  public function send_query_activity_subsidy_process_records_by_pay_record_ids($pay_record_ids)
  {
    $args = new \EOS\ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_args();
    $args->pay_record_ids = $pay_record_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_activity_subsidy_process_records_by_pay_record_ids', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_activity_subsidy_process_records_by_pay_record_ids', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_activity_subsidy_process_records_by_pay_record_ids()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_activity_subsidy_process_records_by_pay_record_ids failed: unknown result");
  }

  public function get_phone_validation_by_phone($phone)
  {
    $this->send_get_phone_validation_by_phone($phone);
    return $this->recv_get_phone_validation_by_phone();
  }

  public function send_get_phone_validation_by_phone($phone)
  {
    $args = new \EOS\ElemeOrderService_get_phone_validation_by_phone_args();
    $args->phone = $phone;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_phone_validation_by_phone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_phone_validation_by_phone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_phone_validation_by_phone()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_phone_validation_by_phone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_phone_validation_by_phone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    throw new \Exception("get_phone_validation_by_phone failed: unknown result");
  }

  public function mget_order_item_rating_by_order_id($order_ids)
  {
    $this->send_mget_order_item_rating_by_order_id($order_ids);
    return $this->recv_mget_order_item_rating_by_order_id();
  }

  public function send_mget_order_item_rating_by_order_id($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_item_rating_by_order_id_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_item_rating_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_item_rating_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_item_rating_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_item_rating_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_item_rating_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_item_rating_by_order_id failed: unknown result");
  }

  public function mget_order_item_rating($order_item_ids)
  {
    $this->send_mget_order_item_rating($order_item_ids);
    return $this->recv_mget_order_item_rating();
  }

  public function send_mget_order_item_rating($order_item_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_item_rating_args();
    $args->order_item_ids = $order_item_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_item_rating', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_item_rating', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_item_rating()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_item_rating_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_item_rating_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_item_rating failed: unknown result");
  }

  public function mget_order_item_by_order_id($order_ids)
  {
    $this->send_mget_order_item_by_order_id($order_ids);
    return $this->recv_mget_order_item_by_order_id();
  }

  public function send_mget_order_item_by_order_id($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_item_by_order_id_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_item_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_item_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_item_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_item_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_item_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_item_by_order_id failed: unknown result");
  }

  public function mget_order_item_attrs_by_order_id($order_ids)
  {
    $this->send_mget_order_item_attrs_by_order_id($order_ids);
    return $this->recv_mget_order_item_attrs_by_order_id();
  }

  public function send_mget_order_item_attrs_by_order_id($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_item_attrs_by_order_id_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_item_attrs_by_order_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_item_attrs_by_order_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_item_attrs_by_order_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_item_attrs_by_order_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_item_attrs_by_order_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_item_attrs_by_order_id failed: unknown result");
  }

  public function mget_order_item_attrs_by_item_id($order_item_ids)
  {
    $this->send_mget_order_item_attrs_by_item_id($order_item_ids);
    return $this->recv_mget_order_item_attrs_by_item_id();
  }

  public function send_mget_order_item_attrs_by_item_id($order_item_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_item_attrs_by_item_id_args();
    $args->order_item_ids = $order_item_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_item_attrs_by_item_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_item_attrs_by_item_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_item_attrs_by_item_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_item_attrs_by_item_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_item_attrs_by_item_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_item_attrs_by_item_id failed: unknown result");
  }

  public function get_order_item($order_item_id)
  {
    $this->send_get_order_item($order_item_id);
    return $this->recv_get_order_item();
  }

  public function send_get_order_item($order_item_id)
  {
    $args = new \EOS\ElemeOrderService_get_order_item_args();
    $args->order_item_id = $order_item_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_order_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_order_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_order_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_order_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_order_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_order_item failed: unknown result");
  }

  public function get_recently_order_item_by_user_id($user_id)
  {
    $this->send_get_recently_order_item_by_user_id($user_id);
    return $this->recv_get_recently_order_item_by_user_id();
  }

  public function send_get_recently_order_item_by_user_id($user_id)
  {
    $args = new \EOS\ElemeOrderService_get_recently_order_item_by_user_id_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_recently_order_item_by_user_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_recently_order_item_by_user_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_recently_order_item_by_user_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_recently_order_item_by_user_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_recently_order_item_by_user_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_recently_order_item_by_user_id failed: unknown result");
  }

  public function get_recently_order_item_by_session_id($user_id)
  {
    $this->send_get_recently_order_item_by_session_id($user_id);
    return $this->recv_get_recently_order_item_by_session_id();
  }

  public function send_get_recently_order_item_by_session_id($user_id)
  {
    $args = new \EOS\ElemeOrderService_get_recently_order_item_by_session_id_args();
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_recently_order_item_by_session_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_recently_order_item_by_session_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_recently_order_item_by_session_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_recently_order_item_by_session_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_recently_order_item_by_session_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_recently_order_item_by_session_id failed: unknown result");
  }

  public function mget_order_item($ids)
  {
    $this->send_mget_order_item($ids);
    return $this->recv_mget_order_item();
  }

  public function send_mget_order_item($ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_item_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_item', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_item', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_item()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_item_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_item_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_item failed: unknown result");
  }

  public function query_order_invalid_description($order_id)
  {
    $this->send_query_order_invalid_description($order_id);
    return $this->recv_query_order_invalid_description();
  }

  public function send_query_order_invalid_description($order_id)
  {
    $args = new \EOS\ElemeOrderService_query_order_invalid_description_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_order_invalid_description', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_order_invalid_description', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_order_invalid_description()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_order_invalid_description_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_order_invalid_description_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_order_invalid_description failed: unknown result");
  }

  public function mget_order_invalid_description($order_ids)
  {
    $this->send_mget_order_invalid_description($order_ids);
    return $this->recv_mget_order_invalid_description();
  }

  public function send_mget_order_invalid_description($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_order_invalid_description_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_order_invalid_description', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_order_invalid_description', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_order_invalid_description()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_order_invalid_description_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_order_invalid_description_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_order_invalid_description failed: unknown result");
  }

  public function get_dop_user_id($order_id)
  {
    $this->send_get_dop_user_id($order_id);
    return $this->recv_get_dop_user_id();
  }

  public function send_get_dop_user_id($order_id)
  {
    $args = new \EOS\ElemeOrderService_get_dop_user_id_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_dop_user_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_dop_user_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_dop_user_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_dop_user_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_dop_user_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_dop_user_id failed: unknown result");
  }

  public function get_coupon($coupon_id)
  {
    $this->send_get_coupon($coupon_id);
    return $this->recv_get_coupon();
  }

  public function send_get_coupon($coupon_id)
  {
    $args = new \EOS\ElemeOrderService_get_coupon_args();
    $args->coupon_id = $coupon_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_coupon failed: unknown result");
  }

  public function mget_coupon($coupon_ids)
  {
    $this->send_mget_coupon($coupon_ids);
    return $this->recv_mget_coupon();
  }

  public function send_mget_coupon($coupon_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_coupon_args();
    $args->coupon_ids = $coupon_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_coupon', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_coupon', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_coupon()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_coupon_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_coupon_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_coupon failed: unknown result");
  }

  public function get_coupon_by_sn($coupon_sn)
  {
    $this->send_get_coupon_by_sn($coupon_sn);
    return $this->recv_get_coupon_by_sn();
  }

  public function send_get_coupon_by_sn($coupon_sn)
  {
    $args = new \EOS\ElemeOrderService_get_coupon_by_sn_args();
    $args->coupon_sn = $coupon_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_coupon_by_sn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_coupon_by_sn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_coupon_by_sn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_coupon_by_sn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_coupon_by_sn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_coupon_by_sn failed: unknown result");
  }

  public function mget_coupon_by_sn($coupon_sns)
  {
    $this->send_mget_coupon_by_sn($coupon_sns);
    return $this->recv_mget_coupon_by_sn();
  }

  public function send_mget_coupon_by_sn($coupon_sns)
  {
    $args = new \EOS\ElemeOrderService_mget_coupon_by_sn_args();
    $args->coupon_sns = $coupon_sns;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_coupon_by_sn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_coupon_by_sn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_coupon_by_sn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_coupon_by_sn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_coupon_by_sn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_coupon_by_sn failed: unknown result");
  }

  public function mget_coupon_batch($batch_ids)
  {
    $this->send_mget_coupon_batch($batch_ids);
    return $this->recv_mget_coupon_batch();
  }

  public function send_mget_coupon_batch($batch_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_coupon_batch_args();
    $args->batch_ids = $batch_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_coupon_batch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_coupon_batch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_coupon_batch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_coupon_batch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_coupon_batch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_coupon_batch failed: unknown result");
  }

  public function get_coupon_batch_by_sn($batch_sn)
  {
    $this->send_get_coupon_batch_by_sn($batch_sn);
    return $this->recv_get_coupon_batch_by_sn();
  }

  public function send_get_coupon_batch_by_sn($batch_sn)
  {
    $args = new \EOS\ElemeOrderService_get_coupon_batch_by_sn_args();
    $args->batch_sn = $batch_sn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_coupon_batch_by_sn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_coupon_batch_by_sn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_coupon_batch_by_sn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_coupon_batch_by_sn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_coupon_batch_by_sn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_coupon_batch_by_sn failed: unknown result");
  }

  public function query_phone_blacklist($phones)
  {
    $this->send_query_phone_blacklist($phones);
    return $this->recv_query_phone_blacklist();
  }

  public function send_query_phone_blacklist($phones)
  {
    $args = new \EOS\ElemeOrderService_query_phone_blacklist_args();
    $args->phones = $phones;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_phone_blacklist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_phone_blacklist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_phone_blacklist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_phone_blacklist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_phone_blacklist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_phone_blacklist failed: unknown result");
  }

  public function query_phone_whitelist($phones)
  {
    $this->send_query_phone_whitelist($phones);
    return $this->recv_query_phone_whitelist();
  }

  public function send_query_phone_whitelist($phones)
  {
    $args = new \EOS\ElemeOrderService_query_phone_whitelist_args();
    $args->phones = $phones;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_phone_whitelist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_phone_whitelist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_phone_whitelist()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_query_phone_whitelist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_query_phone_whitelist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_phone_whitelist failed: unknown result");
  }

  public function mget_cancel_description($order_ids)
  {
    $this->send_mget_cancel_description($order_ids);
    return $this->recv_mget_cancel_description();
  }

  public function send_mget_cancel_description($order_ids)
  {
    $args = new \EOS\ElemeOrderService_mget_cancel_description_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_cancel_description', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_cancel_description', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_cancel_description()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_mget_cancel_description_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_mget_cancel_description_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_cancel_description failed: unknown result");
  }

  public function get_promotion_activity_content($order_id, $type_code)
  {
    $this->send_get_promotion_activity_content($order_id, $type_code);
    return $this->recv_get_promotion_activity_content();
  }

  public function send_get_promotion_activity_content($order_id, $type_code)
  {
    $args = new \EOS\ElemeOrderService_get_promotion_activity_content_args();
    $args->order_id = $order_id;
    $args->type_code = $type_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_promotion_activity_content', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_promotion_activity_content', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_promotion_activity_content()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_promotion_activity_content_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_promotion_activity_content_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_promotion_activity_content failed: unknown result");
  }

  public function get_auto_cancel_order_restaurants()
  {
    $this->send_get_auto_cancel_order_restaurants();
    return $this->recv_get_auto_cancel_order_restaurants();
  }

  public function send_get_auto_cancel_order_restaurants()
  {
    $args = new \EOS\ElemeOrderService_get_auto_cancel_order_restaurants_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_auto_cancel_order_restaurants', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_auto_cancel_order_restaurants', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_auto_cancel_order_restaurants()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_get_auto_cancel_order_restaurants_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_get_auto_cancel_order_restaurants_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_auto_cancel_order_restaurants failed: unknown result");
  }

  public function signal_post_process_order($order_process_record_id)
  {
    $this->send_signal_post_process_order($order_process_record_id);
    $this->recv_signal_post_process_order();
  }

  public function send_signal_post_process_order($order_process_record_id)
  {
    $args = new \EOS\ElemeOrderService_signal_post_process_order_args();
    $args->order_process_record_id = $order_process_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_post_process_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_post_process_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_post_process_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_signal_post_process_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_signal_post_process_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_pending_make_order($order_id)
  {
    $this->send_signal_pending_make_order($order_id);
    $this->recv_signal_pending_make_order();
  }

  public function send_signal_pending_make_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_signal_pending_make_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_pending_make_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_pending_make_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_pending_make_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_signal_pending_make_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_signal_pending_make_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_post_make_order($order_id)
  {
    $this->send_signal_post_make_order($order_id);
    $this->recv_signal_post_make_order();
  }

  public function send_signal_post_make_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_signal_post_make_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_post_make_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_post_make_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_post_make_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_signal_post_make_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_signal_post_make_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_post_replace_order($order_replace_record_id)
  {
    $this->send_signal_post_replace_order($order_replace_record_id);
    $this->recv_signal_post_replace_order();
  }

  public function send_signal_post_replace_order($order_replace_record_id)
  {
    $args = new \EOS\ElemeOrderService_signal_post_replace_order_args();
    $args->order_replace_record_id = $order_replace_record_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_post_replace_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_post_replace_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_post_replace_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_signal_post_replace_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_signal_post_replace_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function signal_update_eleme_order($order_ids)
  {
    $this->send_signal_update_eleme_order($order_ids);
    $this->recv_signal_update_eleme_order();
  }

  public function send_signal_update_eleme_order($order_ids)
  {
    $args = new \EOS\ElemeOrderService_signal_update_eleme_order_args();
    $args->order_ids = $order_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_eleme_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_eleme_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_eleme_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_signal_update_eleme_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_signal_update_eleme_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

  public function move_dop_order($order_id)
  {
    $this->send_move_dop_order($order_id);
    $this->recv_move_dop_order();
  }

  public function send_move_dop_order($order_id)
  {
    $args = new \EOS\ElemeOrderService_move_dop_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'move_dop_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('move_dop_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_move_dop_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\EOS\ElemeOrderService_move_dop_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \EOS\ElemeOrderService_move_dop_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unknown_exception !== null) {
      throw $result->unknown_exception;
    }
    return;
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ElemeOrderService_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeOrderService_ping_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_ping_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_ping_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_ping_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_ping_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_update_cache_for_replicator_args extends TBase {
  static $_TSPEC;

  public $name = null;
  public $ids = null;
  public $type_ = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        3 => array(
          'var' => 'type_',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_update_cache_for_replicator_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_update_cache_for_replicator_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_update_cache_for_replicator_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_update_cache_for_replicator_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_update_cache_for_replicator_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_update_cache_for_replicator_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_update_cache_for_replicator_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_clear_cache_args extends TBase {
  static $_TSPEC;

  public $api_name = null;
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_clear_cache_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_clear_cache_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_clear_cache_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_clear_cache_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_clear_cache_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_clear_cache_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_clear_cache_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_update_order_delivery_info_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $delivery_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'delivery_info',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_update_order_delivery_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_update_order_delivery_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_update_order_delivery_info_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_update_order_delivery_info_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_update_order_delivery_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_update_order_delivery_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_update_order_delivery_info_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_pretty_description_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_pretty_description_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_pretty_description_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_pretty_description_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_pretty_description_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_pretty_description_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_pretty_description_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_pretty_description_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_make_order_args extends TBase {
  static $_TSPEC;

  public $order_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderStruct',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_make_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_make_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_make_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_make_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_make_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_make_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_make_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_make_order_args extends TBase {
  static $_TSPEC;

  public $order_struct = null;
  public $device_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderStruct',
          ),
        2 => array(
          'var' => 'device_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TDeviceStruct',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_make_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_make_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_make_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_make_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_make_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_make_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_make_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cancel_order_by_user_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cancel_order_by_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cancel_order_by_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cancel_order_by_user_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cancel_order_by_user_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cancel_order_by_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cancel_order_by_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cancel_order_by_user_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cancel_order_by_annon_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $session_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cancel_order_by_annon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cancel_order_by_annon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cancel_order_by_annon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cancel_order_by_annon_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cancel_order_by_annon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cancel_order_by_annon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cancel_order_by_annon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_can_user_cancel_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_can_user_cancel_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_can_user_cancel_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_can_user_cancel_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_can_user_cancel_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCOrderCancelResult',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_can_user_cancel_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_can_user_cancel_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_can_user_cancel_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_can_annon_cancel_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $session_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_can_annon_cancel_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_can_annon_cancel_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_can_annon_cancel_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_can_annon_cancel_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCOrderCancelResult',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_can_annon_cancel_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_can_annon_cancel_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_can_annon_cancel_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_cancel_reason_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_cancel_reason_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_cancel_reason_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_cancel_reason_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_cancel_reason_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_cancel_reason_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_cancel_reason_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_cancel_reason_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_order_env_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_agent = null;
  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_agent',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_order_env_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_order_env_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_order_env_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_order_env_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_order_env_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_order_env_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_order_env_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_device_order_limit_args extends TBase {
  static $_TSPEC;

  public $device_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_device_order_limit_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_device_order_limit_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_device_order_limit_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_device_order_limit_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_device_order_limit_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_device_order_limit_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_device_order_limit_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_replace_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $cart_id = null;
  public $admin_user_id = null;
  public $replace_type = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'admin_user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'replace_type',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_replace_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_replace_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_replace_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_replace_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_replace_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_replace_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_replace_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_make_napos_order_args extends TBase {
  static $_TSPEC;

  public $napos_order_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'napos_order_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TNaposOrderStruct',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_make_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_make_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_make_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_make_napos_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_make_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_make_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_make_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_order_item_args extends TBase {
  static $_TSPEC;

  public $order_item_id = null;
  public $user_id = null;
  public $rating_value = null;
  public $rating_text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rating_value',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'rating_text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_order_item_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_order_item_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_order_item_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_order_item_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_order_item_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_order_item_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_order_item_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_order_item2_args extends TBase {
  static $_TSPEC;

  public $order_item_id = null;
  public $user_id = null;
  public $rating_value = null;
  public $rating_text = null;
  public $image_hash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rating_value',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'rating_text',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'image_hash',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_order_item2_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_order_item2_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_order_item2_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_order_item2_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_order_item2_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_order_item2_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_order_item2_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_order_item_text_args extends TBase {
  static $_TSPEC;

  public $order_item_id = null;
  public $user_id = null;
  public $rating_text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rating_text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_order_item_text_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_order_item_text_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_order_item_text_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_order_item_text_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_order_item_text_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_order_item_text_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_order_item_text_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_deliver_time_spent_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;
  public $time_spent = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'time_spent',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_deliver_time_spent_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_deliver_time_spent_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_deliver_time_spent_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_deliver_time_spent_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_deliver_time_spent_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_deliver_time_spent_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_deliver_time_spent_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_service_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;
  public $rate_value = null;
  public $rating_text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'rate_value',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'rating_text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_service_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_service_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_service_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_rate_service_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_rate_service_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_rate_service_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_rate_service_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_status_translation_args extends TBase {
  static $_TSPEC;

  public $from_status = null;
  public $to_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_status',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_status_translation_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_status_translation_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_status_translation_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_status_translation_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_status_translation_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_status_translation_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_status_translation_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_refund_status_translation_args extends TBase {
  static $_TSPEC;

  public $from_status = null;
  public $to_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_status',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_refund_status_translation_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_refund_status_translation_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_refund_status_translation_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_refund_status_translation_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_refund_status_translation_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_refund_status_translation_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_refund_status_translation_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_session_order_args extends TBase {
  static $_TSPEC;

  public $session_id = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_session_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_session_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_session_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_session_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_session_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_session_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_session_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_dock_order_args extends TBase {
  static $_TSPEC;

  public $dock_order_id = null;
  public $save_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dock_order_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'save_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TDockOrder',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_dock_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_dock_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_dock_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_dock_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_dock_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_dock_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_dock_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_restaurant_list_order_args extends TBase {
  static $_TSPEC;

  public $restaurant_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_list',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_restaurant_list_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_restaurant_list_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_restaurant_list_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_restaurant_list_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_restaurant_list_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_restaurant_list_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_restaurant_list_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_old_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_old_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_old_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_old_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_old_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_old_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_old_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_old_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_claim_order_args extends TBase {
  static $_TSPEC;

  public $session_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_claim_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_claim_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_claim_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_claim_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_claim_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_claim_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_claim_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_claim_online_paid_order_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_claim_online_paid_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_claim_online_paid_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_claim_online_paid_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_claim_online_paid_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_claim_online_paid_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_claim_online_paid_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_claim_online_paid_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_olpayment_discount_saturated_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $phone = null;
  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_olpayment_discount_saturated_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_olpayment_discount_saturated_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_olpayment_discount_saturated_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_olpayment_discount_saturated_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_olpayment_discount_saturated_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_olpayment_discount_saturated_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_olpayment_discount_saturated_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_olpayment_discount_amount_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $phone = null;
  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_olpayment_discount_amount_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_olpayment_discount_amount_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_olpayment_discount_amount_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_olpayment_discount_amount_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_olpayment_discount_amount_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_olpayment_discount_amount_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_olpayment_discount_amount_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_coupon_args extends TBase {
  static $_TSPEC;

  public $batch_sn = null;
  public $remain = null;
  public $deadline = null;
  public $remarks = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'remain',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'deadline',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'remarks',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_coupon_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCoupon',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_coupon_args extends TBase {
  static $_TSPEC;

  public $id = null;
  public $sn = null;
  public $batch_sn = null;
  public $remain = null;
  public $deadline = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'sn',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'remain',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'deadline',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_coupon_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCoupon',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_batch_generate_coupon_args extends TBase {
  static $_TSPEC;

  public $batch_sn = null;
  public $remain = null;
  public $deadline = null;
  public $remarks = null;
  public $count = null;
  public $coupon_sn_length = null;
  public $use_alnum = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'remain',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'deadline',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'remarks',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'coupon_sn_length',
          'type' => TType::I16,
          ),
        7 => array(
          'var' => 'use_alnum',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_batch_generate_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_batch_generate_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_batch_generate_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_batch_generate_coupon_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_batch_generate_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_batch_generate_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_batch_generate_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_order_invalid_description_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $type_code = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type_code',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_order_invalid_description_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_order_invalid_description_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_order_invalid_description_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_save_order_invalid_description_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_save_order_invalid_description_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_save_order_invalid_description_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_save_order_invalid_description_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_remove_order_invalid_description_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_remove_order_invalid_description_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_remove_order_invalid_description_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_remove_order_invalid_description_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_remove_order_invalid_description_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_remove_order_invalid_description_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_remove_order_invalid_description_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_remove_order_invalid_description_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_set_order_phone_confirmed_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $is_phone_confirmed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'is_phone_confirmed',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_set_order_phone_confirmed_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_set_order_phone_confirmed_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_set_order_phone_confirmed_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_set_order_phone_confirmed_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_set_order_phone_confirmed_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_set_order_phone_confirmed_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_set_order_phone_confirmed_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_new_user_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $phones = null;
  public $is_strict = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'phones',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'is_strict',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_new_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_new_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_new_user_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_new_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_new_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_new_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_new_user_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_global_check_new_user_args extends TBase {
  static $_TSPEC;

  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_global_check_new_user_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_global_check_new_user_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_global_check_new_user_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_global_check_new_user_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_global_check_new_user_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_global_check_new_user_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_global_check_new_user_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_phone_to_whitelist_args extends TBase {
  static $_TSPEC;

  public $phone = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_phone_to_whitelist_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_phone_to_whitelist_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_phone_to_whitelist_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_phone_to_whitelist_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_phone_to_whitelist_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_phone_to_whitelist_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_phone_to_whitelist_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_phone_to_blacklist_args extends TBase {
  static $_TSPEC;

  public $phone = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_phone_to_blacklist_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_phone_to_blacklist_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_phone_to_blacklist_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_phone_to_blacklist_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_phone_to_blacklist_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_phone_to_blacklist_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_phone_to_blacklist_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_phones_in_blacklist_args extends TBase {
  static $_TSPEC;

  public $phones = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phones',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_phones_in_blacklist_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_phones_in_blacklist_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_phones_in_blacklist_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_phones_in_blacklist_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_phones_in_blacklist_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_phones_in_blacklist_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_phones_in_blacklist_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_phones_in_whitelist_args extends TBase {
  static $_TSPEC;

  public $phones = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phones',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_phones_in_whitelist_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_phones_in_whitelist_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_phones_in_whitelist_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_phones_in_whitelist_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_phones_in_whitelist_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_phones_in_whitelist_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_phones_in_whitelist_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_ip_to_blacklist_args extends TBase {
  static $_TSPEC;

  public $ip = null;
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_ip_to_blacklist_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_ip_to_blacklist_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_ip_to_blacklist_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_ip_to_blacklist_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_ip_to_blacklist_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_ip_to_blacklist_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_ip_to_blacklist_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_complaint_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $order_id = null;
  public $type = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_complaint_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_complaint_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_complaint_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_complaint_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_complaint_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_complaint_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_complaint_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_order_complaint_existed_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_order_complaint_existed_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_order_complaint_existed_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_order_complaint_existed_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_order_complaint_existed_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_order_complaint_existed_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_order_complaint_existed_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_order_complaint_existed_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_search_restaurant_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TRestaurantOrderSearchQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_search_restaurant_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_search_restaurant_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_search_restaurant_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_search_restaurant_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_search_restaurant_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_search_restaurant_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_search_restaurant_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_order_count_all_args extends TBase {
  static $_TSPEC;

  public $dop_user_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dop_user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_order_count_all_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_order_count_all_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_order_count_all_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_order_count_all_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCWalleOrderCount',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_order_count_all_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_order_count_all_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_order_count_all_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_tds_order_count_all_args extends TBase {
  static $_TSPEC;

  public $dop_user_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dop_user_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_tds_order_count_all_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_tds_order_count_all_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_tds_order_count_all_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_tds_order_count_all_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_tds_order_count_all_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_tds_order_count_all_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_tds_order_count_all_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_filter_order_ids_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleFilterOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_filter_order_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_filter_order_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_filter_order_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_filter_order_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_filter_order_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_filter_order_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_filter_order_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_order_ids_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_order_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_order_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_order_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_order_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_order_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_order_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_order_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_suspicious_order_ids_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleSuspiciousOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_suspicious_order_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_suspicious_order_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_suspicious_order_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_suspicious_order_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_suspicious_order_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_suspicious_order_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_suspicious_order_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_coupon_order_ids_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleCouponOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_coupon_order_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_coupon_order_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_coupon_order_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_coupon_order_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_coupon_order_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_coupon_order_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_coupon_order_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_process_order_ids_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleProcessOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_process_order_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_process_order_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_process_order_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_process_order_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_process_order_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_process_order_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_process_order_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_batch_generate_coupon_args extends TBase {
  static $_TSPEC;

  public $batch_sn = null;
  public $num = null;
  public $deadline = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'num',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'deadline',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_batch_generate_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_batch_generate_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_batch_generate_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_batch_generate_coupon_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_batch_generate_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_batch_generate_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_batch_generate_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_count_order_item_rating_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleOrderItemRatingQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_count_order_item_rating_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_count_order_item_rating_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_count_order_item_rating_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_count_order_item_rating_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_count_order_item_rating_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_count_order_item_rating_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_count_order_item_rating_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_query_order_item_rating_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleOrderItemRatingQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_query_order_item_rating_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_query_order_item_rating_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_query_order_item_rating_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_query_order_item_rating_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCWalleOrderItemRating',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_query_order_item_rating_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_query_order_item_rating_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_query_order_item_rating_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_set_order_item_rating_valid_args extends TBase {
  static $_TSPEC;

  public $order_item_id = null;
  public $is_valid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'is_valid',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_set_order_item_rating_valid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_set_order_item_rating_valid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_set_order_item_rating_valid_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_set_order_item_rating_valid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_set_order_item_rating_valid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_set_order_item_rating_valid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_set_order_item_rating_valid_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_recent_orders_args extends TBase {
  static $_TSPEC;

  public $username = null;
  public $phone = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_recent_orders_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_recent_orders_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_recent_orders_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_recent_orders_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCWalleUserOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_recent_orders_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_recent_orders_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_recent_orders_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_related_orders_args extends TBase {
  static $_TSPEC;

  public $order_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_related_orders_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_related_orders_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_related_orders_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_related_orders_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCWalleUserOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_related_orders_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_related_orders_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_related_orders_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_query_user_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleUserOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_query_user_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_query_user_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_query_user_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_query_user_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCWalleUserOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_query_user_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_query_user_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_query_user_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_count_user_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TWalleUserOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_count_user_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_count_user_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_count_user_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_count_user_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_count_user_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_count_user_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_count_user_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_confirm_received_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_confirm_received_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_confirm_received_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_confirm_received_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_confirm_received_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_confirm_received_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_confirm_received_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_confirm_received_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_add_device_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $device_id = null;
  public $third_user_id = null;
  public $session_id = null;
  public $eleme_device_id = null;
  public $channel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'device_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'third_user_id',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'eleme_device_id',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'channel',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_add_device_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_add_device_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_add_device_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_add_device_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_add_device_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_add_device_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_add_device_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_order_check_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_order_check_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_order_check_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_order_check_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mobile_order_check_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I16,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mobile_order_check_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mobile_order_check_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mobile_order_check_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_init_args extends TBase {
  static $_TSPEC;

  public $order_category_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_category_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_init_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_init_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_init_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_init_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_init_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_init_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_init_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_init_with_come_from_args extends TBase {
  static $_TSPEC;

  public $order_category_id = null;
  public $come_from = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_category_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'come_from',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_init_with_come_from_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_init_with_come_from_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_init_with_come_from_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_init_with_come_from_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_init_with_come_from_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_init_with_come_from_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_init_with_come_from_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_source_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $source = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'source',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_source_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_source_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_source_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_source_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_source_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_source_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_source_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_rebuy_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_rebuy_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_rebuy_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_rebuy_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_rebuy_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_rebuy_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_rebuy_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_rebuy_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_phone_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_phone_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_phone_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_phone_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_phone_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_phone_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_phone_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_phone_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_food_and_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_food_and_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_food_and_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_food_and_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_food_and_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_food_and_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_food_and_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_food_and_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_foods_and_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $foods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'foods',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCartFood',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_foods_and_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_foods_and_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_foods_and_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_foods_and_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_foods_and_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_foods_and_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_foods_and_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_food_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_food_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_food_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_food_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_food_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_food_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_food_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_food_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_coupon_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $coupon_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'coupon_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_coupon_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_coupon_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $coupon_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'coupon_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_coupon_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_food_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_food_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_food_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_food_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_food_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_food_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_food_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_food_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_food_and_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_food_and_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_food_and_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_food_and_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_food_and_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_food_and_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_food_and_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_food_and_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_food_quantity_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $food_id = null;
  public $quantity = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'quantity',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_food_quantity_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_food_quantity_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_food_quantity_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_food_quantity_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_food_quantity_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_food_quantity_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_food_quantity_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_food_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_food_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_food_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_food_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_food_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_food_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_food_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_food_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_food_and_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_food_and_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_food_and_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_food_and_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_food_and_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_food_and_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_food_and_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_food_and_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_foods_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $food_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'food_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_foods_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_foods_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_foods_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_foods_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_foods_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_foods_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_foods_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_foods_and_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $food_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'food_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_foods_and_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_foods_and_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_foods_and_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_foods_and_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_foods_and_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_foods_and_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_foods_and_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_group_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_group_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_group_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_group_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_group_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_group_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_group_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_group_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_group_and_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_id',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_group_and_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_group_and_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_group_and_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_group_and_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_group_and_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_group_and_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_group_and_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_phone_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $phone = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_phone_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_phone_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_phone_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_phone_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_phone_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_phone_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_phone_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_is_online_paid_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $is_online_paid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'is_online_paid',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_is_online_paid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_is_online_paid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_is_online_paid_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_is_online_paid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_is_online_paid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_is_online_paid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_is_online_paid_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_is_online_paid_and_get_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $is_online_paid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'is_online_paid',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_is_online_paid_and_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_is_online_paid_and_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_is_online_paid_and_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_is_online_paid_and_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_is_online_paid_and_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_is_online_paid_and_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_is_online_paid_and_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_cancel_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_cancel_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_cancel_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_cancel_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_cancel_pindan_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_cancel_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_cancel_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_cancel_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_food_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $owner = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'owner',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_food_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_food_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_food_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_add_food_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_add_food_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_add_food_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_add_food_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_food_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $owner = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'owner',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_food_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_food_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_food_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_food_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_food_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_food_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_food_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_food_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $owner = null;
  public $food_id = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'owner',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_food_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_food_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_food_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_remove_food_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_remove_food_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_remove_food_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_remove_food_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_food_quantity_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $owner = null;
  public $food_id = null;
  public $quantity = null;
  public $parent_food_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'owner',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'quantity',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'parent_food_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_food_quantity_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_food_quantity_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_food_quantity_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_set_food_quantity_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_set_food_quantity_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_set_food_quantity_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_set_food_quantity_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_batch_add_food_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $group_json = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'group_json',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_batch_add_food_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_batch_add_food_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_batch_add_food_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_batch_add_food_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_batch_add_food_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_batch_add_food_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_batch_add_food_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_group_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;
  public $owner = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'owner',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_group_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_group_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_group_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_clear_group_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_clear_group_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_clear_group_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_clear_group_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_lock_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_lock_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_lock_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_lock_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_lock_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_lock_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_lock_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_lock_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_unlock_for_pindan_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_unlock_for_pindan_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_unlock_for_pindan_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_unlock_for_pindan_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_unlock_for_pindan_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_unlock_for_pindan_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_unlock_for_pindan_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_unlock_for_pindan_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_increase_pindan_num_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_increase_pindan_num_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_increase_pindan_num_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_increase_pindan_num_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_increase_pindan_num_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_increase_pindan_num_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_increase_pindan_num_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_increase_pindan_num_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_pindan_num_args extends TBase {
  static $_TSPEC;

  public $cart_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cart_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_pindan_num_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_pindan_num_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_pindan_num_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_decrease_pindan_num_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_decrease_pindan_num_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_decrease_pindan_num_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_decrease_pindan_num_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_napos_add_food_args extends TBase {
  static $_TSPEC;

  public $order_category_id = null;
  public $food_quantity_map = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_category_id',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'food_quantity_map',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I16,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I16,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_napos_add_food_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_napos_add_food_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_napos_add_food_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_cart_napos_add_food_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_cart_napos_add_food_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_cart_napos_add_food_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_cart_napos_add_food_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_admin_process_delivery_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_delivery_status = null;
  public $user_id = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_delivery_status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_admin_process_delivery_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_admin_process_delivery_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_admin_process_delivery_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_admin_process_delivery_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_admin_process_delivery_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_admin_process_delivery_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_admin_process_delivery_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_eleme_process_delivery_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_delivery_status = null;
  public $user_id = null;
  public $process_group = null;
  public $remark = null;
  public $type_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_delivery_status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'process_group',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type_code',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_eleme_process_delivery_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_eleme_process_delivery_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_eleme_process_delivery_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_eleme_process_delivery_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_eleme_process_delivery_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_eleme_process_delivery_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_eleme_process_delivery_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_delivery_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_delivery_status = null;
  public $user_id = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_delivery_status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_delivery_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_delivery_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_delivery_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_delivery_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_delivery_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_delivery_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_delivery_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_delivery_new_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_delivery_status = null;
  public $user_id = null;
  public $process_group = null;
  public $remark = null;
  public $type_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_delivery_status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'process_group',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type_code',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_delivery_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_delivery_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_delivery_new_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_delivery_new_result extends TBase {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_delivery_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_delivery_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_delivery_new_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_openapi_process_delivery_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_delivery_status = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_delivery_status',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_openapi_process_delivery_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_openapi_process_delivery_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_openapi_process_delivery_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_openapi_process_delivery_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_openapi_process_delivery_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_openapi_process_delivery_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_openapi_process_delivery_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_force_invalid_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_force_invalid_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_force_invalid_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_force_invalid_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_force_invalid_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_force_invalid_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_force_invalid_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_force_invalid_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_eleme_process_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_status = null;
  public $user_id = null;
  public $process_group = null;
  public $remark = null;
  public $type_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'process_group',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type_code',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_eleme_process_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_eleme_process_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_eleme_process_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_eleme_process_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_eleme_process_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_eleme_process_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_eleme_process_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_status = null;
  public $user_id = null;
  public $process_group = null;
  public $remark = null;
  public $type_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'process_group',
          'type' => TType::I16,
          ),
        5 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'type_code',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_set_order_invalid_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;
  public $type_code = null;
  public $remark = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'type_code',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'remark',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_set_order_invalid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_set_order_invalid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_set_order_invalid_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_set_order_invalid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_set_order_invalid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_set_order_invalid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_set_order_invalid_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_napos_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_status = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_process_napos_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_process_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_process_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_process_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_openapi_process_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $to_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_openapi_process_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_openapi_process_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_openapi_process_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_openapi_process_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_openapi_process_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_openapi_process_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_openapi_process_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_apply_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $unique_id = null;
  public $content = null;
  public $resource = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'resource',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_apply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_apply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_apply_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_apply_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_apply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_apply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_apply_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_cancel_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $unique_id = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_cancel_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_cancel_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_cancel_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_cancel_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_cancel_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_cancel_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_cancel_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_overrule_by_admin_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $unique_id = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_overrule_by_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_overrule_by_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_overrule_by_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_overrule_by_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_overrule_by_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_overrule_by_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_overrule_by_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_reply_args extends TBase {
  static $_TSPEC;

  public $rst_user_id = null;
  public $unique_id = null;
  public $resource = null;
  public $explanation = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rst_user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'resource',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'explanation',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_reply_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_reply_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_reply_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_reply_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_reply_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_reply_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_reply_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_arbitrate_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $unique_id = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_arbitrate_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_arbitrate_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_arbitrate_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_arbitrate_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_arbitrate_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_arbitrate_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_arbitrate_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_approve_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $unique_id = null;
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_approve_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_approve_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_approve_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_approve_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_approve_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_approve_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_approve_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_approve_by_admin_args extends TBase {
  static $_TSPEC;

  public $user_id = null;
  public $unique_id = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_approve_by_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_approve_by_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_approve_by_admin_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_approve_by_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_approve_by_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_approve_by_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_approve_by_admin_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_auto_success_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_auto_success_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_auto_success_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_auto_success_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_auto_success_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_auto_success_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_auto_success_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_auto_success_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_auto_fail_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_auto_fail_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_auto_fail_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_auto_fail_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_refund_auto_fail_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_refund_auto_fail_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_refund_auto_fail_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_refund_auto_fail_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_settle_up_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_settle_up_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_settle_up_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_settle_up_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_settle_up_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_settle_up_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_settle_up_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_settle_up_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_settle_after_make_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_settle_after_make_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_settle_after_make_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_settle_after_make_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_settle_after_make_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_settle_after_make_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_settle_after_make_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_settle_after_make_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_settle_after_invalid_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_settle_after_invalid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_settle_after_invalid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_settle_after_invalid_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_settle_after_invalid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_settle_after_invalid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_settle_after_invalid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_settle_after_invalid_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_count_coupon_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCouponQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_count_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_count_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_count_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_count_coupon_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_count_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_count_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_count_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_query_coupon_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCouponQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_query_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_query_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_query_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_query_coupon_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCoupon',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_query_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_query_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_query_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_today_summary_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $require_full = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'require_full',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_today_summary_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_today_summary_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_today_summary_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_today_summary_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_today_summary_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_today_summary_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_today_summary_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_search_eleme_order_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $keyword = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_search_eleme_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_search_eleme_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_search_eleme_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_napos_search_eleme_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_napos_search_eleme_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_napos_search_eleme_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_napos_search_eleme_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_coupon_total_amount_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_coupon_total_amount_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_coupon_total_amount_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_coupon_total_amount_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_walle_get_coupon_total_amount_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_walle_get_coupon_total_amount_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_walle_get_coupon_total_amount_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_walle_get_coupon_total_amount_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_dms_mget_process_info_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_dms_mget_process_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_dms_mget_process_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_dms_mget_process_info_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_dms_mget_process_info_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCDMSOrderProcessInfo',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_dms_mget_process_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_dms_mget_process_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_dms_mget_process_info_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_dms_mget_dispatch_info_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_dms_mget_dispatch_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_dms_mget_dispatch_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_dms_mget_dispatch_info_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_dms_mget_dispatch_info_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCDMSOrderDispatchInfo',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_dms_mget_dispatch_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_dms_mget_dispatch_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_dms_mget_dispatch_info_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_mcount_order_args extends TBase {
  static $_TSPEC;

  public $restaurant_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_mcount_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_mcount_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_mcount_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_mcount_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_mcount_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_mcount_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_mcount_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_count_order_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_count_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_count_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_count_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_count_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_count_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_count_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_count_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_count_order_add_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $order_id = null;
  public $created_at = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'created_at',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_count_order_add_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_count_order_add_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_count_order_add_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_count_order_add_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_count_order_add_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_count_order_add_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_count_order_add_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_count_order_rem_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_count_order_rem_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_count_order_rem_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_count_order_rem_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_redis_count_order_rem_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_redis_count_order_rem_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_redis_count_order_rem_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_redis_count_order_rem_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_recharge_tpd_vip_mobile_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $months = null;
  public $days = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'months',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'days',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_recharge_tpd_vip_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_recharge_tpd_vip_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_recharge_tpd_vip_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_recharge_tpd_vip_mobile_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_recharge_tpd_vip_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_recharge_tpd_vip_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_recharge_tpd_vip_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_set_tpd_vip_mobile_invalid_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_set_tpd_vip_mobile_invalid_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_set_tpd_vip_mobile_invalid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_set_tpd_vip_mobile_invalid_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_set_tpd_vip_mobile_invalid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_set_tpd_vip_mobile_invalid_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_set_tpd_vip_mobile_invalid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_set_tpd_vip_mobile_invalid_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_tpd_vip_mobile_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_tpd_vip_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_tpd_vip_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_tpd_vip_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_tpd_vip_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TTpdVipMobile',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_tpd_vip_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_tpd_vip_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_tpd_vip_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_expired_tpd_vip_mobile_args extends TBase {
  static $_TSPEC;

  public $days = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'days',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_expired_tpd_vip_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_expired_tpd_vip_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_expired_tpd_vip_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_expired_tpd_vip_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TTpdVipMobile',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_expired_tpd_vip_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_expired_tpd_vip_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_expired_tpd_vip_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_tpd_vip_mobile_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TTpdVipMobileQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_tpd_vip_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_tpd_vip_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_tpd_vip_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_tpd_vip_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TTpdVipMobile',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_tpd_vip_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_tpd_vip_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_tpd_vip_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_tpd_vip_mobile_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TTpdVipMobileQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_tpd_vip_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_tpd_vip_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_tpd_vip_mobile_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_tpd_vip_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_tpd_vip_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_tpd_vip_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_tpd_vip_mobile_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_back_up_mysql_task_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeOrderService_back_up_mysql_task_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_back_up_mysql_task_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_back_up_mysql_task_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_back_up_mysql_task_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_back_up_mysql_task_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_back_up_mysql_task_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_back_up_mysql_task_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_clean_timeout_mysql_task_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeOrderService_clean_timeout_mysql_task_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_clean_timeout_mysql_task_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_clean_timeout_mysql_task_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_clean_timeout_mysql_task_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_clean_timeout_mysql_task_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_clean_timeout_mysql_task_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_clean_timeout_mysql_task_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_order_item_attribute_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_order_item_attribute_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_order_item_attribute_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_order_item_attribute_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_order_item_attribute_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_order_item_attribute_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_order_item_attribute_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_order_item_attribute_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_make_napos_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_make_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_make_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_make_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_make_napos_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_make_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_make_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_make_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_pay_for_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_pay_for_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_pay_for_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_pay_for_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_pay_for_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_pay_for_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_pay_for_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_pay_for_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_pay_success_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_pay_success_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_pay_success_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_pay_success_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_pay_success_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_pay_success_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_pay_success_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_pay_success_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_pay_fail_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_pay_fail_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_pay_fail_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_pay_fail_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_post_pay_fail_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_post_pay_fail_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_post_pay_fail_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_post_pay_fail_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_claim_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_claim_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_claim_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_claim_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_claim_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_claim_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_claim_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_claim_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_source_id_args extends TBase {
  static $_TSPEC;

  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_source_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_source_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_source_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_source_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_source_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_source_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_source_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_dispatch_order_to_sev_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_dispatch_order_to_sev_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_dispatch_order_to_sev_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_dispatch_order_to_sev_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_dispatch_order_to_sev_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_dispatch_order_to_sev_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_dispatch_order_to_sev_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_dispatch_order_to_sev_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_source_name_args extends TBase {
  static $_TSPEC;

  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_source_name_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_source_name_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_source_name_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_source_name_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_source_name_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_source_name_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_source_name_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_source_name_args extends TBase {
  static $_TSPEC;

  public $source_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'source_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_source_name_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_source_name_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_source_name_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_source_name_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_source_name_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_source_name_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_source_name_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_source_name_id_map_args extends TBase {
  static $_TSPEC;

  public $names = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'names',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_source_name_id_map_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_source_name_id_map_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_source_name_id_map_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_source_name_id_map_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_source_name_id_map_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_source_name_id_map_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_source_name_id_map_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_not_paid_order_auto_fail_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_not_paid_order_auto_fail_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_not_paid_order_auto_fail_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_not_paid_order_auto_fail_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_not_paid_order_auto_fail_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_not_paid_order_auto_fail_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_not_paid_order_auto_fail_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_not_paid_order_auto_fail_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_or_update_food_popularity_rating_args extends TBase {
  static $_TSPEC;

  public $food_id = null;
  public $recent_popularity = null;
  public $recent_num_ratings = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'food_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'recent_popularity',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'recent_num_ratings',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_or_update_food_popularity_rating_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_or_update_food_popularity_rating_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_or_update_food_popularity_rating_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_or_update_food_popularity_rating_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_or_update_food_popularity_rating_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_or_update_food_popularity_rating_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_or_update_food_popularity_rating_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_activity_subsidy_stats_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $activity_id = null;
  public $activity_category_id = null;
  public $subsidy_price = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_category_id',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'subsidy_price',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_activity_subsidy_stats_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_activity_subsidy_stats_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_activity_subsidy_stats_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_activity_subsidy_stats_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_activity_subsidy_stats_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_activity_subsidy_stats_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_activity_subsidy_stats_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_complex_activity_subsidy_stats_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $activity_id = null;
  public $activity_category_id = null;
  public $subsidy_price = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_category_id',
          'type' => TType::I16,
          ),
        4 => array(
          'var' => 'subsidy_price',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_complex_activity_subsidy_stats_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_complex_activity_subsidy_stats_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_complex_activity_subsidy_stats_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_complex_activity_subsidy_stats_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_complex_activity_subsidy_stats_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_complex_activity_subsidy_stats_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_complex_activity_subsidy_stats_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_activity_subsidy_pay_record_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $activity_id = null;
  public $activity_category_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_category_id',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_activity_subsidy_pay_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_activity_subsidy_pay_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_activity_subsidy_pay_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_activity_subsidy_pay_record_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_activity_subsidy_pay_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_activity_subsidy_pay_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_activity_subsidy_pay_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_activity_subsidy_pay_record_new_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_activity_subsidy_pay_record_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_activity_subsidy_pay_record_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_activity_subsidy_pay_record_new_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_generate_activity_subsidy_pay_record_new_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_generate_activity_subsidy_pay_record_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_generate_activity_subsidy_pay_record_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_generate_activity_subsidy_pay_record_new_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_batch_generate_activity_subsidy_pay_record_args extends TBase {
  static $_TSPEC;

  public $restaurant_ids = null;
  public $activity_id = null;
  public $activity_category_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        2 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_category_id',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_batch_generate_activity_subsidy_pay_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_batch_generate_activity_subsidy_pay_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_batch_generate_activity_subsidy_pay_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_batch_generate_activity_subsidy_pay_record_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_batch_generate_activity_subsidy_pay_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_batch_generate_activity_subsidy_pay_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_batch_generate_activity_subsidy_pay_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_doubt_activity_subsidy_stats_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $activity_id = null;
  public $activity_category_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activity_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'activity_category_id',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_doubt_activity_subsidy_stats_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_doubt_activity_subsidy_stats_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_doubt_activity_subsidy_stats_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_doubt_activity_subsidy_stats_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_doubt_activity_subsidy_stats_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_doubt_activity_subsidy_stats_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_doubt_activity_subsidy_stats_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_doubt_activity_subsidy_stats_new_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_doubt_activity_subsidy_stats_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_doubt_activity_subsidy_stats_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_doubt_activity_subsidy_stats_new_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_doubt_activity_subsidy_stats_new_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_doubt_activity_subsidy_stats_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_doubt_activity_subsidy_stats_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_doubt_activity_subsidy_stats_new_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_submit_subsidy_pay_record_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_submit_subsidy_pay_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_submit_subsidy_pay_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_submit_subsidy_pay_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_submit_subsidy_pay_record_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_submit_subsidy_pay_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_submit_subsidy_pay_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_submit_subsidy_pay_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_retry_subsidy_pay_record_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_retry_subsidy_pay_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_retry_subsidy_pay_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_retry_subsidy_pay_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_retry_subsidy_pay_record_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_retry_subsidy_pay_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_retry_subsidy_pay_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_retry_subsidy_pay_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_subsidy_pay_record_args extends TBase {
  static $_TSPEC;

  public $pay_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_subsidy_pay_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_subsidy_pay_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_subsidy_pay_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_check_subsidy_pay_record_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_check_subsidy_pay_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_check_subsidy_pay_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_check_subsidy_pay_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_event_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $is_new_order = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'is_new_order',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_event_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_event_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_event_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_event_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_event_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_event_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_event_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_event2_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $restaurant_id = null;
  public $is_new_order = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'is_new_order',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_event2_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_event2_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_event2_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_add_order_event2_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_add_order_event2_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_add_order_event2_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_add_order_event2_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_can_invalid_order_pass_post_make_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_can_invalid_order_pass_post_make_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_can_invalid_order_pass_post_make_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_can_invalid_order_pass_post_make_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_can_invalid_order_pass_post_make_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_can_invalid_order_pass_post_make_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_can_invalid_order_pass_post_make_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_can_invalid_order_pass_post_make_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_is_device_blockable_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_is_device_blockable_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_is_device_blockable_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_is_device_blockable_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_is_device_blockable_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_is_device_blockable_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_is_device_blockable_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_is_device_blockable_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_block_mobile_device_by_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $operator_user_id = null;
  public $reason = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'operator_user_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'reason',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_block_mobile_device_by_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_block_mobile_device_by_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_block_mobile_device_by_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_block_mobile_device_by_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_block_mobile_device_by_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_block_mobile_device_by_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_block_mobile_device_by_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_promotion_activity_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_promotion_activity_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_promotion_activity_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_promotion_activity_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_process_promotion_activity_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_process_promotion_activity_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_process_promotion_activity_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_process_promotion_activity_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_bind_tpd_vip_card_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $days = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'days',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_bind_tpd_vip_card_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_bind_tpd_vip_card_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_bind_tpd_vip_card_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_bind_tpd_vip_card_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_bind_tpd_vip_card_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_bind_tpd_vip_card_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_bind_tpd_vip_card_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_unbind_tpd_vip_card_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_unbind_tpd_vip_card_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_unbind_tpd_vip_card_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_unbind_tpd_vip_card_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_unbind_tpd_vip_card_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_unbind_tpd_vip_card_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_unbind_tpd_vip_card_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_unbind_tpd_vip_card_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_renew_tpd_vip_card_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $days = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'days',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_renew_tpd_vip_card_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_renew_tpd_vip_card_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_renew_tpd_vip_card_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_renew_tpd_vip_card_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_renew_tpd_vip_card_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_renew_tpd_vip_card_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_renew_tpd_vip_card_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_send_focusmedia_coupon_args extends TBase {
  static $_TSPEC;

  public $phone = null;
  public $is_ios = null;
  public $source = null;
  public $ip = null;
  public $ua = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'is_ios',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ua',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_send_focusmedia_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_send_focusmedia_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_send_focusmedia_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_send_focusmedia_coupon_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_send_focusmedia_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_send_focusmedia_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_send_focusmedia_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_anonymous_order_args extends TBase {
  static $_TSPEC;

  public $session_id = null;
  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_anonymous_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_anonymous_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_anonymous_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_anonymous_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_anonymous_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_anonymous_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_anonymous_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_by_unique_id_args extends TBase {
  static $_TSPEC;

  public $unique_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_by_unique_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_by_unique_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_by_unique_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_by_unique_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_by_unique_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_by_unique_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_by_unique_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_last_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TLastOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_last_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_last_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_last_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_last_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_last_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_last_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_last_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_info_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_info_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_info_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_info_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_info_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCOrderInfo',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_info_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_info_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_info_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_by_restaurant_number_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $restaurant_number = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'restaurant_number',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_by_restaurant_number_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_by_restaurant_number_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_by_restaurant_number_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_by_restaurant_number_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_by_restaurant_number_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_by_restaurant_number_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_by_restaurant_number_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_by_unique_id_args extends TBase {
  static $_TSPEC;

  public $unique_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_by_unique_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_by_unique_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_by_unique_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_by_unique_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_by_unique_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_by_unique_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_by_unique_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_old_order_by_unique_id_args extends TBase {
  static $_TSPEC;

  public $unique_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_old_order_by_unique_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_old_order_by_unique_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_old_order_by_unique_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_old_order_by_unique_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_old_order_by_unique_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_old_order_by_unique_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_old_order_by_unique_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_unique_id_to_id_args extends TBase {
  static $_TSPEC;

  public $unique_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'unique_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_unique_id_to_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_unique_id_to_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_unique_id_to_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_unique_id_to_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I64,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_unique_id_to_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_unique_id_to_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_unique_id_to_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_unprocessed_order_ids_args extends TBase {
  static $_TSPEC;

  public $order_modes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_modes',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_unprocessed_order_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_unprocessed_order_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_unprocessed_order_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_unprocessed_order_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_unprocessed_order_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_unprocessed_order_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_unprocessed_order_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_rateable_orders_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_rateable_orders_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_rateable_orders_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_rateable_orders_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_rateable_orders_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_rateable_orders_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_rateable_orders_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_rateable_orders_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_rateable_orders_new_point_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_rateable_orders_new_point_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_rateable_orders_new_point_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_rateable_orders_new_point_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_rateable_orders_new_point_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_rateable_orders_new_point_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_rateable_orders_new_point_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_rateable_orders_new_point_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_rateable_orders_new_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_rateable_orders_new_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_rateable_orders_new_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_rateable_orders_new_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_rateable_orders_new_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_rateable_orders_new_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_rateable_orders_new_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_rateable_orders_new_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_processing_orders_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_processing_orders_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_processing_orders_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_processing_orders_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_processing_orders_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_processing_orders_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_processing_orders_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_processing_orders_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_old_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_old_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_old_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_old_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_old_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_old_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_old_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_old_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_anonymous_orders_args extends TBase {
  static $_TSPEC;

  public $session_id = null;
  public $limit = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'limit',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_anonymous_orders_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_anonymous_orders_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_anonymous_orders_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_anonymous_orders_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_anonymous_orders_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_anonymous_orders_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_anonymous_orders_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_all_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_all_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_all_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_all_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_all_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_all_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_all_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_all_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_napos_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_napos_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TNaposOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_napos_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_master_get_napos_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TNaposOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_master_get_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_master_get_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_master_get_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_napos_order_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_napos_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TNaposOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_napos_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TNaposOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_napos_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TNaposOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_napos_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TNaposOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_napos_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_napos_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_napos_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_napos_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_napos_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_napos_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_napos_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_process_record_args extends TBase {
  static $_TSPEC;

  public $order_process_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_process_record_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_process_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_process_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_process_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_process_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderProcessRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_process_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_process_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_process_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_delivery_record_args extends TBase {
  static $_TSPEC;

  public $order_delivery_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_delivery_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_delivery_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_delivery_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_delivery_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_delivery_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderDeliveryRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_delivery_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_delivery_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_delivery_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_refund_record_args extends TBase {
  static $_TSPEC;

  public $order_refund_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_refund_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_refund_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_refund_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_refund_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_refund_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderRefundRecord',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_refund_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_refund_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_refund_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_all_process_time_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderProcessRecordQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_all_process_time_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_all_process_time_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_all_process_time_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_all_process_time_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderProcessRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_all_process_time_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_all_process_time_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_all_process_time_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_process_record_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_process_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_process_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_process_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_process_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderProcessRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_process_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_process_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_process_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_time_spent_rate_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_time_spent_rate_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_time_spent_rate_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_time_spent_rate_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_time_spent_rate_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TElemeOrderRate',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_time_spent_rate_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_time_spent_rate_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_time_spent_rate_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_rate_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_rate_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_rate_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_rate_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_rate_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TElemeOrderRate',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_rate_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_rate_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_rate_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_confirm_record_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_confirm_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_confirm_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_confirm_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_confirm_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderConfirmRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_confirm_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_confirm_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_confirm_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_delivery_record_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;
  public $asc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'asc',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_delivery_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_delivery_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_delivery_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_delivery_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderDeliveryRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_delivery_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_delivery_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_delivery_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_refund_record_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;
  public $asc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'asc',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_refund_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_refund_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_refund_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_refund_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderRefundRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_refund_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_refund_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_refund_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_replace_record_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;
  public $asc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'asc',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_replace_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_replace_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_replace_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_replace_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderReplaceRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_replace_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_replace_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_replace_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_event_by_restaurant_args extends TBase {
  static $_TSPEC;

  public $last_event_id = null;
  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'last_event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_event_by_restaurant_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_event_by_restaurant_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_event_by_restaurant_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_event_by_restaurant_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderEvent',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_event_by_restaurant_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_event_by_restaurant_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_event_by_restaurant_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_dock_order_event_by_dock_corp_args extends TBase {
  static $_TSPEC;

  public $last_event_id = null;
  public $dock_corp_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'last_event_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'dock_corp_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_dock_order_event_by_dock_corp_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_dock_order_event_by_dock_corp_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_dock_order_event_by_dock_corp_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_dock_order_event_by_dock_corp_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TDockOrderEvent',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_dock_order_event_by_dock_corp_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_dock_order_event_by_dock_corp_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_dock_order_event_by_dock_corp_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_record_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_record_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_record_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_record_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_record_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCOrderRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_record_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_record_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_record_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_item_rating_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderItemRatingQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_item_rating_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_item_rating_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_item_rating_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_item_rating_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItemRating',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_item_rating_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_item_rating_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_item_rating_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_order_item_rating_args extends TBase {
  static $_TSPEC;

  public $order_item_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_order_item_rating_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_order_item_rating_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_order_item_rating_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_order_item_rating_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderItemRating',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_order_item_rating_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_order_item_rating_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_order_item_rating_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_order_item_rating_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderItemRatingQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_order_item_rating_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_order_item_rating_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_order_item_rating_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_order_item_rating_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_order_item_rating_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_order_item_rating_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_order_item_rating_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_device_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_device_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_device_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_device_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_device_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TDeviceOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_device_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_device_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_device_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_dock_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_dock_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_dock_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_dock_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_dock_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TDockOrder',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_dock_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_dock_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_dock_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_dock_order_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_dock_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_dock_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_dock_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_dock_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TDockOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_dock_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_dock_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_dock_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_dock_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TDockOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_dock_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_dock_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_dock_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_count_dock_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_count_dock_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_count_dock_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_count_dock_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_dock_order_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TDockOrderQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_dock_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_dock_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_dock_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_dock_order_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TDockOrder',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_dock_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_dock_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_dock_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_auto_pay_activity_stats_result_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TActivityStatsQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_auto_pay_activity_stats_result_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_auto_pay_activity_stats_result_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_auto_pay_activity_stats_result_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_auto_pay_activity_stats_result_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCActivityStatsResult',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_auto_pay_activity_stats_result_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_auto_pay_activity_stats_result_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_auto_pay_activity_stats_result_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_transitional_activity_stats_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TActivityStatsQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_transitional_activity_stats_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_transitional_activity_stats_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_transitional_activity_stats_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_transitional_activity_stats_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_transitional_activity_stats_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_transitional_activity_stats_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_transitional_activity_stats_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_activity_stats_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TActivityStatsQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_activity_stats_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_activity_stats_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_activity_stats_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_activity_stats_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TActivityStats',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_activity_stats_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_activity_stats_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_activity_stats_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_activity_stats_no_subsidy_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\EOS\TActivityStatsQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_activity_stats_no_subsidy_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_activity_stats_no_subsidy_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_activity_stats_no_subsidy_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_activity_stats_no_subsidy_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TActivityStats',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_activity_stats_no_subsidy_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_activity_stats_no_subsidy_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_activity_stats_no_subsidy_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_activity_subsidy_pay_records_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_activity_subsidy_pay_records_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_activity_subsidy_pay_records_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_activity_subsidy_pay_records_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_activity_subsidy_pay_records_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TSubsidyPayRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_activity_subsidy_pay_records_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_activity_subsidy_pay_records_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_activity_subsidy_pay_records_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_args extends TBase {
  static $_TSPEC;

  public $pay_record_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pay_record_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TSubsidyProcessRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_activity_subsidy_process_records_by_pay_record_ids_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_phone_validation_by_phone_args extends TBase {
  static $_TSPEC;

  public $phone = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phone',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_phone_validation_by_phone_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_phone_validation_by_phone_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_phone_validation_by_phone_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_phone_validation_by_phone_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TPhoneValidation',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_phone_validation_by_phone_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_phone_validation_by_phone_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_phone_validation_by_phone_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_rating_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_rating_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_rating_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_rating_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_rating_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItemRating',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_rating_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_rating_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_rating_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_rating_args extends TBase {
  static $_TSPEC;

  public $order_item_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_rating_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_rating_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_rating_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_rating_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItemRating',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_rating_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_rating_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_rating_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItem',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_attrs_by_order_id_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_attrs_by_order_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_attrs_by_order_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_attrs_by_order_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_attrs_by_order_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItemAttribute',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_attrs_by_order_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_attrs_by_order_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_attrs_by_order_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_attrs_by_item_id_args extends TBase {
  static $_TSPEC;

  public $order_item_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_attrs_by_item_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_attrs_by_item_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_attrs_by_item_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_attrs_by_item_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItemAttribute',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_attrs_by_item_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_attrs_by_item_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_attrs_by_item_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_order_item_args extends TBase {
  static $_TSPEC;

  public $order_item_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_item_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_order_item_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_order_item_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_order_item_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_order_item_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderItem',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_order_item_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_order_item_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_order_item_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_recently_order_item_by_user_id_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_recently_order_item_by_user_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_recently_order_item_by_user_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_recently_order_item_by_user_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_recently_order_item_by_user_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItem',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_recently_order_item_by_user_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_recently_order_item_by_user_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_recently_order_item_by_user_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_recently_order_item_by_session_id_args extends TBase {
  static $_TSPEC;

  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_recently_order_item_by_session_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_recently_order_item_by_session_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_recently_order_item_by_session_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_recently_order_item_by_session_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItem',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_recently_order_item_by_session_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_recently_order_item_by_session_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_recently_order_item_by_session_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_item_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderItem',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_item_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_item_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_item_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_invalid_description_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_invalid_description_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_invalid_description_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_invalid_description_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_order_invalid_description_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TOrderInvalidDescription',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_order_invalid_description_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_order_invalid_description_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_order_invalid_description_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_invalid_description_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_invalid_description_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_invalid_description_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_invalid_description_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_order_invalid_description_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderInvalidDescription',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_order_invalid_description_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_order_invalid_description_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_order_invalid_description_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_dop_user_id_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_dop_user_id_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_dop_user_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_dop_user_id_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_dop_user_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_dop_user_id_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_dop_user_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_dop_user_id_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_coupon_args extends TBase {
  static $_TSPEC;

  public $coupon_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coupon_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_coupon_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCoupon',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_coupon_args extends TBase {
  static $_TSPEC;

  public $coupon_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coupon_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_coupon_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_coupon_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_coupon_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_coupon_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCoupon',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_coupon_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_coupon_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_coupon_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_coupon_by_sn_args extends TBase {
  static $_TSPEC;

  public $coupon_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coupon_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_coupon_by_sn_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_coupon_by_sn_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_coupon_by_sn_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_coupon_by_sn_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCoupon',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_coupon_by_sn_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_coupon_by_sn_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_coupon_by_sn_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_coupon_by_sn_args extends TBase {
  static $_TSPEC;

  public $coupon_sns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'coupon_sns',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_coupon_by_sn_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_coupon_by_sn_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_coupon_by_sn_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_coupon_by_sn_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCoupon',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_coupon_by_sn_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_coupon_by_sn_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_coupon_by_sn_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_coupon_batch_args extends TBase {
  static $_TSPEC;

  public $batch_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_coupon_batch_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_coupon_batch_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_coupon_batch_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_coupon_batch_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TCouponBatch',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_coupon_batch_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_coupon_batch_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_coupon_batch_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_coupon_batch_by_sn_args extends TBase {
  static $_TSPEC;

  public $batch_sn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'batch_sn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_coupon_batch_by_sn_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_coupon_batch_by_sn_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_coupon_batch_by_sn_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_coupon_batch_by_sn_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\EOS\TCouponBatch',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_coupon_batch_by_sn_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_coupon_batch_by_sn_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_coupon_batch_by_sn_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_phone_blacklist_args extends TBase {
  static $_TSPEC;

  public $phones = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phones',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_phone_blacklist_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_phone_blacklist_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_phone_blacklist_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_phone_blacklist_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TPhoneBlacklist',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_phone_blacklist_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_phone_blacklist_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_phone_blacklist_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_phone_whitelist_args extends TBase {
  static $_TSPEC;

  public $phones = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'phones',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_phone_whitelist_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_phone_whitelist_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_phone_whitelist_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_query_phone_whitelist_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TPhoneWhitelist',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_query_phone_whitelist_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_query_phone_whitelist_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_query_phone_whitelist_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_cancel_description_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_cancel_description_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_cancel_description_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_cancel_description_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_mget_cancel_description_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => '\EOS\TOrderDeliveryRecord',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_mget_cancel_description_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_mget_cancel_description_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_mget_cancel_description_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_promotion_activity_content_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $type_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'type_code',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_promotion_activity_content_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_promotion_activity_content_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_promotion_activity_content_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_promotion_activity_content_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_promotion_activity_content_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_promotion_activity_content_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_promotion_activity_content_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_auto_cancel_order_restaurants_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_auto_cancel_order_restaurants_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_auto_cancel_order_restaurants_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_auto_cancel_order_restaurants_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_get_auto_cancel_order_restaurants_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_get_auto_cancel_order_restaurants_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_get_auto_cancel_order_restaurants_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_get_auto_cancel_order_restaurants_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_post_process_order_args extends TBase {
  static $_TSPEC;

  public $order_process_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_process_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_post_process_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_post_process_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_post_process_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_post_process_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_post_process_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_post_process_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_post_process_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_pending_make_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_pending_make_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_pending_make_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_pending_make_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_pending_make_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_pending_make_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_pending_make_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_pending_make_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_post_make_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_post_make_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_post_make_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_post_make_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_post_make_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_post_make_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_post_make_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_post_make_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_post_replace_order_args extends TBase {
  static $_TSPEC;

  public $order_replace_record_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_replace_record_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_post_replace_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_post_replace_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_post_replace_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_post_replace_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_post_replace_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_post_replace_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_post_replace_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_update_eleme_order_args extends TBase {
  static $_TSPEC;

  public $order_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_ids',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_update_eleme_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_update_eleme_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_update_eleme_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_signal_update_eleme_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_signal_update_eleme_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_signal_update_eleme_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_signal_update_eleme_order_result', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_move_dop_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_move_dop_order_args';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_move_dop_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_move_dop_order_args', self::$_TSPEC, $output);
  }
}

class ElemeOrderService_move_dop_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unknown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSSystemException',
          ),
        3 => array(
          'var' => 'unknown_exception',
          'type' => TType::STRUCT,
          'class' => '\EOS\EOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ElemeOrderService_move_dop_order_result';
  }

  public function read($input)
  {
    return $this->_read('ElemeOrderService_move_dop_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ElemeOrderService_move_dop_order_result', self::$_TSPEC, $output);
  }
}


