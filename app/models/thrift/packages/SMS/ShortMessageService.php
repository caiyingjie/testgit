<?php
namespace SMS;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ShortMessageServiceIf {
  public function ping();
  public function clear_cache($api_name, $params);
  public function balance();
  public function send($mobile, $content);
  public function send_with_messager($mobile, $content, $messager_id);
  public function send_voice($mobile, $code);
  public function send_verify_code($mobile);
  public function send_voice_verify_code($mobile);
  public function receive($messager_id, $content);
  public function report($messager_id, $content);
  public function report_voice($messager_id, $content);
  public function stats_send_count($from_time, $to_time);
  public function stats_send_total($from_time, $to_time);
  public function verify_mobile_with_code($mobile, $code);
  public function admin_send($mobile, $content, $restaurant_id, $admin_id);
  public function admin_order_send($order_id, $admin_id);
  public function admin_set_message_read_status($msg_id, $read_status);
  public function admin_set_message_restaurant($msg_id, $rst_id);
  public function get_validation_code($mobile);
  public function confirm_validation_code($mobile, $validate_code);
  public function ctc_receive();
  public function ctc_report();
  public function signal_post_make_order($order_id);
  public function process_distribute($msg_id);
  public function process_send($msg_id);
  public function process_send_voice($msg_id);
  public function process_receive($content_id);
  public function process_report($content_id);
  public function process_report_voice($content_id);
  public function process_ai_auto_send($order_id);
  public function process_ai_auto_confirm($sms_receive_id);
  public function set_pushed_content_status($sms_pushed_content_id, $status);
  public function get_send($msg_id);
  public function mget_send($msg_ids);
  public function query_send_by_mobile($mobile);
  public function query_verify_code_by_mobile($mobile);
  public function get_receive($msg_id);
  public function mget_receive($msg_ids);
  public function query_receive_by_mobile($mobile);
  public function get_admin($msg_id);
  public function mget_admin($msg_ids);
  public function query_admin(\SMS\TSMSAdminQuery $query_struct);
  public function sms_inspect();
  public function voice_unsend_report();
  public function signal_update_sms_send($ids);
  public function signal_update_sms_receive($ids);
  public function signal_update_sms_admin($ids);
  public function hermes_reply_push($mobile, $content, $timestamp);
  public function hermes_report_push($mobile, $status, $task_id, $timestamp);
  public function hermes_send_verify_code($sender_key, $mobile, $via_audio);
  public function hermes_validate_verify_code_with_hash($sender_key, $hash_value, $code);
  public function hermes_validate_verify_code_with_receiver($sender_key, $receiver, $code);
}

class ShortMessageServiceClient implements \SMS\ShortMessageServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    return $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \SMS\ShortMessageService_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function clear_cache($api_name, $params)
  {
    $this->send_clear_cache($api_name, $params);
    $this->recv_clear_cache();
  }

  public function send_clear_cache($api_name, $params)
  {
    $args = new \SMS\ShortMessageService_clear_cache_args();
    $args->api_name = $api_name;
    $args->params = $params;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'clear_cache', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('clear_cache', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_clear_cache()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_clear_cache_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_clear_cache_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function balance()
  {
    $this->send_balance();
    return $this->recv_balance();
  }

  public function send_balance()
  {
    $args = new \SMS\ShortMessageService_balance_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'balance', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('balance', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_balance()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_balance_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_balance_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("balance failed: unknown result");
  }

  public function send($mobile, $content)
  {
    $this->send_send($mobile, $content);
    $this->recv_send();
  }

  public function send_send($mobile, $content)
  {
    $args = new \SMS\ShortMessageService_send_args();
    $args->mobile = $mobile;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_with_messager($mobile, $content, $messager_id)
  {
    $this->send_send_with_messager($mobile, $content, $messager_id);
    $this->recv_send_with_messager();
  }

  public function send_send_with_messager($mobile, $content, $messager_id)
  {
    $args = new \SMS\ShortMessageService_send_with_messager_args();
    $args->mobile = $mobile;
    $args->content = $content;
    $args->messager_id = $messager_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_with_messager', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_with_messager', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_with_messager()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_send_with_messager_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_send_with_messager_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_voice($mobile, $code)
  {
    $this->send_send_voice($mobile, $code);
    $this->recv_send_voice();
  }

  public function send_send_voice($mobile, $code)
  {
    $args = new \SMS\ShortMessageService_send_voice_args();
    $args->mobile = $mobile;
    $args->code = $code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_voice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_voice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_voice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_send_voice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_send_voice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_verify_code($mobile)
  {
    $this->send_send_verify_code($mobile);
    $this->recv_send_verify_code();
  }

  public function send_send_verify_code($mobile)
  {
    $args = new \SMS\ShortMessageService_send_verify_code_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_verify_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_verify_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_verify_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_send_verify_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_send_verify_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function send_voice_verify_code($mobile)
  {
    $this->send_send_voice_verify_code($mobile);
    $this->recv_send_voice_verify_code();
  }

  public function send_send_voice_verify_code($mobile)
  {
    $args = new \SMS\ShortMessageService_send_voice_verify_code_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'send_voice_verify_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('send_voice_verify_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_send_voice_verify_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_send_voice_verify_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_send_voice_verify_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function receive($messager_id, $content)
  {
    $this->send_receive($messager_id, $content);
    $this->recv_receive();
  }

  public function send_receive($messager_id, $content)
  {
    $args = new \SMS\ShortMessageService_receive_args();
    $args->messager_id = $messager_id;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'receive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('receive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_receive()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_receive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_receive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function report($messager_id, $content)
  {
    $this->send_report($messager_id, $content);
    $this->recv_report();
  }

  public function send_report($messager_id, $content)
  {
    $args = new \SMS\ShortMessageService_report_args();
    $args->messager_id = $messager_id;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'report', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('report', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_report()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_report_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_report_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function report_voice($messager_id, $content)
  {
    $this->send_report_voice($messager_id, $content);
    $this->recv_report_voice();
  }

  public function send_report_voice($messager_id, $content)
  {
    $args = new \SMS\ShortMessageService_report_voice_args();
    $args->messager_id = $messager_id;
    $args->content = $content;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'report_voice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('report_voice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_report_voice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_report_voice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_report_voice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function stats_send_count($from_time, $to_time)
  {
    $this->send_stats_send_count($from_time, $to_time);
    return $this->recv_stats_send_count();
  }

  public function send_stats_send_count($from_time, $to_time)
  {
    $args = new \SMS\ShortMessageService_stats_send_count_args();
    $args->from_time = $from_time;
    $args->to_time = $to_time;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stats_send_count', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stats_send_count', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stats_send_count()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_stats_send_count_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_stats_send_count_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("stats_send_count failed: unknown result");
  }

  public function stats_send_total($from_time, $to_time)
  {
    $this->send_stats_send_total($from_time, $to_time);
    return $this->recv_stats_send_total();
  }

  public function send_stats_send_total($from_time, $to_time)
  {
    $args = new \SMS\ShortMessageService_stats_send_total_args();
    $args->from_time = $from_time;
    $args->to_time = $to_time;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'stats_send_total', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('stats_send_total', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_stats_send_total()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_stats_send_total_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_stats_send_total_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("stats_send_total failed: unknown result");
  }

  public function verify_mobile_with_code($mobile, $code)
  {
    $this->send_verify_mobile_with_code($mobile, $code);
    return $this->recv_verify_mobile_with_code();
  }

  public function send_verify_mobile_with_code($mobile, $code)
  {
    $args = new \SMS\ShortMessageService_verify_mobile_with_code_args();
    $args->mobile = $mobile;
    $args->code = $code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'verify_mobile_with_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('verify_mobile_with_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_verify_mobile_with_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_verify_mobile_with_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_verify_mobile_with_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("verify_mobile_with_code failed: unknown result");
  }

  public function admin_send($mobile, $content, $restaurant_id, $admin_id)
  {
    $this->send_admin_send($mobile, $content, $restaurant_id, $admin_id);
    $this->recv_admin_send();
  }

  public function send_admin_send($mobile, $content, $restaurant_id, $admin_id)
  {
    $args = new \SMS\ShortMessageService_admin_send_args();
    $args->mobile = $mobile;
    $args->content = $content;
    $args->restaurant_id = $restaurant_id;
    $args->admin_id = $admin_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'admin_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('admin_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_admin_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_admin_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_admin_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function admin_order_send($order_id, $admin_id)
  {
    $this->send_admin_order_send($order_id, $admin_id);
    $this->recv_admin_order_send();
  }

  public function send_admin_order_send($order_id, $admin_id)
  {
    $args = new \SMS\ShortMessageService_admin_order_send_args();
    $args->order_id = $order_id;
    $args->admin_id = $admin_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'admin_order_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('admin_order_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_admin_order_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_admin_order_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_admin_order_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function admin_set_message_read_status($msg_id, $read_status)
  {
    $this->send_admin_set_message_read_status($msg_id, $read_status);
    $this->recv_admin_set_message_read_status();
  }

  public function send_admin_set_message_read_status($msg_id, $read_status)
  {
    $args = new \SMS\ShortMessageService_admin_set_message_read_status_args();
    $args->msg_id = $msg_id;
    $args->read_status = $read_status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'admin_set_message_read_status', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('admin_set_message_read_status', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_admin_set_message_read_status()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_admin_set_message_read_status_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_admin_set_message_read_status_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function admin_set_message_restaurant($msg_id, $rst_id)
  {
    $this->send_admin_set_message_restaurant($msg_id, $rst_id);
    $this->recv_admin_set_message_restaurant();
  }

  public function send_admin_set_message_restaurant($msg_id, $rst_id)
  {
    $args = new \SMS\ShortMessageService_admin_set_message_restaurant_args();
    $args->msg_id = $msg_id;
    $args->rst_id = $rst_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'admin_set_message_restaurant', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('admin_set_message_restaurant', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_admin_set_message_restaurant()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_admin_set_message_restaurant_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_admin_set_message_restaurant_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_validation_code($mobile)
  {
    $this->send_get_validation_code($mobile);
    return $this->recv_get_validation_code();
  }

  public function send_get_validation_code($mobile)
  {
    $args = new \SMS\ShortMessageService_get_validation_code_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_validation_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_validation_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_validation_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_get_validation_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_get_validation_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_validation_code failed: unknown result");
  }

  public function confirm_validation_code($mobile, $validate_code)
  {
    $this->send_confirm_validation_code($mobile, $validate_code);
    return $this->recv_confirm_validation_code();
  }

  public function send_confirm_validation_code($mobile, $validate_code)
  {
    $args = new \SMS\ShortMessageService_confirm_validation_code_args();
    $args->mobile = $mobile;
    $args->validate_code = $validate_code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'confirm_validation_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('confirm_validation_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_confirm_validation_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_confirm_validation_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_confirm_validation_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("confirm_validation_code failed: unknown result");
  }

  public function ctc_receive()
  {
    $this->send_ctc_receive();
    $this->recv_ctc_receive();
  }

  public function send_ctc_receive()
  {
    $args = new \SMS\ShortMessageService_ctc_receive_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ctc_receive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ctc_receive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ctc_receive()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_ctc_receive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_ctc_receive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function ctc_report()
  {
    $this->send_ctc_report();
    $this->recv_ctc_report();
  }

  public function send_ctc_report()
  {
    $args = new \SMS\ShortMessageService_ctc_report_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ctc_report', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ctc_report', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ctc_report()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_ctc_report_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_ctc_report_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function signal_post_make_order($order_id)
  {
    $this->send_signal_post_make_order($order_id);
    $this->recv_signal_post_make_order();
  }

  public function send_signal_post_make_order($order_id)
  {
    $args = new \SMS\ShortMessageService_signal_post_make_order_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_post_make_order', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_post_make_order', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_post_make_order()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_signal_post_make_order_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_signal_post_make_order_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_distribute($msg_id)
  {
    $this->send_process_distribute($msg_id);
    $this->recv_process_distribute();
  }

  public function send_process_distribute($msg_id)
  {
    $args = new \SMS\ShortMessageService_process_distribute_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_distribute', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_distribute', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_distribute()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_distribute_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_distribute_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_send($msg_id)
  {
    $this->send_process_send($msg_id);
    $this->recv_process_send();
  }

  public function send_process_send($msg_id)
  {
    $args = new \SMS\ShortMessageService_process_send_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_send_voice($msg_id)
  {
    $this->send_process_send_voice($msg_id);
    $this->recv_process_send_voice();
  }

  public function send_process_send_voice($msg_id)
  {
    $args = new \SMS\ShortMessageService_process_send_voice_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_send_voice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_send_voice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_send_voice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_send_voice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_send_voice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_receive($content_id)
  {
    $this->send_process_receive($content_id);
    $this->recv_process_receive();
  }

  public function send_process_receive($content_id)
  {
    $args = new \SMS\ShortMessageService_process_receive_args();
    $args->content_id = $content_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_receive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_receive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_receive()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_receive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_receive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_report($content_id)
  {
    $this->send_process_report($content_id);
    $this->recv_process_report();
  }

  public function send_process_report($content_id)
  {
    $args = new \SMS\ShortMessageService_process_report_args();
    $args->content_id = $content_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_report', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_report', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_report()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_report_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_report_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_report_voice($content_id)
  {
    $this->send_process_report_voice($content_id);
    $this->recv_process_report_voice();
  }

  public function send_process_report_voice($content_id)
  {
    $args = new \SMS\ShortMessageService_process_report_voice_args();
    $args->content_id = $content_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_report_voice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_report_voice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_report_voice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_report_voice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_report_voice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_ai_auto_send($order_id)
  {
    $this->send_process_ai_auto_send($order_id);
    $this->recv_process_ai_auto_send();
  }

  public function send_process_ai_auto_send($order_id)
  {
    $args = new \SMS\ShortMessageService_process_ai_auto_send_args();
    $args->order_id = $order_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_ai_auto_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_ai_auto_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_ai_auto_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_ai_auto_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_ai_auto_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function process_ai_auto_confirm($sms_receive_id)
  {
    $this->send_process_ai_auto_confirm($sms_receive_id);
    $this->recv_process_ai_auto_confirm();
  }

  public function send_process_ai_auto_confirm($sms_receive_id)
  {
    $args = new \SMS\ShortMessageService_process_ai_auto_confirm_args();
    $args->sms_receive_id = $sms_receive_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'process_ai_auto_confirm', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('process_ai_auto_confirm', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_process_ai_auto_confirm()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_process_ai_auto_confirm_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_process_ai_auto_confirm_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function set_pushed_content_status($sms_pushed_content_id, $status)
  {
    $this->send_set_pushed_content_status($sms_pushed_content_id, $status);
    $this->recv_set_pushed_content_status();
  }

  public function send_set_pushed_content_status($sms_pushed_content_id, $status)
  {
    $args = new \SMS\ShortMessageService_set_pushed_content_status_args();
    $args->sms_pushed_content_id = $sms_pushed_content_id;
    $args->status = $status;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'set_pushed_content_status', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('set_pushed_content_status', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_set_pushed_content_status()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_set_pushed_content_status_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_set_pushed_content_status_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_send($msg_id)
  {
    $this->send_get_send($msg_id);
    return $this->recv_get_send();
  }

  public function send_get_send($msg_id)
  {
    $args = new \SMS\ShortMessageService_get_send_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_get_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_get_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_send failed: unknown result");
  }

  public function mget_send($msg_ids)
  {
    $this->send_mget_send($msg_ids);
    return $this->recv_mget_send();
  }

  public function send_mget_send($msg_ids)
  {
    $args = new \SMS\ShortMessageService_mget_send_args();
    $args->msg_ids = $msg_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_mget_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_mget_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_send failed: unknown result");
  }

  public function query_send_by_mobile($mobile)
  {
    $this->send_query_send_by_mobile($mobile);
    return $this->recv_query_send_by_mobile();
  }

  public function send_query_send_by_mobile($mobile)
  {
    $args = new \SMS\ShortMessageService_query_send_by_mobile_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_send_by_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_send_by_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_send_by_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_query_send_by_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_query_send_by_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_send_by_mobile failed: unknown result");
  }

  public function query_verify_code_by_mobile($mobile)
  {
    $this->send_query_verify_code_by_mobile($mobile);
    return $this->recv_query_verify_code_by_mobile();
  }

  public function send_query_verify_code_by_mobile($mobile)
  {
    $args = new \SMS\ShortMessageService_query_verify_code_by_mobile_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_verify_code_by_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_verify_code_by_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_verify_code_by_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_query_verify_code_by_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_query_verify_code_by_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_verify_code_by_mobile failed: unknown result");
  }

  public function get_receive($msg_id)
  {
    $this->send_get_receive($msg_id);
    return $this->recv_get_receive();
  }

  public function send_get_receive($msg_id)
  {
    $args = new \SMS\ShortMessageService_get_receive_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_receive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_receive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_receive()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_get_receive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_get_receive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_receive failed: unknown result");
  }

  public function mget_receive($msg_ids)
  {
    $this->send_mget_receive($msg_ids);
    return $this->recv_mget_receive();
  }

  public function send_mget_receive($msg_ids)
  {
    $args = new \SMS\ShortMessageService_mget_receive_args();
    $args->msg_ids = $msg_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_receive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_receive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_receive()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_mget_receive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_mget_receive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_receive failed: unknown result");
  }

  public function query_receive_by_mobile($mobile)
  {
    $this->send_query_receive_by_mobile($mobile);
    return $this->recv_query_receive_by_mobile();
  }

  public function send_query_receive_by_mobile($mobile)
  {
    $args = new \SMS\ShortMessageService_query_receive_by_mobile_args();
    $args->mobile = $mobile;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_receive_by_mobile', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_receive_by_mobile', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_receive_by_mobile()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_query_receive_by_mobile_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_query_receive_by_mobile_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_receive_by_mobile failed: unknown result");
  }

  public function get_admin($msg_id)
  {
    $this->send_get_admin($msg_id);
    return $this->recv_get_admin();
  }

  public function send_get_admin($msg_id)
  {
    $args = new \SMS\ShortMessageService_get_admin_args();
    $args->msg_id = $msg_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_get_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_get_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_admin failed: unknown result");
  }

  public function mget_admin($msg_ids)
  {
    $this->send_mget_admin($msg_ids);
    return $this->recv_mget_admin();
  }

  public function send_mget_admin($msg_ids)
  {
    $args = new \SMS\ShortMessageService_mget_admin_args();
    $args->msg_ids = $msg_ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_mget_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_mget_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_admin failed: unknown result");
  }

  public function query_admin(\SMS\TSMSAdminQuery $query_struct)
  {
    $this->send_query_admin($query_struct);
    return $this->recv_query_admin();
  }

  public function send_query_admin(\SMS\TSMSAdminQuery $query_struct)
  {
    $args = new \SMS\ShortMessageService_query_admin_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_query_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_query_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_admin failed: unknown result");
  }

  public function sms_inspect()
  {
    $this->send_sms_inspect();
    return $this->recv_sms_inspect();
  }

  public function send_sms_inspect()
  {
    $args = new \SMS\ShortMessageService_sms_inspect_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'sms_inspect', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('sms_inspect', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_sms_inspect()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_sms_inspect_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_sms_inspect_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("sms_inspect failed: unknown result");
  }

  public function voice_unsend_report()
  {
    $this->send_voice_unsend_report();
    return $this->recv_voice_unsend_report();
  }

  public function send_voice_unsend_report()
  {
    $args = new \SMS\ShortMessageService_voice_unsend_report_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'voice_unsend_report', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('voice_unsend_report', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_voice_unsend_report()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_voice_unsend_report_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_voice_unsend_report_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("voice_unsend_report failed: unknown result");
  }

  public function signal_update_sms_send($ids)
  {
    $this->send_signal_update_sms_send($ids);
    $this->recv_signal_update_sms_send();
  }

  public function send_signal_update_sms_send($ids)
  {
    $args = new \SMS\ShortMessageService_signal_update_sms_send_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_sms_send', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_sms_send', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_sms_send()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_signal_update_sms_send_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_signal_update_sms_send_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function signal_update_sms_receive($ids)
  {
    $this->send_signal_update_sms_receive($ids);
    $this->recv_signal_update_sms_receive();
  }

  public function send_signal_update_sms_receive($ids)
  {
    $args = new \SMS\ShortMessageService_signal_update_sms_receive_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_sms_receive', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_sms_receive', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_sms_receive()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_signal_update_sms_receive_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_signal_update_sms_receive_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function signal_update_sms_admin($ids)
  {
    $this->send_signal_update_sms_admin($ids);
    $this->recv_signal_update_sms_admin();
  }

  public function send_signal_update_sms_admin($ids)
  {
    $args = new \SMS\ShortMessageService_signal_update_sms_admin_args();
    $args->ids = $ids;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'signal_update_sms_admin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('signal_update_sms_admin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_signal_update_sms_admin()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_signal_update_sms_admin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_signal_update_sms_admin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function hermes_reply_push($mobile, $content, $timestamp)
  {
    $this->send_hermes_reply_push($mobile, $content, $timestamp);
    $this->recv_hermes_reply_push();
  }

  public function send_hermes_reply_push($mobile, $content, $timestamp)
  {
    $args = new \SMS\ShortMessageService_hermes_reply_push_args();
    $args->mobile = $mobile;
    $args->content = $content;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_reply_push', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_reply_push', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_reply_push()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_hermes_reply_push_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_hermes_reply_push_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function hermes_report_push($mobile, $status, $task_id, $timestamp)
  {
    $this->send_hermes_report_push($mobile, $status, $task_id, $timestamp);
    $this->recv_hermes_report_push();
  }

  public function send_hermes_report_push($mobile, $status, $task_id, $timestamp)
  {
    $args = new \SMS\ShortMessageService_hermes_report_push_args();
    $args->mobile = $mobile;
    $args->status = $status;
    $args->task_id = $task_id;
    $args->timestamp = $timestamp;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_report_push', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_report_push', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_report_push()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_hermes_report_push_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_hermes_report_push_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function hermes_send_verify_code($sender_key, $mobile, $via_audio)
  {
    $this->send_hermes_send_verify_code($sender_key, $mobile, $via_audio);
    return $this->recv_hermes_send_verify_code();
  }

  public function send_hermes_send_verify_code($sender_key, $mobile, $via_audio)
  {
    $args = new \SMS\ShortMessageService_hermes_send_verify_code_args();
    $args->sender_key = $sender_key;
    $args->mobile = $mobile;
    $args->via_audio = $via_audio;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_send_verify_code', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_send_verify_code', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_send_verify_code()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_hermes_send_verify_code_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_hermes_send_verify_code_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("hermes_send_verify_code failed: unknown result");
  }

  public function hermes_validate_verify_code_with_hash($sender_key, $hash_value, $code)
  {
    $this->send_hermes_validate_verify_code_with_hash($sender_key, $hash_value, $code);
    return $this->recv_hermes_validate_verify_code_with_hash();
  }

  public function send_hermes_validate_verify_code_with_hash($sender_key, $hash_value, $code)
  {
    $args = new \SMS\ShortMessageService_hermes_validate_verify_code_with_hash_args();
    $args->sender_key = $sender_key;
    $args->hash_value = $hash_value;
    $args->code = $code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_validate_verify_code_with_hash', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_validate_verify_code_with_hash', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_validate_verify_code_with_hash()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_hermes_validate_verify_code_with_hash_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_hermes_validate_verify_code_with_hash_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("hermes_validate_verify_code_with_hash failed: unknown result");
  }

  public function hermes_validate_verify_code_with_receiver($sender_key, $receiver, $code)
  {
    $this->send_hermes_validate_verify_code_with_receiver($sender_key, $receiver, $code);
    return $this->recv_hermes_validate_verify_code_with_receiver();
  }

  public function send_hermes_validate_verify_code_with_receiver($sender_key, $receiver, $code)
  {
    $args = new \SMS\ShortMessageService_hermes_validate_verify_code_with_receiver_args();
    $args->sender_key = $sender_key;
    $args->receiver = $receiver;
    $args->code = $code;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hermes_validate_verify_code_with_receiver', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hermes_validate_verify_code_with_receiver', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hermes_validate_verify_code_with_receiver()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\SMS\ShortMessageService_hermes_validate_verify_code_with_receiver_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \SMS\ShortMessageService_hermes_validate_verify_code_with_receiver_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("hermes_validate_verify_code_with_receiver failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ShortMessageService_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ShortMessageService_ping_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_ping_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_ping_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_ping_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_ping_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_clear_cache_args extends TBase {
  static $_TSPEC;

  public $api_name = null;
  public $params = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'api_name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'params',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_clear_cache_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_clear_cache_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_clear_cache_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_clear_cache_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_clear_cache_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_clear_cache_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_clear_cache_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_balance_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ShortMessageService_balance_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_balance_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_balance_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_balance_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_balance_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_balance_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_balance_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_with_messager_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $content = null;
  public $messager_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'messager_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_with_messager_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_with_messager_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_with_messager_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_with_messager_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_with_messager_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_with_messager_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_with_messager_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_voice_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_voice_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_voice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_voice_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_voice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_voice_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_voice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_voice_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_verify_code_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_verify_code_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_verify_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_verify_code_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_verify_code_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_verify_code_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_verify_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_verify_code_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_voice_verify_code_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_voice_verify_code_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_voice_verify_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_voice_verify_code_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_send_voice_verify_code_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_send_voice_verify_code_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_send_voice_verify_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_send_voice_verify_code_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_receive_args extends TBase {
  static $_TSPEC;

  public $messager_id = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messager_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_receive_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_receive_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_receive_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_receive_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_receive_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_receive_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_receive_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_report_args extends TBase {
  static $_TSPEC;

  public $messager_id = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messager_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_report_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_report_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_report_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_report_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_report_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_report_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_report_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_report_voice_args extends TBase {
  static $_TSPEC;

  public $messager_id = null;
  public $content = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messager_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_report_voice_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_report_voice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_report_voice_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_report_voice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_report_voice_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_report_voice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_report_voice_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_stats_send_count_args extends TBase {
  static $_TSPEC;

  public $from_time = null;
  public $to_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_time',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_stats_send_count_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_stats_send_count_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_stats_send_count_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_stats_send_count_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_stats_send_count_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_stats_send_count_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_stats_send_count_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_stats_send_total_args extends TBase {
  static $_TSPEC;

  public $from_time = null;
  public $to_time = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'from_time',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'to_time',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_stats_send_total_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_stats_send_total_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_stats_send_total_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_stats_send_total_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_stats_send_total_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_stats_send_total_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_stats_send_total_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_verify_mobile_with_code_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_verify_mobile_with_code_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_verify_mobile_with_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_verify_mobile_with_code_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_verify_mobile_with_code_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_verify_mobile_with_code_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_verify_mobile_with_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_verify_mobile_with_code_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_send_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $content = null;
  public $restaurant_id = null;
  public $admin_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'admin_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_order_send_args extends TBase {
  static $_TSPEC;

  public $order_id = null;
  public $admin_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'admin_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_order_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_order_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_order_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_order_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_order_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_order_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_order_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_set_message_read_status_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;
  public $read_status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'read_status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_set_message_read_status_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_set_message_read_status_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_set_message_read_status_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_set_message_read_status_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_set_message_read_status_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_set_message_read_status_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_set_message_read_status_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_set_message_restaurant_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;
  public $rst_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rst_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_set_message_restaurant_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_set_message_restaurant_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_set_message_restaurant_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_admin_set_message_restaurant_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_admin_set_message_restaurant_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_admin_set_message_restaurant_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_admin_set_message_restaurant_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_validation_code_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_validation_code_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_validation_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_validation_code_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_validation_code_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_validation_code_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_validation_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_validation_code_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_confirm_validation_code_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $validate_code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'validate_code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_confirm_validation_code_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_confirm_validation_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_confirm_validation_code_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_confirm_validation_code_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_confirm_validation_code_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_confirm_validation_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_confirm_validation_code_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_ctc_receive_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ShortMessageService_ctc_receive_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_ctc_receive_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_ctc_receive_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_ctc_receive_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_ctc_receive_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_ctc_receive_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_ctc_receive_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_ctc_report_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ShortMessageService_ctc_report_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_ctc_report_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_ctc_report_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_ctc_report_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_ctc_report_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_ctc_report_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_ctc_report_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_post_make_order_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_post_make_order_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_post_make_order_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_post_make_order_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_post_make_order_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_post_make_order_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_post_make_order_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_post_make_order_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_distribute_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_distribute_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_distribute_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_distribute_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_distribute_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_distribute_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_distribute_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_distribute_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_send_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_send_voice_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_send_voice_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_send_voice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_send_voice_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_send_voice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_send_voice_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_send_voice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_send_voice_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_receive_args extends TBase {
  static $_TSPEC;

  public $content_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_receive_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_receive_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_receive_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_receive_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_receive_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_receive_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_receive_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_report_args extends TBase {
  static $_TSPEC;

  public $content_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_report_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_report_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_report_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_report_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_report_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_report_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_report_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_report_voice_args extends TBase {
  static $_TSPEC;

  public $content_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_report_voice_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_report_voice_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_report_voice_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_report_voice_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_report_voice_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_report_voice_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_report_voice_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_ai_auto_send_args extends TBase {
  static $_TSPEC;

  public $order_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'order_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_ai_auto_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_ai_auto_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_ai_auto_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_ai_auto_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_ai_auto_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_ai_auto_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_ai_auto_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_ai_auto_confirm_args extends TBase {
  static $_TSPEC;

  public $sms_receive_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sms_receive_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_ai_auto_confirm_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_ai_auto_confirm_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_ai_auto_confirm_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_process_ai_auto_confirm_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_process_ai_auto_confirm_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_process_ai_auto_confirm_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_process_ai_auto_confirm_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_set_pushed_content_status_args extends TBase {
  static $_TSPEC;

  public $sms_pushed_content_id = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sms_pushed_content_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_set_pushed_content_status_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_set_pushed_content_status_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_set_pushed_content_status_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_set_pushed_content_status_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_set_pushed_content_status_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_set_pushed_content_status_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_set_pushed_content_status_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_send_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_send_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SMS\TSMSSend',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_mget_send_args extends TBase {
  static $_TSPEC;

  public $msg_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_mget_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_mget_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_mget_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_mget_send_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SMS\TSMSSend',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_mget_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_mget_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_mget_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_send_by_mobile_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_send_by_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_send_by_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_send_by_mobile_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_send_by_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SMS\TSMSSend',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_send_by_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_send_by_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_send_by_mobile_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_verify_code_by_mobile_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_verify_code_by_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_verify_code_by_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_verify_code_by_mobile_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_verify_code_by_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SMS\TSMSVerifyCode',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_verify_code_by_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_verify_code_by_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_verify_code_by_mobile_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_receive_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_receive_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_receive_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_receive_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_receive_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SMS\TSMSReceive',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_receive_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_receive_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_receive_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_mget_receive_args extends TBase {
  static $_TSPEC;

  public $msg_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_mget_receive_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_mget_receive_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_mget_receive_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_mget_receive_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SMS\TSMSReceive',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_mget_receive_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_mget_receive_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_mget_receive_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_receive_by_mobile_args extends TBase {
  static $_TSPEC;

  public $mobile = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_receive_by_mobile_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_receive_by_mobile_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_receive_by_mobile_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_receive_by_mobile_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SMS\TSMSReceive',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_receive_by_mobile_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_receive_by_mobile_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_receive_by_mobile_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_admin_args extends TBase {
  static $_TSPEC;

  public $msg_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_admin_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_get_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\SMS\TSMSAdmin',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_get_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_get_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_get_admin_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_mget_admin_args extends TBase {
  static $_TSPEC;

  public $msg_ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'msg_ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_mget_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_mget_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_mget_admin_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_mget_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SMS\TSMSAdmin',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_mget_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_mget_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_mget_admin_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_admin_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\SMS\TSMSAdminQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_admin_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_query_admin_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\SMS\TSMSAdmin',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_query_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_query_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_query_admin_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_sms_inspect_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ShortMessageService_sms_inspect_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_sms_inspect_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_sms_inspect_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_sms_inspect_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_sms_inspect_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_sms_inspect_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_sms_inspect_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_voice_unsend_report_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ShortMessageService_voice_unsend_report_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_voice_unsend_report_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_voice_unsend_report_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_voice_unsend_report_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_voice_unsend_report_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_voice_unsend_report_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_voice_unsend_report_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_update_sms_send_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_update_sms_send_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_update_sms_send_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_update_sms_send_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_update_sms_send_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_update_sms_send_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_update_sms_send_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_update_sms_send_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_update_sms_receive_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_update_sms_receive_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_update_sms_receive_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_update_sms_receive_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_update_sms_receive_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_update_sms_receive_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_update_sms_receive_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_update_sms_receive_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_update_sms_admin_args extends TBase {
  static $_TSPEC;

  public $ids = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ids',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_update_sms_admin_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_update_sms_admin_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_update_sms_admin_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_signal_update_sms_admin_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_signal_update_sms_admin_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_signal_update_sms_admin_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_signal_update_sms_admin_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_reply_push_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $content = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_reply_push_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_reply_push_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_reply_push_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_reply_push_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_reply_push_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_reply_push_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_reply_push_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_report_push_args extends TBase {
  static $_TSPEC;

  public $mobile = null;
  public $status = null;
  public $task_id = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'status',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'task_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_report_push_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_report_push_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_report_push_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_report_push_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_report_push_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_report_push_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_report_push_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_send_verify_code_args extends TBase {
  static $_TSPEC;

  public $sender_key = null;
  public $mobile = null;
  public $via_audio = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sender_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'via_audio',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_send_verify_code_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_send_verify_code_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_send_verify_code_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_send_verify_code_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_send_verify_code_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_send_verify_code_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_send_verify_code_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_validate_verify_code_with_hash_args extends TBase {
  static $_TSPEC;

  public $sender_key = null;
  public $hash_value = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sender_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'hash_value',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_validate_verify_code_with_hash_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_validate_verify_code_with_hash_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_validate_verify_code_with_hash_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_validate_verify_code_with_hash_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_validate_verify_code_with_hash_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_validate_verify_code_with_hash_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_validate_verify_code_with_hash_result', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_validate_verify_code_with_receiver_args extends TBase {
  static $_TSPEC;

  public $sender_key = null;
  public $receiver = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sender_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'receiver',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'code',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_validate_verify_code_with_receiver_args';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_validate_verify_code_with_receiver_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_validate_verify_code_with_receiver_args', self::$_TSPEC, $output);
  }
}

class ShortMessageService_hermes_validate_verify_code_with_receiver_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\SMS\SMSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ShortMessageService_hermes_validate_verify_code_with_receiver_result';
  }

  public function read($input)
  {
    return $this->_read('ShortMessageService_hermes_validate_verify_code_with_receiver_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ShortMessageService_hermes_validate_verify_code_with_receiver_result', self::$_TSPEC, $output);
  }
}


