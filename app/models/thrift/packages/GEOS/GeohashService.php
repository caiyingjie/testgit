<?php
namespace GEOS;
/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface GeohashServiceIf {
  public function ping();
  public function mcount_restaurant_by_position($positions);
  public function mcount_restaurant_by_geohash($geohashes);
  public function get_geohash_region_map($geohashes);
  public function support_online_payment($geohash_id);
  public function save_rrc_region($rrc_region_id, \GEOS\TRrcRegion $rrc_region);
  public function post_rrc_ranking($rrc_region_id, $ranking_map, $user_id);
  public function get_restaurant_deliver_amount($restaurant_id, $geohash_id);
  public function get_restaurant_das($geohash_id);
  public function get_restaurant_das_by_psn($psn, $is_premium);
  public function get_premium_restaurant_das($geohash_id);
  public function post_update_restaurant_deliver_geojson($cl_restaurant_id);
  public function post_update_rrc_region_area($cl_rrc_region_id);
  public function remove_rrc_region($rrc_region_id);
  public function post_update_region_area($cl_region_id);
  public function post_delete_region($dl_region_id);
  public function crawl_all_geohashes($step);
  public function crawl_geohashes($geohashes);
  public function crawl_poi($pguid);
  public function save_poi($poi_id, \GEOS\TPoi $t_poi);
  public function msave_poi_by_pguid($t_pois);
  public function msave_poi($t_pois);
  public function save_deliver_geojson($restaurant_id);
  public function get_geohash_name($geohash_id);
  public function count_rrc_region(\GEOS\TRrcRegionQuery $query_struct);
  public function query_rrc_region(\GEOS\TRrcRegionQuery $query_struct);
  public function query_rrc_region_use_geo(\GEOS\TRrcRegionQuery $query_struct);
  public function get_rrc_region($rrc_region_id);
  public function query_rrc_region_ranking($rrc_region_id);
  public function get_region_id($geohash);
  public function get_region_id_by_point($latitude, $longitude);
  public function master_get_poi($poi_id);
  public function get_poi($poi_id);
  public function get_poi_by_pguid($pguid);
  public function get_poi_by_psn($psn);
  public function mget_poi_by_psn($psn_list);
  public function get_poi_by_loc($lat, $lon);
  public function get_poi_by_name($lat, $lon, $name);
  public function query_poi_in_box($lat1, $lon1, $lat2, $lon2);
}

class GeohashServiceClient implements \GEOS\GeohashServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function ping()
  {
    $this->send_ping();
    return $this->recv_ping();
  }

  public function send_ping()
  {
    $args = new \GEOS\GeohashService_ping_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ping', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ping', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ping()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_ping_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_ping_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("ping failed: unknown result");
  }

  public function mcount_restaurant_by_position($positions)
  {
    $this->send_mcount_restaurant_by_position($positions);
    return $this->recv_mcount_restaurant_by_position();
  }

  public function send_mcount_restaurant_by_position($positions)
  {
    $args = new \GEOS\GeohashService_mcount_restaurant_by_position_args();
    $args->positions = $positions;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mcount_restaurant_by_position', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mcount_restaurant_by_position', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mcount_restaurant_by_position()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_mcount_restaurant_by_position_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_mcount_restaurant_by_position_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mcount_restaurant_by_position failed: unknown result");
  }

  public function mcount_restaurant_by_geohash($geohashes)
  {
    $this->send_mcount_restaurant_by_geohash($geohashes);
    return $this->recv_mcount_restaurant_by_geohash();
  }

  public function send_mcount_restaurant_by_geohash($geohashes)
  {
    $args = new \GEOS\GeohashService_mcount_restaurant_by_geohash_args();
    $args->geohashes = $geohashes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mcount_restaurant_by_geohash', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mcount_restaurant_by_geohash', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mcount_restaurant_by_geohash()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_mcount_restaurant_by_geohash_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_mcount_restaurant_by_geohash_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mcount_restaurant_by_geohash failed: unknown result");
  }

  public function get_geohash_region_map($geohashes)
  {
    $this->send_get_geohash_region_map($geohashes);
    return $this->recv_get_geohash_region_map();
  }

  public function send_get_geohash_region_map($geohashes)
  {
    $args = new \GEOS\GeohashService_get_geohash_region_map_args();
    $args->geohashes = $geohashes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_geohash_region_map', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_geohash_region_map', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_geohash_region_map()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_geohash_region_map_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_geohash_region_map_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_geohash_region_map failed: unknown result");
  }

  public function support_online_payment($geohash_id)
  {
    $this->send_support_online_payment($geohash_id);
    return $this->recv_support_online_payment();
  }

  public function send_support_online_payment($geohash_id)
  {
    $args = new \GEOS\GeohashService_support_online_payment_args();
    $args->geohash_id = $geohash_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'support_online_payment', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('support_online_payment', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_support_online_payment()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_support_online_payment_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_support_online_payment_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("support_online_payment failed: unknown result");
  }

  public function save_rrc_region($rrc_region_id, \GEOS\TRrcRegion $rrc_region)
  {
    $this->send_save_rrc_region($rrc_region_id, $rrc_region);
    return $this->recv_save_rrc_region();
  }

  public function send_save_rrc_region($rrc_region_id, \GEOS\TRrcRegion $rrc_region)
  {
    $args = new \GEOS\GeohashService_save_rrc_region_args();
    $args->rrc_region_id = $rrc_region_id;
    $args->rrc_region = $rrc_region;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_rrc_region', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_rrc_region', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_rrc_region()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_save_rrc_region_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_save_rrc_region_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("save_rrc_region failed: unknown result");
  }

  public function post_rrc_ranking($rrc_region_id, $ranking_map, $user_id)
  {
    $this->send_post_rrc_ranking($rrc_region_id, $ranking_map, $user_id);
    $this->recv_post_rrc_ranking();
  }

  public function send_post_rrc_ranking($rrc_region_id, $ranking_map, $user_id)
  {
    $args = new \GEOS\GeohashService_post_rrc_ranking_args();
    $args->rrc_region_id = $rrc_region_id;
    $args->ranking_map = $ranking_map;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'post_rrc_ranking', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('post_rrc_ranking', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_post_rrc_ranking()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_post_rrc_ranking_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_post_rrc_ranking_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_restaurant_deliver_amount($restaurant_id, $geohash_id)
  {
    $this->send_get_restaurant_deliver_amount($restaurant_id, $geohash_id);
    return $this->recv_get_restaurant_deliver_amount();
  }

  public function send_get_restaurant_deliver_amount($restaurant_id, $geohash_id)
  {
    $args = new \GEOS\GeohashService_get_restaurant_deliver_amount_args();
    $args->restaurant_id = $restaurant_id;
    $args->geohash_id = $geohash_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_restaurant_deliver_amount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_restaurant_deliver_amount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_restaurant_deliver_amount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_restaurant_deliver_amount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_restaurant_deliver_amount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_restaurant_deliver_amount failed: unknown result");
  }

  public function get_restaurant_das($geohash_id)
  {
    $this->send_get_restaurant_das($geohash_id);
    return $this->recv_get_restaurant_das();
  }

  public function send_get_restaurant_das($geohash_id)
  {
    $args = new \GEOS\GeohashService_get_restaurant_das_args();
    $args->geohash_id = $geohash_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_restaurant_das', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_restaurant_das', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_restaurant_das()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_restaurant_das_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_restaurant_das_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_restaurant_das failed: unknown result");
  }

  public function get_restaurant_das_by_psn($psn, $is_premium)
  {
    $this->send_get_restaurant_das_by_psn($psn, $is_premium);
    return $this->recv_get_restaurant_das_by_psn();
  }

  public function send_get_restaurant_das_by_psn($psn, $is_premium)
  {
    $args = new \GEOS\GeohashService_get_restaurant_das_by_psn_args();
    $args->psn = $psn;
    $args->is_premium = $is_premium;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_restaurant_das_by_psn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_restaurant_das_by_psn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_restaurant_das_by_psn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_restaurant_das_by_psn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_restaurant_das_by_psn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_restaurant_das_by_psn failed: unknown result");
  }

  public function get_premium_restaurant_das($geohash_id)
  {
    $this->send_get_premium_restaurant_das($geohash_id);
    return $this->recv_get_premium_restaurant_das();
  }

  public function send_get_premium_restaurant_das($geohash_id)
  {
    $args = new \GEOS\GeohashService_get_premium_restaurant_das_args();
    $args->geohash_id = $geohash_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_premium_restaurant_das', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_premium_restaurant_das', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_premium_restaurant_das()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_premium_restaurant_das_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_premium_restaurant_das_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_premium_restaurant_das failed: unknown result");
  }

  public function post_update_restaurant_deliver_geojson($cl_restaurant_id)
  {
    $this->send_post_update_restaurant_deliver_geojson($cl_restaurant_id);
    $this->recv_post_update_restaurant_deliver_geojson();
  }

  public function send_post_update_restaurant_deliver_geojson($cl_restaurant_id)
  {
    $args = new \GEOS\GeohashService_post_update_restaurant_deliver_geojson_args();
    $args->cl_restaurant_id = $cl_restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'post_update_restaurant_deliver_geojson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('post_update_restaurant_deliver_geojson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_post_update_restaurant_deliver_geojson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_post_update_restaurant_deliver_geojson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_post_update_restaurant_deliver_geojson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function post_update_rrc_region_area($cl_rrc_region_id)
  {
    $this->send_post_update_rrc_region_area($cl_rrc_region_id);
    $this->recv_post_update_rrc_region_area();
  }

  public function send_post_update_rrc_region_area($cl_rrc_region_id)
  {
    $args = new \GEOS\GeohashService_post_update_rrc_region_area_args();
    $args->cl_rrc_region_id = $cl_rrc_region_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'post_update_rrc_region_area', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('post_update_rrc_region_area', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_post_update_rrc_region_area()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_post_update_rrc_region_area_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_post_update_rrc_region_area_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function remove_rrc_region($rrc_region_id)
  {
    $this->send_remove_rrc_region($rrc_region_id);
    $this->recv_remove_rrc_region();
  }

  public function send_remove_rrc_region($rrc_region_id)
  {
    $args = new \GEOS\GeohashService_remove_rrc_region_args();
    $args->rrc_region_id = $rrc_region_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'remove_rrc_region', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('remove_rrc_region', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_remove_rrc_region()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_remove_rrc_region_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_remove_rrc_region_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function post_update_region_area($cl_region_id)
  {
    $this->send_post_update_region_area($cl_region_id);
    $this->recv_post_update_region_area();
  }

  public function send_post_update_region_area($cl_region_id)
  {
    $args = new \GEOS\GeohashService_post_update_region_area_args();
    $args->cl_region_id = $cl_region_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'post_update_region_area', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('post_update_region_area', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_post_update_region_area()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_post_update_region_area_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_post_update_region_area_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function post_delete_region($dl_region_id)
  {
    $this->send_post_delete_region($dl_region_id);
    $this->recv_post_delete_region();
  }

  public function send_post_delete_region($dl_region_id)
  {
    $args = new \GEOS\GeohashService_post_delete_region_args();
    $args->dl_region_id = $dl_region_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'post_delete_region', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('post_delete_region', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_post_delete_region()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_post_delete_region_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_post_delete_region_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function crawl_all_geohashes($step)
  {
    $this->send_crawl_all_geohashes($step);
    $this->recv_crawl_all_geohashes();
  }

  public function send_crawl_all_geohashes($step)
  {
    $args = new \GEOS\GeohashService_crawl_all_geohashes_args();
    $args->step = $step;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'crawl_all_geohashes', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('crawl_all_geohashes', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_crawl_all_geohashes()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_crawl_all_geohashes_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_crawl_all_geohashes_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function crawl_geohashes($geohashes)
  {
    $this->send_crawl_geohashes($geohashes);
    $this->recv_crawl_geohashes();
  }

  public function send_crawl_geohashes($geohashes)
  {
    $args = new \GEOS\GeohashService_crawl_geohashes_args();
    $args->geohashes = $geohashes;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'crawl_geohashes', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('crawl_geohashes', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_crawl_geohashes()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_crawl_geohashes_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_crawl_geohashes_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function crawl_poi($pguid)
  {
    $this->send_crawl_poi($pguid);
    $this->recv_crawl_poi();
  }

  public function send_crawl_poi($pguid)
  {
    $args = new \GEOS\GeohashService_crawl_poi_args();
    $args->pguid = $pguid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'crawl_poi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('crawl_poi', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_crawl_poi()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_crawl_poi_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_crawl_poi_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function save_poi($poi_id, \GEOS\TPoi $t_poi)
  {
    $this->send_save_poi($poi_id, $t_poi);
    return $this->recv_save_poi();
  }

  public function send_save_poi($poi_id, \GEOS\TPoi $t_poi)
  {
    $args = new \GEOS\GeohashService_save_poi_args();
    $args->poi_id = $poi_id;
    $args->t_poi = $t_poi;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_poi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_poi', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_poi()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_save_poi_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_save_poi_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("save_poi failed: unknown result");
  }

  public function msave_poi_by_pguid($t_pois)
  {
    $this->send_msave_poi_by_pguid($t_pois);
    $this->recv_msave_poi_by_pguid();
  }

  public function send_msave_poi_by_pguid($t_pois)
  {
    $args = new \GEOS\GeohashService_msave_poi_by_pguid_args();
    $args->t_pois = $t_pois;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'msave_poi_by_pguid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('msave_poi_by_pguid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_msave_poi_by_pguid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_msave_poi_by_pguid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_msave_poi_by_pguid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function msave_poi($t_pois)
  {
    $this->send_msave_poi($t_pois);
    $this->recv_msave_poi();
  }

  public function send_msave_poi($t_pois)
  {
    $args = new \GEOS\GeohashService_msave_poi_args();
    $args->t_pois = $t_pois;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'msave_poi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('msave_poi', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_msave_poi()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_msave_poi_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_msave_poi_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function save_deliver_geojson($restaurant_id)
  {
    $this->send_save_deliver_geojson($restaurant_id);
    $this->recv_save_deliver_geojson();
  }

  public function send_save_deliver_geojson($restaurant_id)
  {
    $args = new \GEOS\GeohashService_save_deliver_geojson_args();
    $args->restaurant_id = $restaurant_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'save_deliver_geojson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('save_deliver_geojson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_save_deliver_geojson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_save_deliver_geojson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_save_deliver_geojson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    return;
  }

  public function get_geohash_name($geohash_id)
  {
    $this->send_get_geohash_name($geohash_id);
    return $this->recv_get_geohash_name();
  }

  public function send_get_geohash_name($geohash_id)
  {
    $args = new \GEOS\GeohashService_get_geohash_name_args();
    $args->geohash_id = $geohash_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_geohash_name', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_geohash_name', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_geohash_name()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_geohash_name_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_geohash_name_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_geohash_name failed: unknown result");
  }

  public function count_rrc_region(\GEOS\TRrcRegionQuery $query_struct)
  {
    $this->send_count_rrc_region($query_struct);
    return $this->recv_count_rrc_region();
  }

  public function send_count_rrc_region(\GEOS\TRrcRegionQuery $query_struct)
  {
    $args = new \GEOS\GeohashService_count_rrc_region_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'count_rrc_region', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('count_rrc_region', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_count_rrc_region()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_count_rrc_region_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_count_rrc_region_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("count_rrc_region failed: unknown result");
  }

  public function query_rrc_region(\GEOS\TRrcRegionQuery $query_struct)
  {
    $this->send_query_rrc_region($query_struct);
    return $this->recv_query_rrc_region();
  }

  public function send_query_rrc_region(\GEOS\TRrcRegionQuery $query_struct)
  {
    $args = new \GEOS\GeohashService_query_rrc_region_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_rrc_region', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_rrc_region', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_rrc_region()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_query_rrc_region_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_query_rrc_region_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_rrc_region failed: unknown result");
  }

  public function query_rrc_region_use_geo(\GEOS\TRrcRegionQuery $query_struct)
  {
    $this->send_query_rrc_region_use_geo($query_struct);
    return $this->recv_query_rrc_region_use_geo();
  }

  public function send_query_rrc_region_use_geo(\GEOS\TRrcRegionQuery $query_struct)
  {
    $args = new \GEOS\GeohashService_query_rrc_region_use_geo_args();
    $args->query_struct = $query_struct;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_rrc_region_use_geo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_rrc_region_use_geo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_rrc_region_use_geo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_query_rrc_region_use_geo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_query_rrc_region_use_geo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_rrc_region_use_geo failed: unknown result");
  }

  public function get_rrc_region($rrc_region_id)
  {
    $this->send_get_rrc_region($rrc_region_id);
    return $this->recv_get_rrc_region();
  }

  public function send_get_rrc_region($rrc_region_id)
  {
    $args = new \GEOS\GeohashService_get_rrc_region_args();
    $args->rrc_region_id = $rrc_region_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_rrc_region', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_rrc_region', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_rrc_region()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_rrc_region_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_rrc_region_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_rrc_region failed: unknown result");
  }

  public function query_rrc_region_ranking($rrc_region_id)
  {
    $this->send_query_rrc_region_ranking($rrc_region_id);
    return $this->recv_query_rrc_region_ranking();
  }

  public function send_query_rrc_region_ranking($rrc_region_id)
  {
    $args = new \GEOS\GeohashService_query_rrc_region_ranking_args();
    $args->rrc_region_id = $rrc_region_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_rrc_region_ranking', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_rrc_region_ranking', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_rrc_region_ranking()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_query_rrc_region_ranking_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_query_rrc_region_ranking_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_rrc_region_ranking failed: unknown result");
  }

  public function get_region_id($geohash)
  {
    $this->send_get_region_id($geohash);
    return $this->recv_get_region_id();
  }

  public function send_get_region_id($geohash)
  {
    $args = new \GEOS\GeohashService_get_region_id_args();
    $args->geohash = $geohash;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_region_id', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_region_id', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_region_id()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_region_id_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_region_id_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_region_id failed: unknown result");
  }

  public function get_region_id_by_point($latitude, $longitude)
  {
    $this->send_get_region_id_by_point($latitude, $longitude);
    return $this->recv_get_region_id_by_point();
  }

  public function send_get_region_id_by_point($latitude, $longitude)
  {
    $args = new \GEOS\GeohashService_get_region_id_by_point_args();
    $args->latitude = $latitude;
    $args->longitude = $longitude;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_region_id_by_point', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_region_id_by_point', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_region_id_by_point()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_region_id_by_point_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_region_id_by_point_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_region_id_by_point failed: unknown result");
  }

  public function master_get_poi($poi_id)
  {
    $this->send_master_get_poi($poi_id);
    return $this->recv_master_get_poi();
  }

  public function send_master_get_poi($poi_id)
  {
    $args = new \GEOS\GeohashService_master_get_poi_args();
    $args->poi_id = $poi_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'master_get_poi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('master_get_poi', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_master_get_poi()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_master_get_poi_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_master_get_poi_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("master_get_poi failed: unknown result");
  }

  public function get_poi($poi_id)
  {
    $this->send_get_poi($poi_id);
    return $this->recv_get_poi();
  }

  public function send_get_poi($poi_id)
  {
    $args = new \GEOS\GeohashService_get_poi_args();
    $args->poi_id = $poi_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_poi', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_poi', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_poi()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_poi_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_poi_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_poi failed: unknown result");
  }

  public function get_poi_by_pguid($pguid)
  {
    $this->send_get_poi_by_pguid($pguid);
    return $this->recv_get_poi_by_pguid();
  }

  public function send_get_poi_by_pguid($pguid)
  {
    $args = new \GEOS\GeohashService_get_poi_by_pguid_args();
    $args->pguid = $pguid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_poi_by_pguid', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_poi_by_pguid', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_poi_by_pguid()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_poi_by_pguid_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_poi_by_pguid_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_poi_by_pguid failed: unknown result");
  }

  public function get_poi_by_psn($psn)
  {
    $this->send_get_poi_by_psn($psn);
    return $this->recv_get_poi_by_psn();
  }

  public function send_get_poi_by_psn($psn)
  {
    $args = new \GEOS\GeohashService_get_poi_by_psn_args();
    $args->psn = $psn;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_poi_by_psn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_poi_by_psn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_poi_by_psn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_poi_by_psn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_poi_by_psn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_poi_by_psn failed: unknown result");
  }

  public function mget_poi_by_psn($psn_list)
  {
    $this->send_mget_poi_by_psn($psn_list);
    return $this->recv_mget_poi_by_psn();
  }

  public function send_mget_poi_by_psn($psn_list)
  {
    $args = new \GEOS\GeohashService_mget_poi_by_psn_args();
    $args->psn_list = $psn_list;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'mget_poi_by_psn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('mget_poi_by_psn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_mget_poi_by_psn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_mget_poi_by_psn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_mget_poi_by_psn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("mget_poi_by_psn failed: unknown result");
  }

  public function get_poi_by_loc($lat, $lon)
  {
    $this->send_get_poi_by_loc($lat, $lon);
    return $this->recv_get_poi_by_loc();
  }

  public function send_get_poi_by_loc($lat, $lon)
  {
    $args = new \GEOS\GeohashService_get_poi_by_loc_args();
    $args->lat = $lat;
    $args->lon = $lon;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_poi_by_loc', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_poi_by_loc', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_poi_by_loc()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_poi_by_loc_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_poi_by_loc_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_poi_by_loc failed: unknown result");
  }

  public function get_poi_by_name($lat, $lon, $name)
  {
    $this->send_get_poi_by_name($lat, $lon, $name);
    return $this->recv_get_poi_by_name();
  }

  public function send_get_poi_by_name($lat, $lon, $name)
  {
    $args = new \GEOS\GeohashService_get_poi_by_name_args();
    $args->lat = $lat;
    $args->lon = $lon;
    $args->name = $name;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_poi_by_name', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_poi_by_name', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_poi_by_name()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_get_poi_by_name_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_get_poi_by_name_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("get_poi_by_name failed: unknown result");
  }

  public function query_poi_in_box($lat1, $lon1, $lat2, $lon2)
  {
    $this->send_query_poi_in_box($lat1, $lon1, $lat2, $lon2);
    return $this->recv_query_poi_in_box();
  }

  public function send_query_poi_in_box($lat1, $lon1, $lat2, $lon2)
  {
    $args = new \GEOS\GeohashService_query_poi_in_box_args();
    $args->lat1 = $lat1;
    $args->lon1 = $lon1;
    $args->lat2 = $lat2;
    $args->lon2 = $lon2;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'query_poi_in_box', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('query_poi_in_box', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_query_poi_in_box()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\GEOS\GeohashService_query_poi_in_box_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \GEOS\GeohashService_query_poi_in_box_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->user_exception !== null) {
      throw $result->user_exception;
    }
    if ($result->system_exception !== null) {
      throw $result->system_exception;
    }
    if ($result->unkown_exception !== null) {
      throw $result->unkown_exception;
    }
    throw new \Exception("query_poi_in_box failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class GeohashService_ping_args extends TBase {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'GeohashService_ping_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_ping_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_ping_args', self::$_TSPEC, $output);
  }
}

class GeohashService_ping_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_ping_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_ping_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_ping_result', self::$_TSPEC, $output);
  }
}

class GeohashService_mcount_restaurant_by_position_args extends TBase {
  static $_TSPEC;

  public $positions = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'positions',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_mcount_restaurant_by_position_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_mcount_restaurant_by_position_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_mcount_restaurant_by_position_args', self::$_TSPEC, $output);
  }
}

class GeohashService_mcount_restaurant_by_position_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_mcount_restaurant_by_position_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_mcount_restaurant_by_position_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_mcount_restaurant_by_position_result', self::$_TSPEC, $output);
  }
}

class GeohashService_mcount_restaurant_by_geohash_args extends TBase {
  static $_TSPEC;

  public $geohashes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohashes',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_mcount_restaurant_by_geohash_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_mcount_restaurant_by_geohash_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_mcount_restaurant_by_geohash_args', self::$_TSPEC, $output);
  }
}

class GeohashService_mcount_restaurant_by_geohash_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_mcount_restaurant_by_geohash_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_mcount_restaurant_by_geohash_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_mcount_restaurant_by_geohash_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_geohash_region_map_args extends TBase {
  static $_TSPEC;

  public $geohashes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohashes',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_geohash_region_map_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_geohash_region_map_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_geohash_region_map_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_geohash_region_map_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_geohash_region_map_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_geohash_region_map_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_geohash_region_map_result', self::$_TSPEC, $output);
  }
}

class GeohashService_support_online_payment_args extends TBase {
  static $_TSPEC;

  public $geohash_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohash_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_support_online_payment_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_support_online_payment_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_support_online_payment_args', self::$_TSPEC, $output);
  }
}

class GeohashService_support_online_payment_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_support_online_payment_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_support_online_payment_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_support_online_payment_result', self::$_TSPEC, $output);
  }
}

class GeohashService_save_rrc_region_args extends TBase {
  static $_TSPEC;

  public $rrc_region_id = null;
  public $rrc_region = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rrc_region_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'rrc_region',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TRrcRegion',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_save_rrc_region_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_save_rrc_region_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_save_rrc_region_args', self::$_TSPEC, $output);
  }
}

class GeohashService_save_rrc_region_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_save_rrc_region_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_save_rrc_region_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_save_rrc_region_result', self::$_TSPEC, $output);
  }
}

class GeohashService_post_rrc_ranking_args extends TBase {
  static $_TSPEC;

  public $rrc_region_id = null;
  public $ranking_map = null;
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rrc_region_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ranking_map',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_rrc_ranking_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_rrc_ranking_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_rrc_ranking_args', self::$_TSPEC, $output);
  }
}

class GeohashService_post_rrc_ranking_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_rrc_ranking_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_rrc_ranking_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_rrc_ranking_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_restaurant_deliver_amount_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;
  public $geohash_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'geohash_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_restaurant_deliver_amount_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_restaurant_deliver_amount_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_restaurant_deliver_amount_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_restaurant_deliver_amount_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::DOUBLE,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_restaurant_deliver_amount_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_restaurant_deliver_amount_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_restaurant_deliver_amount_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_restaurant_das_args extends TBase {
  static $_TSPEC;

  public $geohash_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohash_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_restaurant_das_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_restaurant_das_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_restaurant_das_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_restaurant_das_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::DOUBLE,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::DOUBLE,
              ),
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_restaurant_das_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_restaurant_das_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_restaurant_das_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_restaurant_das_by_psn_args extends TBase {
  static $_TSPEC;

  public $psn = null;
  public $is_premium = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'psn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'is_premium',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_restaurant_das_by_psn_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_restaurant_das_by_psn_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_restaurant_das_by_psn_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_restaurant_das_by_psn_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::DOUBLE,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::DOUBLE,
              ),
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_restaurant_das_by_psn_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_restaurant_das_by_psn_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_restaurant_das_by_psn_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_premium_restaurant_das_args extends TBase {
  static $_TSPEC;

  public $geohash_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohash_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_premium_restaurant_das_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_premium_restaurant_das_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_premium_restaurant_das_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_premium_restaurant_das_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::I32,
            'vtype' => TType::DOUBLE,
            'key' => array(
              'type' => TType::I32,
            ),
            'val' => array(
              'type' => TType::DOUBLE,
              ),
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_premium_restaurant_das_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_premium_restaurant_das_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_premium_restaurant_das_result', self::$_TSPEC, $output);
  }
}

class GeohashService_post_update_restaurant_deliver_geojson_args extends TBase {
  static $_TSPEC;

  public $cl_restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cl_restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_update_restaurant_deliver_geojson_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_update_restaurant_deliver_geojson_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_update_restaurant_deliver_geojson_args', self::$_TSPEC, $output);
  }
}

class GeohashService_post_update_restaurant_deliver_geojson_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_update_restaurant_deliver_geojson_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_update_restaurant_deliver_geojson_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_update_restaurant_deliver_geojson_result', self::$_TSPEC, $output);
  }
}

class GeohashService_post_update_rrc_region_area_args extends TBase {
  static $_TSPEC;

  public $cl_rrc_region_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cl_rrc_region_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_update_rrc_region_area_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_update_rrc_region_area_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_update_rrc_region_area_args', self::$_TSPEC, $output);
  }
}

class GeohashService_post_update_rrc_region_area_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_update_rrc_region_area_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_update_rrc_region_area_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_update_rrc_region_area_result', self::$_TSPEC, $output);
  }
}

class GeohashService_remove_rrc_region_args extends TBase {
  static $_TSPEC;

  public $rrc_region_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rrc_region_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_remove_rrc_region_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_remove_rrc_region_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_remove_rrc_region_args', self::$_TSPEC, $output);
  }
}

class GeohashService_remove_rrc_region_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_remove_rrc_region_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_remove_rrc_region_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_remove_rrc_region_result', self::$_TSPEC, $output);
  }
}

class GeohashService_post_update_region_area_args extends TBase {
  static $_TSPEC;

  public $cl_region_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cl_region_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_update_region_area_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_update_region_area_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_update_region_area_args', self::$_TSPEC, $output);
  }
}

class GeohashService_post_update_region_area_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_update_region_area_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_update_region_area_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_update_region_area_result', self::$_TSPEC, $output);
  }
}

class GeohashService_post_delete_region_args extends TBase {
  static $_TSPEC;

  public $dl_region_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dl_region_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_delete_region_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_delete_region_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_delete_region_args', self::$_TSPEC, $output);
  }
}

class GeohashService_post_delete_region_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_post_delete_region_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_post_delete_region_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_post_delete_region_result', self::$_TSPEC, $output);
  }
}

class GeohashService_crawl_all_geohashes_args extends TBase {
  static $_TSPEC;

  public $step = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'step',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_crawl_all_geohashes_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_crawl_all_geohashes_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_crawl_all_geohashes_args', self::$_TSPEC, $output);
  }
}

class GeohashService_crawl_all_geohashes_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_crawl_all_geohashes_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_crawl_all_geohashes_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_crawl_all_geohashes_result', self::$_TSPEC, $output);
  }
}

class GeohashService_crawl_geohashes_args extends TBase {
  static $_TSPEC;

  public $geohashes = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohashes',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_crawl_geohashes_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_crawl_geohashes_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_crawl_geohashes_args', self::$_TSPEC, $output);
  }
}

class GeohashService_crawl_geohashes_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_crawl_geohashes_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_crawl_geohashes_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_crawl_geohashes_result', self::$_TSPEC, $output);
  }
}

class GeohashService_crawl_poi_args extends TBase {
  static $_TSPEC;

  public $pguid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pguid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_crawl_poi_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_crawl_poi_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_crawl_poi_args', self::$_TSPEC, $output);
  }
}

class GeohashService_crawl_poi_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_crawl_poi_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_crawl_poi_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_crawl_poi_result', self::$_TSPEC, $output);
  }
}

class GeohashService_save_poi_args extends TBase {
  static $_TSPEC;

  public $poi_id = null;
  public $t_poi = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'poi_id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 't_poi',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TPoi',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_save_poi_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_save_poi_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_save_poi_args', self::$_TSPEC, $output);
  }
}

class GeohashService_save_poi_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_save_poi_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_save_poi_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_save_poi_result', self::$_TSPEC, $output);
  }
}

class GeohashService_msave_poi_by_pguid_args extends TBase {
  static $_TSPEC;

  public $t_pois = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 't_pois',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GEOS\TPoi',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_msave_poi_by_pguid_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_msave_poi_by_pguid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_msave_poi_by_pguid_args', self::$_TSPEC, $output);
  }
}

class GeohashService_msave_poi_by_pguid_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_msave_poi_by_pguid_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_msave_poi_by_pguid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_msave_poi_by_pguid_result', self::$_TSPEC, $output);
  }
}

class GeohashService_msave_poi_args extends TBase {
  static $_TSPEC;

  public $t_pois = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 't_pois',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GEOS\TPoi',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_msave_poi_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_msave_poi_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_msave_poi_args', self::$_TSPEC, $output);
  }
}

class GeohashService_msave_poi_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_msave_poi_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_msave_poi_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_msave_poi_result', self::$_TSPEC, $output);
  }
}

class GeohashService_save_deliver_geojson_args extends TBase {
  static $_TSPEC;

  public $restaurant_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'restaurant_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_save_deliver_geojson_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_save_deliver_geojson_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_save_deliver_geojson_args', self::$_TSPEC, $output);
  }
}

class GeohashService_save_deliver_geojson_result extends TBase {
  static $_TSPEC;

  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_save_deliver_geojson_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_save_deliver_geojson_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_save_deliver_geojson_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_geohash_name_args extends TBase {
  static $_TSPEC;

  public $geohash_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohash_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_geohash_name_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_geohash_name_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_geohash_name_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_geohash_name_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TGeohashName',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_geohash_name_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_geohash_name_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_geohash_name_result', self::$_TSPEC, $output);
  }
}

class GeohashService_count_rrc_region_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TRrcRegionQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_count_rrc_region_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_count_rrc_region_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_count_rrc_region_args', self::$_TSPEC, $output);
  }
}

class GeohashService_count_rrc_region_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_count_rrc_region_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_count_rrc_region_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_count_rrc_region_result', self::$_TSPEC, $output);
  }
}

class GeohashService_query_rrc_region_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TRrcRegionQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_rrc_region_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_rrc_region_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_rrc_region_args', self::$_TSPEC, $output);
  }
}

class GeohashService_query_rrc_region_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GEOS\TRrcRegion',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_rrc_region_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_rrc_region_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_rrc_region_result', self::$_TSPEC, $output);
  }
}

class GeohashService_query_rrc_region_use_geo_args extends TBase {
  static $_TSPEC;

  public $query_struct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'query_struct',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TRrcRegionQuery',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_rrc_region_use_geo_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_rrc_region_use_geo_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_rrc_region_use_geo_args', self::$_TSPEC, $output);
  }
}

class GeohashService_query_rrc_region_use_geo_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GEOS\TRrcRegion',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_rrc_region_use_geo_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_rrc_region_use_geo_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_rrc_region_use_geo_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_rrc_region_args extends TBase {
  static $_TSPEC;

  public $rrc_region_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rrc_region_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_rrc_region_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_rrc_region_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_rrc_region_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_rrc_region_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TRrcRegion',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_rrc_region_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_rrc_region_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_rrc_region_result', self::$_TSPEC, $output);
  }
}

class GeohashService_query_rrc_region_ranking_args extends TBase {
  static $_TSPEC;

  public $rrc_region_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rrc_region_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_rrc_region_ranking_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_rrc_region_ranking_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_rrc_region_ranking_args', self::$_TSPEC, $output);
  }
}

class GeohashService_query_rrc_region_ranking_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GEOS\TRrcRegionRanking',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_rrc_region_ranking_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_rrc_region_ranking_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_rrc_region_ranking_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_region_id_args extends TBase {
  static $_TSPEC;

  public $geohash = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'geohash',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_region_id_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_region_id_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_region_id_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_region_id_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_region_id_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_region_id_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_region_id_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_region_id_by_point_args extends TBase {
  static $_TSPEC;

  public $latitude = null;
  public $longitude = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'latitude',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'longitude',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_region_id_by_point_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_region_id_by_point_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_region_id_by_point_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_region_id_by_point_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_region_id_by_point_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_region_id_by_point_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_region_id_by_point_result', self::$_TSPEC, $output);
  }
}

class GeohashService_master_get_poi_args extends TBase {
  static $_TSPEC;

  public $poi_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'poi_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_master_get_poi_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_master_get_poi_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_master_get_poi_args', self::$_TSPEC, $output);
  }
}

class GeohashService_master_get_poi_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TPoi',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_master_get_poi_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_master_get_poi_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_master_get_poi_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_args extends TBase {
  static $_TSPEC;

  public $poi_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'poi_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TPoi',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_pguid_args extends TBase {
  static $_TSPEC;

  public $pguid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'pguid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_pguid_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_pguid_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_pguid_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_pguid_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TPoi',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_pguid_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_pguid_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_pguid_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_psn_args extends TBase {
  static $_TSPEC;

  public $psn = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'psn',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_psn_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_psn_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_psn_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_psn_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TPoi',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_psn_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_psn_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_psn_result', self::$_TSPEC, $output);
  }
}

class GeohashService_mget_poi_by_psn_args extends TBase {
  static $_TSPEC;

  public $psn_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'psn_list',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_mget_poi_by_psn_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_mget_poi_by_psn_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_mget_poi_by_psn_args', self::$_TSPEC, $output);
  }
}

class GeohashService_mget_poi_by_psn_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GEOS\TPoi',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_mget_poi_by_psn_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_mget_poi_by_psn_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_mget_poi_by_psn_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_loc_args extends TBase {
  static $_TSPEC;

  public $lat = null;
  public $lon = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'lon',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_loc_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_loc_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_loc_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_loc_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TPoi',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_loc_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_loc_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_loc_result', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_name_args extends TBase {
  static $_TSPEC;

  public $lat = null;
  public $lon = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lat',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'lon',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_name_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_name_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_name_args', self::$_TSPEC, $output);
  }
}

class GeohashService_get_poi_by_name_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\GEOS\TPoi',
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_get_poi_by_name_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_get_poi_by_name_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_get_poi_by_name_result', self::$_TSPEC, $output);
  }
}

class GeohashService_query_poi_in_box_args extends TBase {
  static $_TSPEC;

  public $lat1 = null;
  public $lon1 = null;
  public $lat2 = null;
  public $lon2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'lat1',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'lon1',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'lat2',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'lon2',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_poi_in_box_args';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_poi_in_box_args', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_poi_in_box_args', self::$_TSPEC, $output);
  }
}

class GeohashService_query_poi_in_box_result extends TBase {
  static $_TSPEC;

  public $success = null;
  public $user_exception = null;
  public $system_exception = null;
  public $unkown_exception = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\GEOS\TPoi',
            ),
          ),
        1 => array(
          'var' => 'user_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUserException',
          ),
        2 => array(
          'var' => 'system_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSSystemException',
          ),
        3 => array(
          'var' => 'unkown_exception',
          'type' => TType::STRUCT,
          'class' => '\GEOS\GEOSUnknownException',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'GeohashService_query_poi_in_box_result';
  }

  public function read($input)
  {
    return $this->_read('GeohashService_query_poi_in_box_result', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('GeohashService_query_poi_in_box_result', self::$_TSPEC, $output);
  }
}


